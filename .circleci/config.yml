version: 2.1 # Set the CI version.


# We use orbs to provide some common ruby and node tasks and shorten our config.
# Learn more about orbs: https://circleci.com/orbs/
orbs:
  ruby: circleci/ruby@0.1.2
  node: circleci/node@1.1.6
  md-proofer: hubci/md-proofer@0.1


# Yaml References enable us to DRY out our config by sharing variables across multiple jobs.
# In this case, we are commonly using the "workspaces" feature to share
# build artifacts and files across jobs. For example, we build our Javascript
# persist it to a workspace to be made available when the Jekyll site builds.
references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root


# Several steps in this config use the same, specialized ruby-caching steps.
# Commands can be used to extract a common set of steps into a reusable-block.
# In this case, whenever you see `- ruby-deps` as a "step" in the config below,
# It is executing a command to restore_cache, install deps if needed, and save_cache.
commands:
  install-shared-assets:
     description: "Updates the shared-code between outer and docs."
     steps:
       - run:
           name: update submodules
           command: git submodule update --init src-shared
  ruby-deps:
    description: "Runs specialized Ruby cache steps."
    parameters:
      dir:
        description: |
          The directory relative to the root of the repo to run bundle for. 
          Leave empty for root directory.
        type: string
        default: ""
    steps:
      - restore_cache:
          key: circleci-docs-v1-{{ .Branch }}-<< parameters.dir >>-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby dependencies
          command: 
            |
            if [[ "<< parameters.dir >>" != "" ]]; then
              cd << parameters.dir >>
            fi 
            bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: circleci-docs-v1-{{ .Branch }}-<< parameters.dir >>-{{ checksum "Gemfile.lock" }}
          paths:
            - "vendor/bundle"
            - "<< parameters.dir >>/vendor/bundle"


# Workflows orchestrate a set of jobs to be run;
# the jobs for this pipeline are # configured below
workflows:

  build-deploy:
    jobs:
      - js_build
      - build_server_pdfs:
          filters:
            branches:
              only: /server\/.*/
      - build_api_docs
      - build_config_builder
      - build_config_ref
      - build:
          requires:
            - js_build
            - build_config_builder
            - build_server_pdfs
            - build_api_docs
            - build_config_ref
      - reindex-search:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master

  # We run a nightly build for running build/maintenance tasks
  # such as pulling in docker image tags or automating our api documentation
  nightly-build:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only: master
    jobs:
      - js_build
      - build_api_docs
      - build_config_builder
      - build_config_ref
      - build:
          requires:
            - js_build
            - build_api_docs
            - build_config_builder
            - build_config_ref
      - deploy:
          requires:
            - build


jobs:
  js_build: # this job is responsible for building Javascript assets and making them available for the "build" job
    executor: # we specify our executor to use the node orb.
      name: node/default
      tag: '8.11.1'
    steps:
      - *attach_workspace
      - checkout # get the code from GitHub
      - install-shared-assets
      - node/with-cache: # An orb command for steps to run in-between restoring and saving a cache.
          cache-key: "package-lock.json"
          cache-version: v9
          steps:
            - run: npm install
      - run:
          name: "Prepare JS assets" # Compile our final, production-ready JavaScript.
          command: npm run webpack-prod
      - run:
          name: "Persist JS assets" # Move our JS into our workspace.
          command: |
            set -exu
            mkdir -p /tmp/workspace/js
            mv jekyll/assets/js/*.bundle.js /tmp/workspace/js/
      - persist_to_workspace: # store the built files into the workspace for other jobs.
          root: *workspace_root
          paths:
            - js



  build_server_pdfs: # this job builds server-related pdf documentation, persisting it to the workspace as well.
    docker:
      - image: asciidoctor/docker-asciidoctor
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Build PDFs for Server
          command: ./scripts/build_pdfs_asciidoc.sh
      - store_artifacts: 
          path: release/tmp/

  build_config_builder: # this job runs the src-config-builder build process and moves the output into jekyll.
    executor:
      name: node/default
      tag: '8.11.1'
    steps:
      - checkout
      - install-shared-assets
      - *attach_workspace
      - run:
          name: "Create landing folder for config-builder-output"
          command: mkdir -p /tmp/workspace/config-builder/
      - restore_cache:
          key: circleci-docs-{{ .Branch }}-{{ checksum "src-config-builder/package-lock.json"}}
      - run:
          name: Install node dependencies
          command: cd src-config-builder; npm install;
      - save_cache:
          key: circleci-docs-{{ .Branch }}-{{ checksum "src-config-builder/package-lock.json"}}
          paths:
            - src-config-builder/node_modules
      - run:
          name: Build Config Builder
          command: cd src-config-builder; npm run build ; cd build; ls
      - run:
          name: Copy build output to temporary workspace
          command: cd src-config-builder; mv build/* /tmp/workspace/config-builder
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - config-builder

  build_api_docs: # a job to manage building our api documentation and persisting it to the workspace
    executor:
      name: ruby/default
      tag: '2.6.3-node-browsers'
    steps:
      - checkout
      - install-shared-assets
      - *attach_workspace
      - run:
          name: "Create landing folder for API doc output"
          command: |
            mkdir -p /tmp/workspace/api/v1
            mkdir -p /tmp/workspace/api/v2
      - ruby-deps:
          dir: src-api
      - restore_cache:
          key: circleci-docs-v2-{{ .Branch }}-{{ checksum "src-api/package-lock.json"}}
      - run:
          name: Install Node dependencies
          command: cd src-api; npm install
      - save_cache:
          key: circleci-docs-v2-{{ .Branch }}-{{ checksum "src-api/package-lock.json"}}
          paths:
            - src-api/node_modules
      - run:
          name: Build API 1.x documentation with Slate
          command: ./scripts/build_api_docs.sh -v1
      - run:
          name: Build API 2.x documentation with Widdershins and Slate
          command: ./scripts/build_api_docs.sh -v2
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - api


  # TODO: fix copying of build artifacts.
  build_config_ref: # a job to manage building our config-reference documentation and persisting it to the workspace
    executor:
      name: ruby/default
      tag: '2.6.3-node-browsers'
    steps:
      - checkout
      - install-shared-assets
      - *attach_workspace
      - run:
          name: "Create landing folder for crg output"
          command: mkdir -p /tmp/workspace/crg/
      - ruby-deps:
          dir: src-crg
      - run:
          name: Build CRG documentation with Slate
          command: ./scripts/build_api_docs.sh -crg
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - crg

  # The Main "Build" job. It pulls in assets from previous jobs (the built api docs, pdfs and javascript)
  # and puts everything in its place for a Jekyll build.
  build:
    executor:
      name: ruby/default
      tag: '2.6.3-node-browsers'

    working_directory: ~/circleci-docs
    environment:
      JEKYLL_ENV: production
      JOB_RESULTS_PATH: run-results
    steps:
      - checkout
      - install-shared-assets
      - *attach_workspace
      - md-proofer/install:
          version: "0.3.0"
      - run:
          name: "Test Markdown Files"
          command: md-proofer lint jekyll/_cci2/ jekyll/_api/ jekyll/_cci1/
      - ruby-deps
      - run:
          name: Create results directory
          command: mkdir -p $JOB_RESULTS_PATH
      - run:
          name: "Manage Data Files We'll Need"
          command: ./scripts/pull-docker-image-tags.sh
      - run:
          name: Restore Previous Job Assets (Javascript, API docs, config-builder) to Jekyll directory.
          command: |
            set -exu
            mkdir -p /tmp/workspace/js
            mv /tmp/workspace/js/* jekyll/assets/js/

            mkdir -p /tmp/workspace/api
            cp -r /tmp/workspace/api/ jekyll/_api/
            # remove unusued /api folder.
            rm -rf jekyll/_api/api

            mkdir -p /tmp/workspace/config-builder
            mkdir -p jekyll/config-builder
            cp -R /tmp/workspace/config-builder/* jekyll/config-builder/
            
            mkdir -p /tmp/workspace/crg
            mkdir -p jekyll/reference-2-1
            cp -R /tmp/workspace/crg/* jekyll/reference-2-1/
            
            mkdir -p /tmp/workspace/pdfs
            cp -r /tmp/workspace/api/* jekyll/_api/
      - run: sudo apt-get update; sudo apt-get --yes install nkf
      - run:
          name: Shim untranslated Japanese pages
          command: ./scripts/shim-translation.sh jekyll/_cci2 jekyll/_cci2_ja
      - run:
          name: Build the Jekyll site
          command: bundle exec jekyll build --config jekyll/_config.yml,jekyll/_config_production.yml --source jekyll --destination jekyll/_site/docs/ 2>&1 | tee $JOB_RESULTS_PATH/build-results.txt
      ### NOTE: we are ignore some files in the HTML proofer as it fails on pending translated docs.
      - run:
          name: Test with HTMLproofer
          command: bundle exec htmlproofer jekyll/_site --allow-hash-href --check-favicon --check-html --disable-external --file-ignore "jekyll/_site/docs/api/v2/index.html,docs/api/v2/,/docs/ja/2.0/security-server/,/docs/ja/2.0/v.2.19-overview/,/docs/ja/2.0/customizations/,/docs/ja/2.0/aws-prereq/,/docs/ja/2.0/ops/,/docs/ja/2.0/about-circleci/,/docs/ja/2.0/demo-apps/,/docs/ja/2.0/google-auth/,/docs/ja/2.0/orb-concepts/,/docs/ja/2.0/tutorials/,/docs/reference-2-1/" --empty-alt-ignore 2>&1 | nkf -w --url-input | tee $JOB_RESULTS_PATH/htmlproofer-results.txt

      - store_artifacts: # stores the built files of the Jekyll site
          path: jekyll/_site/docs/
          destination: circleci-docs
      - store_artifacts: # stores build log output.
          path: run-results/
          destination: run-results
      - persist_to_workspace:
          root: ~/circleci-docs/jekyll/_site
          paths:
            - docs

  reindex-search:
    executor:
      name: ruby/default
      tag: '2.6.3-node-browsers'
    working_directory: ~/circleci-docs
    environment:
      JEKYLL_ENV: production
    steps:
      - checkout
      - install-shared-assets
      - *attach_workspace
      - restore_cache:
          key: circleci-docs-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - ruby-deps
      - run:
          name: Update Algolia Index
          command: |
            ALGOLIA_API_KEY=$ALGOLIA_PRIVATE_KEY bundle exec jekyll algolia --source jekyll --config jekyll/_config.yml

  deploy:
    docker:
      - image: cibuilds/aws:1.16.185
    steps:
      - attach_workspace:
          at: ./generated-site
      - run:
          name: Deploy to S3 if tests pass and branch is Master
          command: aws s3 sync generated-site/docs s3://circle-production-static-site/docs/ --delete

