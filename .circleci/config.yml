{
    "version": 2.1,
    "orbs": {
        "ruby": "circleci/ruby@1.1.4",
        "node": "circleci/node@4.7.0",
        "md-proofer": "hubci/md-proofer@0.1"
    },
    "parameters": {
        "run-schedule": {
            "type": "boolean",
            "default": false
        }
    },
    "references": {
        "workspace_root": "/tmp/workspace",
        "attach_workspace": {
            "attach_workspace": {
                "at": "/tmp/workspace"
            }
        }
    },
    "commands": {
        "ruby-deps": {
            "description": "Runs specialized Ruby cache steps.",
            "parameters": {
                "dir": {
                    "description": "The directory relative to the root of the repo to run bundle for.\nLeave empty for root directory.\n",
                    "type": "string",
                    "default": ""
                }
            },
            "steps": [
                {
                    "restore_cache": {
                        "key": "circleci-docs-v1-{{ .Branch }}-<< parameters.dir >>-{{ checksum \"Gemfile.lock\" }}"
                    }
                },
                {
                    "run": {
                        "name": "Install Ruby dependencies",
                        "command": "if [[ \"<< parameters.dir >>\" != \"\" ]]; then\n  cd << parameters.dir >>\nfi\n#cmake is needed fo rugged, a gem dependency\nsudo apt-get update && sudo apt-get install -y cmake\nbundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3\n"
                    }
                },
                {
                    "save_cache": {
                        "key": "circleci-docs-v1-{{ .Branch }}-<< parameters.dir >>-{{ checksum \"Gemfile.lock\" }}",
                        "paths": [
                            "vendor/bundle",
                            "<< parameters.dir >>/vendor/bundle"
                        ]
                    }
                }
            ]
        },
        "set-jekyll-basename": {
            "description": "Set JEKYLL_BASENAME env var and persist in $BASH_ENV",
            "steps": [
                {
                    "run": {
                        "name": "Populate JEKYLL_BASENAME env var",
                        "command": "if [ ${CIRCLE_BRANCH} = master -o ${CIRCLE_BRANCH} = main -o ${CIRCLE_BRANCH} = /.*-preview/ ]; then\n  echo \"export JEKYLL_BASENAME=docs\" >> $BASH_ENV;\nelse\n  echo \"export JEKYLL_BASENAME=${CIRCLE_BRANCH}\" >> $BASH_ENV;\nfi\n"
                    }
                }
            ]
        },
        "trigger-docs-platform-build": {
            "description": "Call API V2 to deploy content to Docs Platform",
            "steps": [
                {
                    "run": {
                        "name": "Deploy content to Docs Platform",
                        "command": "curl --request POST \\\n--url https://circleci.com/api/v2/project/gh/circleci/docs-platform/pipeline \\\n--header \"Circle-Token: $CIRCLECI_API_KEY\" \\\n--header 'content-type: application/json' \\\n--data '{\"branch\": \"main\"}'\n"
                    }
                }
            ]
        }
    },
    "workflows": {
        "build-deploy": {
            "when": {
                "not": "<< pipeline.parameters.run-schedule >>"
            },
            "jobs": [
                {
                    "build_server_pdfs": {
                        "filters": {
                            "branches": {
                                "only": "/.*/server/*"
                            }
                        }
                    }
                },
                "build_api_docs",
                {
                    "build": {
                        "requires": [
                            "build_server_pdfs",
                            "build_api_docs"
                        ]
                    }
                },
                {
                    "reindex-search": {
                        "filters": {
                            "branches": {
                                "only": "master"
                            }
                        }
                    }
                },
                {
                    "deploy": {
                        "requires": [
                            "build"
                        ],
                        "filters": {
                            "branches": {
                                "only": "master"
                            }
                        }
                    }
                }
            ]
        },
        "nightly-build": {
            "when": "<< pipeline.parameters.run-schedule >>",
            "jobs": [
                "trigger-deploy"
            ]
        }
    },
    "jobs": {
        "build_server_pdfs": {
            "docker": [
                {
                    "image": "asciidoctor/docker-asciidoctor"
                }
            ],
            "steps": [
                {
                    "attach_workspace": {
                        "at": "/tmp/workspace"
                    }
                },
                "checkout",
                {
                    "run": {
                        "name": "Build PDFs for server v3",
                        "command": "./scripts/build_pdfs_server_3.sh"
                    }
                },
                {
                    "run": {
                        "name": "Build PDFs for server v4",
                        "command": "./scripts/build_pdfs_server_4.sh"
                    }
                },
                {
                    "store_artifacts": {
                        "path": "release/tmp/"
                    }
                }
            ]
        },
        "build_api_docs": {
            "executor": {
                "name": "ruby/default",
                "tag": "2.7.4-browsers"
            },
            "steps": [
                "checkout",
                {
                    "attach_workspace": {
                        "at": "/tmp/workspace"
                    }
                },
                {
                    "run": {
                        "name": "Create landing folder for API doc output",
                        "command": "mkdir -p /tmp/workspace/api/v1\nmkdir -p /tmp/workspace/api/v2\n"
                    }
                },
                {
                    "ruby-deps": {
                        "dir": "src-api"
                    }
                },
                {
                    "restore_cache": {
                        "key": "circleci-docs-v2-{{ .Branch }}-{{ checksum \"src-api/yarn.lock\"}}"
                    }
                },
                {
                    "run": {
                        "name": "Install Node dependencies",
                        "command": "cd src-api; yarn install"
                    }
                },
                {
                    "save_cache": {
                        "key": "circleci-docs-v2-{{ .Branch }}-{{ checksum \"src-api/yarn.lock\"}}",
                        "paths": [
                            "src-api/node_modules"
                        ]
                    }
                },
                {
                    "run": {
                        "name": "Build API 1.x documentation with Slate",
                        "command": "./scripts/build_api_docs.sh -v1"
                    }
                },
                {
                    "run": {
                        "name": "Build API 2.x documentation with Redoc",
                        "command": "./scripts/build_api_docs.sh -v2"
                    }
                },
                {
                    "persist_to_workspace": {
                        "root": "/tmp/workspace",
                        "paths": [
                            "api"
                        ]
                    }
                }
            ]
        },
        "build": {
            "executor": {
                "name": "ruby/default",
                "tag": "2.7.4-browsers"
            },
            "resource_class": "medium+",
            "working_directory": "~/circleci-docs",
            "environment": {
                "JEKYLL_ENV": "production",
                "JOB_RESULTS_PATH": "run-results"
            },
            "steps": [
                "checkout",
                {
                    "attach_workspace": {
                        "at": "/tmp/workspace"
                    }
                },
                {
                    "md-proofer/install": {
                        "version": "0.3.0"
                    }
                },
                {
                    "run": {
                        "name": "Test Markdown Files",
                        "command": "md-proofer lint jekyll/_cci2/ jekyll/_api/"
                    }
                },
                {
                    "run": {
                        "name": "Install dependencies for pronto gem",
                        "command": "sudo apt-get update --allow-releaseinfo-change\nsudo apt-get install cmake pkg-config\n"
                    }
                },
                "ruby-deps",
                {
                    "node/install-packages": {
                        "pkg-manager": "yarn",
                        "cache-version": null
                    }
                },
                {
                    "run": {
                        "name": "Run markdownlint with pronto",
                        "command": "bundle exec pronto run -f github_pr -c origin/master"
                    }
                },
                {
                    "run": {
                        "name": "Create results directory",
                        "command": "mkdir -p $JOB_RESULTS_PATH"
                    }
                },
                {
                    "run": {
                        "name": "Manage Data Files We'll Need",
                        "command": "./scripts/pull-docker-image-tags.sh"
                    }
                },
                {
                    "run": {
                        "name": "Restore Previous Job Assets (Javascript, API docs) to Jekyll directory.",
                        "command": "set -exu\nmkdir -p /tmp/workspace/api\ncp -r /tmp/workspace/api/ jekyll/_api/\n# remove unusued /api folder.\nrm -rf jekyll/_api/api\nmkdir -p /tmp/workspace/pdfs\ncp -r /tmp/workspace/api/* jekyll/_api/\n"
                    }
                },
                {
                    "run": "sudo apt-get update; sudo apt-get --yes install nkf"
                },
                {
                    "run": {
                        "name": "Shim untranslated Japanese pages",
                        "command": "./scripts/shim-translation.sh jekyll/_cci2 jekyll/_cci2_ja"
                    }
                },
                "set-jekyll-basename",
                {
                    "run": {
                        "name": "Build the Jekyll site",
                        "command": "bundle exec rake build"
                    }
                },
                {
                    "run": {
                        "name": "Workaround to pass htmlproofer for docs where baseurl (/docs) is hardcoded",
                        "command": "if [ ! ${JEKYLL_BASENAME} = \"docs\" ]; then\n  cd jekyll/_site\n  ln -s ${JEKYLL_BASENAME} docs\nfi\n"
                    }
                },
                {
                    "run": {
                        "name": "Test with HTMLproofer",
                        "command": "bundle exec rake test\n"
                    }
                },
                {
                    "run": {
                        "name": "compress jekyll output",
                        "command": "tar -zcvf circleci-docs.tar.gz jekyll/_site/\n"
                    }
                },
                {
                    "store_artifacts": {
                        "path": "circleci-docs.tar.gz",
                        "destination": "circleci-docs"
                    }
                },
                {
                    "store_artifacts": {
                        "path": "run-results/",
                        "destination": "run-results"
                    }
                },
                {
                    "persist_to_workspace": {
                        "root": "~/circleci-docs/jekyll/",
                        "paths": [
                            "_site/*"
                        ]
                    }
                }
            ]
        },
        "reindex-search": {
            "executor": {
                "name": "ruby/default",
                "tag": "2.7.4-browsers"
            },
            "working_directory": "~/circleci-docs",
            "environment": {
                "JEKYLL_ENV": "production"
            },
            "steps": [
                "checkout",
                {
                    "attach_workspace": {
                        "at": "/tmp/workspace"
                    }
                },
                {
                    "restore_cache": {
                        "key": "circleci-docs-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}"
                    }
                },
                "ruby-deps",
                {
                    "run": {
                        "name": "Update Algolia Index",
                        "command": "ALGOLIA_API_KEY=$ALGOLIA_PRIVATE_KEY bundle exec jekyll algolia --source jekyll --config jekyll/_config.yml\n"
                    }
                }
            ]
        },
        "deploy": {
            "docker": [
                {
                    "image": "cibuilds/aws:1.16.185"
                }
            ],
            "steps": [
                {
                    "attach_workspace": {
                        "at": "./generated-site"
                    }
                },
                "set-jekyll-basename",
                "trigger-docs-platform-build"
            ]
        },
        "trigger-deploy": {
            "docker": [
                {
                    "image": "cibuilds/aws:1.16.185"
                }
            ],
            "steps": [
                "trigger-docs-platform-build"
            ]
        }
    }
}
