(function(define){if(typeof define==="function"&&define.amd){define=undefined;}(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
  /*
   * Module dependencies.
   */

  var analytics = require('@segment/analytics.js-core');

  /*
   * Exports.
   */

  module.exports = function(Integrations) {
    for (let integration in Integrations) {
      analytics.use(Integrations[integration]);
    }

    return analytics;
  };

  },{"@segment/analytics.js-core":26}],2:[function(require,module,exports){
  (function (global){(function (){
  /*
   * Module dependencies.
   */

  var Integrations = require('./integrations');
  var analytics = require('./analytics')(Integrations);

  // Get a handle on the global analytics queue, as initialized by the
  // analytics.js snippet. The snippet stubs out the analytics.js API and queues
  // up calls for execution when the full analytics.js library (this file) loads.
  var analyticsq = global.analytics || [];

  // Parse the version from the analytics.js snippet.
  var snippetVersion = analyticsq && analyticsq.SNIPPET_VERSION ? parseFloat(analyticsq.SNIPPET_VERSION, 10) : 0;

  // Include as much version information as possible so we know exactly what we're running.
  // Looks like: {
  //   "core": "3.0.0",
  //   "cdn": "1.15.3",
  //   "integrations": {
  //     "Segment.io": "3.1.1",
  //     ...
  //   }
  // }
  analytics._VERSIONS = {"cdn":null,"integrations":{"Amplitude":"3.3.3","Segment.io":"4.4.7"}};

  // Initialize analytics.js. CDN will render configuration objects into
  // `{"Amplitude":{"apiKey":"803f06d9c2463a9e1605c438121f762d","batchEvents":false,"deviceIdFromUrlParam":true,"enableLocationListening":true,"eventUploadPeriodMillis":30000,"eventUploadThreshold":30,"forceHttps":false,"groupTypeTrait":"","groupValueTrait":"","mapQueryParams":{},"preferAnonymousIdForDeviceId":false,"saveParamsReferrerOncePerSession":true,"trackAllPages":false,"trackAllPagesV2":false,"trackCategorizedPages":true,"trackGclid":false,"trackNamedPages":true,"trackReferrer":true,"trackRevenuePerProduct":false,"trackSessionEvents":false,"trackUtmProperties":true,"traitsToIncrement":[],"traitsToSetOnce":[],"useAdvertisingIdForDeviceId":false,"useCustomAmplitudeProperties":false,"useLogRevenueV2":false,"versionSettings":{"version":"3.3.3","componentTypes":["browser","ios","android","server"]},"type":"browser","bundlingStatus":"bundled"},"Segment.io":{"apiKey":"mAJ9W2SwLHgmJtFkpaXWCbwEeNk9D8CZ","unbundledIntegrations":[],"addBundledMetadata":true,"maybeBundledConfigIds":{"Slack":["59fc87abcceefb0001b9f0fd"],"Optimizely X":["615ca4f7afdcc417ded60f6f"],"Amplitude":["gvKnOZgq1f"]},"versionSettings":{"version":"4.4.7","componentTypes":["browser"]},"retryQueue":true}}` and `{}` using project settings.
  analytics.initialize({"Amplitude":{"apiKey":"803f06d9c2463a9e1605c438121f762d","batchEvents":false,"deviceIdFromUrlParam":true,"enableLocationListening":true,"eventUploadPeriodMillis":30000,"eventUploadThreshold":30,"forceHttps":false,"groupTypeTrait":"","groupValueTrait":"","mapQueryParams":{},"preferAnonymousIdForDeviceId":false,"saveParamsReferrerOncePerSession":true,"trackAllPages":false,"trackAllPagesV2":false,"trackCategorizedPages":true,"trackGclid":false,"trackNamedPages":true,"trackReferrer":true,"trackRevenuePerProduct":false,"trackSessionEvents":false,"trackUtmProperties":true,"traitsToIncrement":[],"traitsToSetOnce":[],"useAdvertisingIdForDeviceId":false,"useCustomAmplitudeProperties":false,"useLogRevenueV2":false,"versionSettings":{"version":"3.3.3","componentTypes":["browser","ios","android","server"]},"type":"browser","bundlingStatus":"bundled"},"Segment.io":{"apiKey":"mAJ9W2SwLHgmJtFkpaXWCbwEeNk9D8CZ","unbundledIntegrations":[],"addBundledMetadata":true,"maybeBundledConfigIds":{"Slack":["59fc87abcceefb0001b9f0fd"],"Optimizely X":["615ca4f7afdcc417ded60f6f"],"Amplitude":["gvKnOZgq1f"]},"versionSettings":{"version":"4.4.7","componentTypes":["browser"]},"retryQueue":true}}, {
    initialPageview: snippetVersion === 0,
    plan: {}
  });

  // Make any queued calls up before the full analytics.js library
  // loaded
  while (analyticsq && analyticsq.length > 0) {
    var args = analyticsq.shift();
    var method = args.shift();

    if (typeof analytics[method] === 'function') {
      analytics[method].apply(analytics, args);
    }
  }

  // Free the reference to analyticsq
  analyticsq = null;

  /*
   * Exports.
   */

  // Set `global.analytics` explicitly rather than using Browserify's
  // `--standalone` flag in order to avoid hooking into an already-declared
  // `global.require`
  global.analytics = analytics;

  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{"./analytics":1,"./integrations":3}],3:[function(require,module,exports){
  module.exports = {
    'adlearn-open-platform': require('@segment/analytics.js-integration-adlearn-open-platform'),
    'adobe-analytics': require('@segment/analytics.js-integration-adobe-analytics'),
    'adobe-target': require('@segment/analytics.js-integration-adobe-target'),
    'adometry': require('@segment/analytics.js-integration-adometry'),
    'adroll': require('@segment/analytics.js-integration-adroll'),
    'adwords': require('@segment/analytics.js-integration-adwords'),
    'alexa': require('@segment/analytics.js-integration-alexa'),
    'ambassador': require('@segment/analytics.js-integration-ambassador'),
    'amplitude': require('@segment/analytics.js-integration-amplitude'),
    'appboy': require('@segment/analytics.js-integration-appboy'),
    'appcues': require('@segment/analytics.js-integration-appcues'),
    'appnexus': require('@segment/analytics.js-integration-appnexus'),
    'aptrinsic': require('@segment/analytics.js-integration-aptrinsic'),
    'atatus': require('@segment/analytics.js-integration-atatus'),
    'autosend': require('@segment/analytics.js-integration-autosend'),
    'awesm': require('@segment/analytics.js-integration-awesm'),
    'bing-ads': require('@segment/analytics.js-integration-bing-ads'),
    'blueshift': require('@segment/analytics.js-integration-blueshift'),
    'boomtrain': require('@segment/analytics.js-integration-boomtrain'),
    'bronto': require('@segment/analytics.js-integration-bronto'),
    'bugherd': require('@segment/analytics.js-integration-bugherd'),
    'bugsnag': require('@segment/analytics.js-integration-bugsnag'),
    'castle': require('@segment/analytics.js-integration-castle'),
    'chameleon': require('@segment/analytics.js-integration-chameleon'),
    'chartbeat': require('@segment/analytics.js-integration-chartbeat'),
    'clevertap': require('@segment/analytics.js-integration-clevertap'),
    'clicky': require('@segment/analytics.js-integration-clicky'),
    'comscore': require('@segment/analytics.js-integration-comscore'),
    'convertro': require('@segment/analytics.js-integration-convertro'),
    'crazy-egg': require('@segment/analytics.js-integration-crazy-egg'),
    'criteo': require('@segment/analytics.js-integration-criteo'),
    'curebit': require('@segment/analytics.js-integration-curebit'),
    'customerio': require('@segment/analytics.js-integration-customerio'),
    'cxense': require('@segment/analytics.js-integration-cxense'),
    'doubleclick-floodlight': require('@segment/analytics.js-integration-doubleclick-floodlight'),
    'drip': require('@segment/analytics.js-integration-drip'),
    'elevio': require('@segment/analytics.js-integration-elevio'),
    'eloqua': require('@segment/analytics.js-integration-eloqua'),
    'email-aptitude': require('@segment/analytics.js-integration-email-aptitude'),
    'errorception': require('@segment/analytics.js-integration-errorception'),
    'evergage': require('@segment/analytics.js-integration-evergage'),
    'extole': require('@segment/analytics.js-integration-extole'),
    'facebook-conversion-tracking': require('@segment/analytics.js-integration-facebook-conversion-tracking'),
    'facebook-custom-audiences': require('@segment/analytics.js-integration-facebook-custom-audiences'),
    'facebook-pixel': require('@segment/analytics.js-integration-facebook-pixel'),
    'foxmetrics': require('@segment/analytics.js-integration-foxmetrics'),
    'friendbuy': require('@segment/analytics.js-integration-friendbuy'),
    'fullstory': require('@segment/analytics.js-integration-fullstory'),
    'gauges': require('@segment/analytics.js-integration-gauges'),
    'get-satisfaction': require('@segment/analytics.js-integration-get-satisfaction'),
    'google-analytics': require('@segment/analytics.js-integration-google-analytics'),
    'google-tag-manager': require('@segment/analytics.js-integration-google-tag-manager'),
    'gosquared': require('@segment/analytics.js-integration-gosquared'),
    'gtag': require('@segment/analytics.js-integration-gtag'),
    'heap': require('@segment/analytics.js-integration-heap'),
    'hindsight': require('@segment/analytics.js-integration-hindsight'),
    'hittail': require('@segment/analytics.js-integration-hittail'),
    'hotjar': require('@segment/analytics.js-integration-hotjar'),
    'hubspot': require('@segment/analytics.js-integration-hubspot'),
    'improvely': require('@segment/analytics.js-integration-improvely'),
    'inspectlet': require('@segment/analytics.js-integration-inspectlet'),
    'intercom': require('@segment/analytics.js-integration-intercom'),
    'keen-io': require('@segment/analytics.js-integration-keen-io'),
    'kenshoo': require('@segment/analytics.js-integration-kenshoo'),
    'kenshoo-infinity': require('@segment/analytics.js-integration-kenshoo-infinity'),
    'kissmetrics': require('@segment/analytics.js-integration-kissmetrics'),
    'klaviyo': require('@segment/analytics.js-integration-klaviyo'),
    'linkedin-insight-tag': require('@segment/analytics.js-integration-linkedin-insight-tag'),
    'livechat': require('@segment/analytics.js-integration-livechat'),
    'localytics': require('@segment/analytics.js-integration-localytics'),
    'lucky-orange': require('@segment/analytics.js-integration-lucky-orange'),
    'lytics': require('@segment/analytics.js-integration-lytics'),
    'madkudu': require('@segment/analytics.js-integration-madkudu'),
    'marketo': require('@segment/analytics.js-integration-marketo'),
    'marketo-v2': require('@segment/analytics.js-integration-marketo-v2'),
    'mediamath': require('@segment/analytics.js-integration-mediamath'),
    'mixpanel': require('@segment/analytics.js-integration-mixpanel'),
    'moengage': require('@segment/analytics.js-integration-moengage'),
    'mojn': require('@segment/analytics.js-integration-mojn'),
    'monetate': require('@segment/analytics.js-integration-monetate'),
    'mouseflow': require('@segment/analytics.js-integration-mouseflow'),
    'mousestats': require('@segment/analytics.js-integration-mousestats'),
    'nanigans': require('@segment/analytics.js-integration-nanigans'),
    'navilytics': require('@segment/analytics.js-integration-navilytics'),
    'nielsen-dcr': require('@segment/analytics.js-integration-nielsen-dcr'),
    'nielsen-dtvr': require('@segment/analytics.js-integration-nielsen-dtvr'),
    'nudgespot': require('@segment/analytics.js-integration-nudgespot'),
    'olark': require('@segment/analytics.js-integration-olark'),
    'omniture': require('@segment/analytics.js-integration-omniture'),
    'onespot': require('@segment/analytics.js-integration-onespot'),
    'optimizely': require('@segment/analytics.js-integration-optimizely'),
    'outbound': require('@segment/analytics.js-integration-outbound'),
    'pardot': require('@segment/analytics.js-integration-pardot'),
    'parsely': require('@segment/analytics.js-integration-parsely'),
    'pendo': require('@segment/analytics.js-integration-pendo'),
    'perfect-audience': require('@segment/analytics.js-integration-perfect-audience'),
    'perimeterx': require('@segment/analytics.js-integration-perimeterx'),
    'pingdom': require('@segment/analytics.js-integration-pingdom'),
    'pinterest-tag': require('@segment/analytics.js-integration-pinterest-tag'),
    'piwik': require('@segment/analytics.js-integration-piwik'),
    'qualaroo': require('@segment/analytics.js-integration-qualaroo'),
    'quanticmind': require('@segment/analytics.js-integration-quanticmind'),
    'quora-conversion-pixel': require('@segment/analytics.js-integration-quora-conversion-pixel'),
    'ramen': require('@segment/analytics.js-integration-ramen'),
    'rockerbox': require('@segment/analytics.js-integration-rockerbox'),
    'rocket-fuel': require('@segment/analytics.js-integration-rocket-fuel'),
    'rollbar': require('@segment/analytics.js-integration-rollbar'),
    'route': require('@segment/analytics.js-integration-route'),
    'saasquatch': require('@segment/analytics.js-integration-saasquatch'),
    'salesforce-dmp': require('@segment/analytics.js-integration-salesforce-dmp'),
    'salesforce-live-agent': require('@segment/analytics.js-integration-salesforce-live-agent'),
    'satismeter': require('@segment/analytics.js-integration-satismeter'),
    'segmentio': require('@segment/analytics.js-integration-segmentio'),
    'sentry': require('@segment/analytics.js-integration-sentry'),
    'shareasale': require('@segment/analytics.js-integration-shareasale'),
    'simplereach': require('@segment/analytics.js-integration-simplereach'),
    'simplifi': require('@segment/analytics.js-integration-simplifi'),
    'snapengage': require('@segment/analytics.js-integration-snapengage'),
    'spinnakr': require('@segment/analytics.js-integration-spinnakr'),
    'steelhouse': require('@segment/analytics.js-integration-steelhouse'),
    'stripe-radar': require('@segment/analytics.js-integration-stripe-radar'),
    'supporthero': require('@segment/analytics.js-integration-supporthero'),
    'tag-injector': require('@segment/analytics.js-integration-tag-injector'),
    'taplytics': require('@segment/analytics.js-integration-taplytics'),
    'tapstream': require('@segment/analytics.js-integration-tapstream'),
    'totango': require('@segment/analytics.js-integration-totango'),
    'tvsquared': require('@segment/analytics.js-integration-tvsquared'),
    'twitter-ads': require('@segment/analytics.js-integration-twitter-ads'),
    'userlike': require('@segment/analytics.js-integration-userlike'),
    'uservoice': require('@segment/analytics.js-integration-uservoice'),
    'vero': require('@segment/analytics.js-integration-vero'),
    'visual-website-optimizer': require('@segment/analytics.js-integration-visual-website-optimizer'),
    'webengage': require('@segment/analytics.js-integration-webengage'),
    'wigzo': require('@segment/analytics.js-integration-wigzo'),
    'wishpond': require('@segment/analytics.js-integration-wishpond'),
    'woopra': require('@segment/analytics.js-integration-woopra'),
    'wootric': require('@segment/analytics.js-integration-wootric'),
    'yandex-metrica': require('@segment/analytics.js-integration-yandex-metrica'),
    'youbora': require('@segment/analytics.js-integration-youbora'),
    'zopim': require('@segment/analytics.js-integration-zopim')
  };

  },{"@segment/analytics.js-integration-adlearn-open-platform":39,"@segment/analytics.js-integration-adobe-analytics":48,"@segment/analytics.js-integration-adobe-target":57,"@segment/analytics.js-integration-adometry":66,"@segment/analytics.js-integration-adroll":75,"@segment/analytics.js-integration-adwords":81,"@segment/analytics.js-integration-alexa":87,"@segment/analytics.js-integration-ambassador":93,"@segment/analytics.js-integration-amplitude":99,"@segment/analytics.js-integration-appboy":109,"@segment/analytics.js-integration-appcues":118,"@segment/analytics.js-integration-appnexus":126,"@segment/analytics.js-integration-aptrinsic":135,"@segment/analytics.js-integration-atatus":141,"@segment/analytics.js-integration-autosend":149,"@segment/analytics.js-integration-awesm":155,"@segment/analytics.js-integration-bing-ads":161,"@segment/analytics.js-integration-blueshift":167,"@segment/analytics.js-integration-boomtrain":173,"@segment/analytics.js-integration-bronto":179,"@segment/analytics.js-integration-bugherd":185,"@segment/analytics.js-integration-bugsnag":191,"@segment/analytics.js-integration-castle":199,"@segment/analytics.js-integration-chameleon":205,"@segment/analytics.js-integration-chartbeat":211,"@segment/analytics.js-integration-clevertap":217,"@segment/analytics.js-integration-clicky":226,"@segment/analytics.js-integration-comscore":234,"@segment/analytics.js-integration-convertro":240,"@segment/analytics.js-integration-crazy-egg":249,"@segment/analytics.js-integration-criteo":255,"@segment/analytics.js-integration-curebit":265,"@segment/analytics.js-integration-customerio":271,"@segment/analytics.js-integration-cxense":277,"@segment/analytics.js-integration-doubleclick-floodlight":286,"@segment/analytics.js-integration-drip":295,"@segment/analytics.js-integration-elevio":303,"@segment/analytics.js-integration-eloqua":311,"@segment/analytics.js-integration-email-aptitude":320,"@segment/analytics.js-integration-errorception":329,"@segment/analytics.js-integration-evergage":337,"@segment/analytics.js-integration-extole":343,"@segment/analytics.js-integration-facebook-conversion-tracking":349,"@segment/analytics.js-integration-facebook-custom-audiences":355,"@segment/analytics.js-integration-facebook-pixel":361,"@segment/analytics.js-integration-foxmetrics":372,"@segment/analytics.js-integration-friendbuy":378,"@segment/analytics.js-integration-fullstory":389,"@segment/analytics.js-integration-gauges":399,"@segment/analytics.js-integration-get-satisfaction":405,"@segment/analytics.js-integration-google-analytics":411,"@segment/analytics.js-integration-google-tag-manager":420,"@segment/analytics.js-integration-gosquared":426,"@segment/analytics.js-integration-gtag":432,"@segment/analytics.js-integration-heap":438,"@segment/analytics.js-integration-hindsight":447,"@segment/analytics.js-integration-hittail":456,"@segment/analytics.js-integration-hotjar":462,"@segment/analytics.js-integration-hubspot":471,"@segment/analytics.js-integration-improvely":480,"@segment/analytics.js-integration-inspectlet":486,"@segment/analytics.js-integration-intercom":492,"@segment/analytics.js-integration-keen-io":498,"@segment/analytics.js-integration-kenshoo":513,"@segment/analytics.js-integration-kenshoo-infinity":504,"@segment/analytics.js-integration-kissmetrics":519,"@segment/analytics.js-integration-klaviyo":525,"@segment/analytics.js-integration-linkedin-insight-tag":531,"@segment/analytics.js-integration-livechat":540,"@segment/analytics.js-integration-localytics":549,"@segment/analytics.js-integration-lucky-orange":558,"@segment/analytics.js-integration-lytics":564,"@segment/analytics.js-integration-madkudu":570,"@segment/analytics.js-integration-marketo":585,"@segment/analytics.js-integration-marketo-v2":576,"@segment/analytics.js-integration-mediamath":594,"@segment/analytics.js-integration-mixpanel":603,"@segment/analytics.js-integration-moengage":609,"@segment/analytics.js-integration-mojn":618,"@segment/analytics.js-integration-monetate":624,"@segment/analytics.js-integration-mouseflow":633,"@segment/analytics.js-integration-mousestats":638,"@segment/analytics.js-integration-nanigans":644,"@segment/analytics.js-integration-navilytics":652,"@segment/analytics.js-integration-nielsen-dcr":658,"@segment/analytics.js-integration-nielsen-dtvr":668,"@segment/analytics.js-integration-nudgespot":677,"@segment/analytics.js-integration-olark":683,"@segment/analytics.js-integration-omniture":689,"@segment/analytics.js-integration-onespot":698,"@segment/analytics.js-integration-optimizely":707,"@segment/analytics.js-integration-outbound":718,"@segment/analytics.js-integration-pardot":726,"@segment/analytics.js-integration-parsely":738,"@segment/analytics.js-integration-pendo":745,"@segment/analytics.js-integration-perfect-audience":751,"@segment/analytics.js-integration-perimeterx":757,"@segment/analytics.js-integration-pingdom":763,"@segment/analytics.js-integration-pinterest-tag":769,"@segment/analytics.js-integration-piwik":778,"@segment/analytics.js-integration-qualaroo":784,"@segment/analytics.js-integration-quanticmind":793,"@segment/analytics.js-integration-quora-conversion-pixel":799,"@segment/analytics.js-integration-ramen":808,"@segment/analytics.js-integration-rockerbox":814,"@segment/analytics.js-integration-rocket-fuel":823,"@segment/analytics.js-integration-rollbar":832,"@segment/analytics.js-integration-route":838,"@segment/analytics.js-integration-saasquatch":844,"@segment/analytics.js-integration-salesforce-dmp":850,"@segment/analytics.js-integration-salesforce-live-agent":859,"@segment/analytics.js-integration-satismeter":868,"@segment/analytics.js-integration-segmentio":875,"@segment/analytics.js-integration-sentry":891,"@segment/analytics.js-integration-shareasale":897,"@segment/analytics.js-integration-simplereach":906,"@segment/analytics.js-integration-simplifi":912,"@segment/analytics.js-integration-snapengage":921,"@segment/analytics.js-integration-spinnakr":927,"@segment/analytics.js-integration-steelhouse":933,"@segment/analytics.js-integration-stripe-radar":942,"@segment/analytics.js-integration-supporthero":951,"@segment/analytics.js-integration-tag-injector":957,"@segment/analytics.js-integration-taplytics":966,"@segment/analytics.js-integration-tapstream":972,"@segment/analytics.js-integration-totango":978,"@segment/analytics.js-integration-tvsquared":987,"@segment/analytics.js-integration-twitter-ads":996,"@segment/analytics.js-integration-userlike":1002,"@segment/analytics.js-integration-uservoice":1008,"@segment/analytics.js-integration-vero":1014,"@segment/analytics.js-integration-visual-website-optimizer":1020,"@segment/analytics.js-integration-webengage":1026,"@segment/analytics.js-integration-wigzo":1032,"@segment/analytics.js-integration-wishpond":1038,"@segment/analytics.js-integration-woopra":1044,"@segment/analytics.js-integration-wootric":1053,"@segment/analytics.js-integration-yandex-metrica":1062,"@segment/analytics.js-integration-youbora":1068,"@segment/analytics.js-integration-zopim":1076}],4:[function(require,module,exports){
  var IDX=256, HEX=[], BUFFER;
  while (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);

  function v4() {
    var i=0, num, out='';

    if (!BUFFER || ((IDX + 16) > 256)) {
      BUFFER = Array(i=256);
      while (i--) BUFFER[i] = 256 * Math.random() | 0;
      i = IDX = 0;
    }

    for (; i < 16; i++) {
      num = BUFFER[IDX + i];
      if (i==6) out += HEX[num & 15 | 64];
      else if (i==8) out += HEX[num & 63 | 128];
      else out += HEX[num];

      if (i & 1 && i > 1 && i < 11) out += '-';
    }

    IDX++;
    return out;
  }

  exports.v4 = v4;
  },{}],5:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var arity = require('@ndhoule/arity');

  var objToString = Object.prototype.toString;

  /**
   * Determine if a value is a function.
   *
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to lib
  var isFunction = function(val) {
    return typeof val === 'function';
  };

  /**
   * Determine if a value is a number.
   *
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to lib
  var isNumber = function(val) {
    var type = typeof val;
    return type === 'number' || (type === 'object' && objToString.call(val) === '[object Number]');
  };

  /**
   * Wrap a function `fn` in a function that will invoke `fn` when invoked `n` or
   * more times.
   *
   * @name after
   * @api public
   * @category Function
   * @param {Number} n The number of
   * @param {Function} fn The function to wrap.
   * @return {Function} A function that will call `fn` after `n` or more
   * invocations.
   * @example
   */
  var after = function after(n, fn) {
    if (!isNumber(n)) {
      throw new TypeError('Expected a number but received ' + typeof n);
    }

    if (!isFunction(fn)) {
      throw new TypeError('Expected a function but received ' + typeof fn);
    }

    var callCount = 0;

    return arity(fn.length, function() {
      callCount += 1;

      if (callCount < n) {
        return;
      }

      return fn.apply(this, arguments);
    });
  };

  /*
   * Exports.
   */

  module.exports = after;

  },{"@ndhoule/arity":6}],6:[function(require,module,exports){
  'use strict';

  var objToString = Object.prototype.toString;

  /**
   * Determine if a value is a function.
   *
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to lib
  var isFunction = function(val) {
    return typeof val === 'function';
  };

  /**
   * Determine if a value is a number.
   *
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to lib
  var isNumber = function(val) {
    var type = typeof val;
    return type === 'number' || (type === 'object' && objToString.call(val) === '[object Number]');
  };

   /**
    * Creates an array of generic, numbered argument names.
    *
    * @name createParams
    * @api private
    * @param {number} n
    * @return {Array}
    * @example
    * argNames(2);
    * //=> ['arg1', 'arg2']
    */
  var createParams = function createParams(n) {
    var args = [];

    for (var i = 1; i <= n; i += 1) {
      args.push('arg' + i);
    }

    return args;
  };

   /**
    * Dynamically construct a wrapper function of `n` arity that.
    *
    * If at all possible, prefer a function from the arity wrapper cache above to
    * avoid allocating a new function at runtime.
    *
    * @name createArityWrapper
    * @api private
    * @param {number} n
    * @return {Function(Function)}
    */
  var createArityWrapper = function createArityWrapper(n) {
    var paramNames = createParams(n).join(', ');
    var wrapperBody = ''.concat(
      '  return function(', paramNames, ') {\n',
      '    return func.apply(this, arguments);\n',
      '  };'
    );

    /* eslint-disable no-new-func */
    return new Function('func', wrapperBody);
    /* eslint-enable no-new-func */
  };

  // Cache common arity wrappers to avoid constructing them at runtime
  var arityWrapperCache = [
    /* eslint-disable no-unused-vars */
    function(fn) {
      return function() {
        return fn.apply(this, arguments);
      };
    },

    function(fn) {
      return function(arg1) {
        return fn.apply(this, arguments);
      };
    },

    function(fn) {
      return function(arg1, arg2) {
        return fn.apply(this, arguments);
      };
    },

    function(fn) {
      return function(arg1, arg2, arg3) {
        return fn.apply(this, arguments);
      };
    },

    function(fn) {
      return function(arg1, arg2, arg3, arg4) {
        return fn.apply(this, arguments);
      };
    },

    function(fn) {
      return function(arg1, arg2, arg3, arg4, arg5) {
        return fn.apply(this, arguments);
      };
    }
    /* eslint-enable no-unused-vars */
  ];

  /**
   * Takes a function and an [arity](https://en.wikipedia.org/wiki/Arity) `n`, and returns a new
   * function that expects `n` arguments.
   *
   * @name arity
   * @api public
   * @category Function
   * @see {@link curry}
   * @param {Number} n The desired arity of the returned function.
   * @param {Function} fn The function to wrap.
   * @return {Function} A function of n arity, wrapping `fn`.
   * @example
   * var add = function(a, b) {
   *   return a + b;
   * };
   *
   * // Check the number of arguments this function expects by accessing `.length`:
   * add.length;
   * //=> 2
   *
   * var unaryAdd = arity(1, add);
   * unaryAdd.length;
   * //=> 1
   */
  var arity = function arity(n, func) {
    if (!isFunction(func)) {
      throw new TypeError('Expected a function but got ' + typeof func);
    }

    n = Math.max(isNumber(n) ? n : 0, 0);

    if (!arityWrapperCache[n]) {
      arityWrapperCache[n] = createArityWrapper(n);
    }

    return arityWrapperCache[n](func);
  };

  /*
   * Exports.
   */

  module.exports = arity;

  },{}],7:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var type = require('component-type');

  /**
   * Deeply clone an object.
   *
   * @param {*} obj Any object.
   */

  var clone = function clone(obj) {
    var t = type(obj);

    if (t === 'object') {
      var copy = {};
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          copy[key] = clone(obj[key]);
        }
      }
      return copy;
    }

    if (t === 'array') {
      var copy = new Array(obj.length);
      for (var i = 0, l = obj.length; i < l; i++) {
        copy[i] = clone(obj[i]);
      }
      return copy;
    }

    if (t === 'regexp') {
      // from millermedeiros/amd-utils - MIT
      var flags = '';
      flags += obj.multiline ? 'm' : '';
      flags += obj.global ? 'g' : '';
      flags += obj.ignoreCase ? 'i' : '';
      return new RegExp(obj.source, flags);
    }

    if (t === 'date') {
      return new Date(obj.getTime());
    }

    // string, number, boolean, etc.
    return obj;
  };

  /*
   * Exports.
   */

  module.exports = clone;

  },{"component-type":1120}],8:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var drop = require('@ndhoule/drop');
  var rest = require('@ndhoule/rest');

  var has = Object.prototype.hasOwnProperty;
  var objToString = Object.prototype.toString;

  /**
   * Returns `true` if a value is an object, otherwise `false`.
   *
   * @name isObject
   * @api private
   * @param {*} val The value to test.
   * @return {boolean}
   */
  // TODO: Move to a library
  var isObject = function isObject(value) {
    return Boolean(value) && typeof value === 'object';
  };

  /**
   * Returns `true` if a value is a plain object, otherwise `false`.
   *
   * @name isPlainObject
   * @api private
   * @param {*} val The value to test.
   * @return {boolean}
   */
  // TODO: Move to a library
  var isPlainObject = function isPlainObject(value) {
    return Boolean(value) && objToString.call(value) === '[object Object]';
  };

  /**
   * Assigns a key-value pair to a target object when the value assigned is owned,
   * and where target[key] is undefined.
   *
   * @name shallowCombiner
   * @api private
   * @param {Object} target
   * @param {Object} source
   * @param {*} value
   * @param {string} key
   */
  var shallowCombiner = function shallowCombiner(target, source, value, key) {
    if (has.call(source, key) && target[key] === undefined) {
      target[key] = value;
    }
    return source;
  };

  /**
   * Assigns a key-value pair to a target object when the value assigned is owned,
   * and where target[key] is undefined; also merges objects recursively.
   *
   * @name deepCombiner
   * @api private
   * @param {Object} target
   * @param {Object} source
   * @param {*} value
   * @param {string} key
   * @return {Object}
   */
  var deepCombiner = function(target, source, value, key) {
    if (has.call(source, key)) {
      if (isPlainObject(target[key]) && isPlainObject(value)) {
          target[key] = defaultsDeep(target[key], value);
      } else if (target[key] === undefined) {
          target[key] = value;
      }
    }

    return source;
  };

  /**
   * TODO: Document
   *
   * @name defaultsWith
   * @api private
   * @param {Function} combiner
   * @param {Object} target
   * @param {...Object} sources
   * @return {Object} Return the input `target`.
   */
  var defaultsWith = function(combiner, target /*, ...sources */) {
    if (!isObject(target)) {
      return target;
    }

    combiner = combiner || shallowCombiner;
    var sources = drop(2, arguments);

    for (var i = 0; i < sources.length; i += 1) {
      for (var key in sources[i]) {
        combiner(target, sources[i], sources[i][key], key);
      }
    }

    return target;
  };

  /**
   * Copies owned, enumerable properties from a source object(s) to a target
   * object when the value of that property on the source object is `undefined`.
   * Recurses on objects.
   *
   * @name defaultsDeep
   * @api public
   * @param {Object} target
   * @param {...Object} sources
   * @return {Object} The input `target`.
   */
  var defaultsDeep = function defaultsDeep(target /*, sources */) {
    // TODO: Replace with `partial` call?
    return defaultsWith.apply(null, [deepCombiner, target].concat(rest(arguments)));
  };

  /**
   * Copies owned, enumerable properties from a source object(s) to a target
   * object when the value of that property on the source object is `undefined`.
   *
   * @name defaults
   * @api public
   * @param {Object} target
   * @param {...Object} sources
   * @return {Object}
   * @example
   * var a = { a: 1 };
   * var b = { a: 2, b: 2 };
   *
   * defaults(a, b);
   * console.log(a); //=> { a: 1, b: 2 }
   */
  var defaults = function(target /*, ...sources */) {
    // TODO: Replace with `partial` call?
    return defaultsWith.apply(null, [null, target].concat(rest(arguments)));
  };

  /*
   * Exports.
   */

  module.exports = defaults;
  module.exports.deep = defaultsDeep;

  },{"@ndhoule/drop":9,"@ndhoule/rest":19}],9:[function(require,module,exports){
  'use strict';

  var max = Math.max;

  /**
   * Produce a new array composed of all but the first `n` elements of an input `collection`.
   *
   * @name drop
   * @api public
   * @param {number} count The number of elements to drop.
   * @param {Array} collection The collection to iterate over.
   * @return {Array} A new array containing all but the first element from `collection`.
   * @example
   * drop(0, [1, 2, 3]); // => [1, 2, 3]
   * drop(1, [1, 2, 3]); // => [2, 3]
   * drop(2, [1, 2, 3]); // => [3]
   * drop(3, [1, 2, 3]); // => []
   * drop(4, [1, 2, 3]); // => []
   */
  var drop = function drop(count, collection) {
    var length = collection ? collection.length : 0;

    if (!length) {
      return [];
    }

    // Preallocating an array *significantly* boosts performance when dealing with
    // `arguments` objects on v8. For a summary, see:
    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
    var toDrop = max(Number(count) || 0, 0);
    var resultsLength = max(length - toDrop, 0);
    var results = new Array(resultsLength);

    for (var i = 0; i < resultsLength; i += 1) {
      results[i] = collection[i + toDrop];
    }

    return results;
  };

  /*
   * Exports.
   */

  module.exports = drop;

  },{}],10:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var keys = require('@ndhoule/keys');

  var objToString = Object.prototype.toString;

  /**
   * Tests if a value is a number.
   *
   * @name isNumber
   * @api private
   * @param {*} val The value to test.
   * @return {boolean} Returns `true` if `val` is a number, otherwise `false`.
   */
  // TODO: Move to library
  var isNumber = function isNumber(val) {
    var type = typeof val;
    return type === 'number' || (type === 'object' && objToString.call(val) === '[object Number]');
  };

  /**
   * Tests if a value is an array.
   *
   * @name isArray
   * @api private
   * @param {*} val The value to test.
   * @return {boolean} Returns `true` if the value is an array, otherwise `false`.
   */
  // TODO: Move to library
  var isArray = typeof Array.isArray === 'function' ? Array.isArray : function isArray(val) {
    return objToString.call(val) === '[object Array]';
  };

  /**
   * Tests if a value is array-like. Array-like means the value is not a function and has a numeric
   * `.length` property.
   *
   * @name isArrayLike
   * @api private
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to library
  var isArrayLike = function isArrayLike(val) {
    return val != null && (isArray(val) || (val !== 'function' && isNumber(val.length)));
  };

  /**
   * Internal implementation of `each`. Works on arrays and array-like data structures.
   *
   * @name arrayEach
   * @api private
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Array} array The array(-like) structure to iterate over.
   * @return {undefined}
   */
  var arrayEach = function arrayEach(iterator, array) {
    for (var i = 0; i < array.length; i += 1) {
      // Break iteration early if `iterator` returns `false`
      if (iterator(array[i], i, array) === false) {
        break;
      }
    }
  };

  /**
   * Internal implementation of `each`. Works on objects.
   *
   * @name baseEach
   * @api private
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Object} object The object to iterate over.
   * @return {undefined}
   */
  var baseEach = function baseEach(iterator, object) {
    var ks = keys(object);

    for (var i = 0; i < ks.length; i += 1) {
      // Break iteration early if `iterator` returns `false`
      if (iterator(object[ks[i]], ks[i], object) === false) {
        break;
      }
    }
  };

  /**
   * Iterate over an input collection, invoking an `iterator` function for each element in the
   * collection and passing to it three arguments: `(value, index, collection)`. The `iterator`
   * function can end iteration early by returning `false`.
   *
   * @name each
   * @api public
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Array|Object|string} collection The collection to iterate over.
   * @return {undefined} Because `each` is run only for side effects, always returns `undefined`.
   * @example
   * var log = console.log.bind(console);
   *
   * each(log, ['a', 'b', 'c']);
   * //-> 'a', 0, ['a', 'b', 'c']
   * //-> 'b', 1, ['a', 'b', 'c']
   * //-> 'c', 2, ['a', 'b', 'c']
   * //=> undefined
   *
   * each(log, 'tim');
   * //-> 't', 2, 'tim'
   * //-> 'i', 1, 'tim'
   * //-> 'm', 0, 'tim'
   * //=> undefined
   *
   * // Note: Iteration order not guaranteed across environments
   * each(log, { name: 'tim', occupation: 'enchanter' });
   * //-> 'tim', 'name', { name: 'tim', occupation: 'enchanter' }
   * //-> 'enchanter', 'occupation', { name: 'tim', occupation: 'enchanter' }
   * //=> undefined
   */
  var each = function each(iterator, collection) {
    return (isArrayLike(collection) ? arrayEach : baseEach).call(this, iterator, collection);
  };

  /*
   * Exports.
   */

  module.exports = each;

  },{"@ndhoule/keys":16}],11:[function(require,module,exports){
  'use strict';

  var has = Object.prototype.hasOwnProperty;

  /**
   * Takes an array and returns a nested array containing all the object's own
   * key-value pairs.
   *
   * Note that the order of the output will vary across platforms, depending on
   * how that platform handles object iteration order.
   *
   * @param {Object} object
   * @return {Array[]} An array of the object's key-value pairs.
   */
  var entries = function entries(object) {
    var results = [];

    for (var key in object) {
      if (has.call(object, key)) {
        results.push([key, object[key]]);
      }
    }

    return results;
  };

  /*
   * Exports.
   */

  module.exports = entries;

  },{}],12:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var each = require('@ndhoule/each');

  /**
   * Check if a predicate function returns `true` for all values in a `collection`.
   * Checks owned, enumerable values and exits early when `predicate` returns
   * `false`.
   *
   * @name every
   * @param {Function} predicate The function used to test values.
   * @param {Array|Object|string} collection The collection to search.
   * @return {boolean} True if all values passes the predicate test, otherwise false.
   * @example
   * var isEven = function(num) { return num % 2 === 0; };
   *
   * every(isEven, []); // => true
   * every(isEven, [1, 2]); // => false
   * every(isEven, [2, 4, 6]); // => true
   */
  var every = function every(predicate, collection) {
    if (typeof predicate !== 'function') {
      throw new TypeError('`predicate` must be a function but was a ' + typeof predicate);
    }

    var result = true;

    each(function(val, key, collection) {
      result = !!predicate(val, key, collection);

      // Exit early
      if (!result) {
        return false;
      }
    }, collection);

    return result;
  };

  /*
   * Exports.
   */

  module.exports = every;

  },{"@ndhoule/each":10}],13:[function(require,module,exports){
  'use strict';

  var has = Object.prototype.hasOwnProperty;

  /**
   * Copy the properties of one or more `objects` onto a destination object. Input objects are iterated over
   * in left-to-right order, so duplicate properties on later objects will overwrite those from
   * erevious ones. Only enumerable and own properties of the input objects are copied onto the
   * resulting object.
   *
   * @name extend
   * @api public
   * @category Object
   * @param {Object} dest The destination object.
   * @param {...Object} sources The source objects.
   * @return {Object} `dest`, extended with the properties of all `sources`.
   * @example
   * var a = { a: 'a' };
   * var b = { b: 'b' };
   * var c = { c: 'c' };
   *
   * extend(a, b, c);
   * //=> { a: 'a', b: 'b', c: 'c' };
   */
  var extend = function extend(dest /*, sources */) {
    var sources = Array.prototype.slice.call(arguments, 1);

    for (var i = 0; i < sources.length; i += 1) {
      for (var key in sources[i]) {
        if (has.call(sources[i], key)) {
          dest[key] = sources[i][key];
        }
      }
    }

    return dest;
  };

  /*
   * Exports.
   */

  module.exports = extend;

  },{}],14:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var each = require('@ndhoule/each');

  /**
   * Reduces all the values in a collection down into a single value. Does so by iterating through the
   * collection from left to right, repeatedly calling an `iterator` function and passing to it four
   * arguments: `(accumulator, value, index, collection)`.
   *
   * Returns the final return value of the `iterator` function.
   *
   * @name foldl
   * @api public
   * @param {Function} iterator The function to invoke per iteration.
   * @param {*} accumulator The initial accumulator value, passed to the first invocation of `iterator`.
   * @param {Array|Object} collection The collection to iterate over.
   * @return {*} The return value of the final call to `iterator`.
   * @example
   * foldl(function(total, n) {
   *   return total + n;
   * }, 0, [1, 2, 3]);
   * //=> 6
   *
   * var phonebook = { bob: '555-111-2345', tim: '655-222-6789', sheila: '655-333-1298' };
   *
   * foldl(function(results, phoneNumber) {
   *  if (phoneNumber[0] === '6') {
   *    return results.concat(phoneNumber);
   *  }
   *  return results;
   * }, [], phonebook);
   * // => ['655-222-6789', '655-333-1298']
   */
  var foldl = function foldl(iterator, accumulator, collection) {
    if (typeof iterator !== 'function') {
      throw new TypeError('Expected a function but received a ' + typeof iterator);
    }

    each(function(val, i, collection) {
      accumulator = iterator(accumulator, val, i, collection);
    }, collection);

    return accumulator;
  };

  /*
   * Exports.
   */

  module.exports = foldl;

  },{"@ndhoule/each":10}],15:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var each = require('@ndhoule/each');

  var strIndexOf = String.prototype.indexOf;

  /**
   * Object.is/sameValueZero polyfill.
   *
   * @api private
   * @param {*} value1
   * @param {*} value2
   * @return {boolean}
   */
  // TODO: Move to library
  var sameValueZero = function sameValueZero(value1, value2) {
    // Normal values and check for 0 / -0
    if (value1 === value2) {
      return value1 !== 0 || 1 / value1 === 1 / value2;
    }
    // NaN
    return value1 !== value1 && value2 !== value2;
  };

  /**
   * Searches a given `collection` for a value, returning true if the collection
   * contains the value and false otherwise. Can search strings, arrays, and
   * objects.
   *
   * @name includes
   * @api public
   * @param {*} searchElement The element to search for.
   * @param {Object|Array|string} collection The collection to search.
   * @return {boolean}
   * @example
   * includes(2, [1, 2, 3]);
   * //=> true
   *
   * includes(4, [1, 2, 3]);
   * //=> false
   *
   * includes(2, { a: 1, b: 2, c: 3 });
   * //=> true
   *
   * includes('a', { a: 1, b: 2, c: 3 });
   * //=> false
   *
   * includes('abc', 'xyzabc opq');
   * //=> true
   *
   * includes('nope', 'xyzabc opq');
   * //=> false
   */
  var includes = function includes(searchElement, collection) {
    var found = false;

    // Delegate to String.prototype.indexOf when `collection` is a string
    if (typeof collection === 'string') {
      return strIndexOf.call(collection, searchElement) !== -1;
    }

    // Iterate through enumerable/own array elements and object properties.
    each(function(value) {
      if (sameValueZero(value, searchElement)) {
        found = true;
        // Exit iteration early when found
        return false;
      }
    }, collection);

    return found;
  };

  /*
   * Exports.
   */

  module.exports = includes;

  },{"@ndhoule/each":10}],16:[function(require,module,exports){
  'use strict';

  var hop = Object.prototype.hasOwnProperty;
  var strCharAt = String.prototype.charAt;
  var toStr = Object.prototype.toString;

  /**
   * Returns the character at a given index.
   *
   * @param {string} str
   * @param {number} index
   * @return {string|undefined}
   */
  // TODO: Move to a library
  var charAt = function(str, index) {
    return strCharAt.call(str, index);
  };

  /**
   * hasOwnProperty, wrapped as a function.
   *
   * @name has
   * @api private
   * @param {*} context
   * @param {string|number} prop
   * @return {boolean}
   */

  // TODO: Move to a library
  var has = function has(context, prop) {
    return hop.call(context, prop);
  };

  /**
   * Returns true if a value is a string, otherwise false.
   *
   * @name isString
   * @api private
   * @param {*} val
   * @return {boolean}
   */

  // TODO: Move to a library
  var isString = function isString(val) {
    return toStr.call(val) === '[object String]';
  };

  /**
   * Returns true if a value is array-like, otherwise false. Array-like means a
   * value is not null, undefined, or a function, and has a numeric `length`
   * property.
   *
   * @name isArrayLike
   * @api private
   * @param {*} val
   * @return {boolean}
   */
  // TODO: Move to a library
  var isArrayLike = function isArrayLike(val) {
    return val != null && (typeof val !== 'function' && typeof val.length === 'number');
  };


  /**
   * indexKeys
   *
   * @name indexKeys
   * @api private
   * @param {} target
   * @param {Function} pred
   * @return {Array}
   */
  var indexKeys = function indexKeys(target, pred) {
    pred = pred || has;

    var results = [];

    for (var i = 0, len = target.length; i < len; i += 1) {
      if (pred(target, i)) {
        results.push(String(i));
      }
    }

    return results;
  };

  /**
   * Returns an array of an object's owned keys.
   *
   * @name objectKeys
   * @api private
   * @param {*} target
   * @param {Function} pred Predicate function used to include/exclude values from
   * the resulting array.
   * @return {Array}
   */
  var objectKeys = function objectKeys(target, pred) {
    pred = pred || has;

    var results = [];

    for (var key in target) {
      if (pred(target, key)) {
        results.push(String(key));
      }
    }

    return results;
  };

  /**
   * Creates an array composed of all keys on the input object. Ignores any non-enumerable properties.
   * More permissive than the native `Object.keys` function (non-objects will not throw errors).
   *
   * @name keys
   * @api public
   * @category Object
   * @param {Object} source The value to retrieve keys from.
   * @return {Array} An array containing all the input `source`'s keys.
   * @example
   * keys({ likes: 'avocado', hates: 'pineapple' });
   * //=> ['likes', 'pineapple'];
   *
   * // Ignores non-enumerable properties
   * var hasHiddenKey = { name: 'Tim' };
   * Object.defineProperty(hasHiddenKey, 'hidden', {
   *   value: 'i am not enumerable!',
   *   enumerable: false
   * })
   * keys(hasHiddenKey);
   * //=> ['name'];
   *
   * // Works on arrays
   * keys(['a', 'b', 'c']);
   * //=> ['0', '1', '2']
   *
   * // Skips unpopulated indices in sparse arrays
   * var arr = [1];
   * arr[4] = 4;
   * keys(arr);
   * //=> ['0', '4']
   */
  var keys = function keys(source) {
    if (source == null) {
      return [];
    }

    // IE6-8 compatibility (string)
    if (isString(source)) {
      return indexKeys(source, charAt);
    }

    // IE6-8 compatibility (arguments)
    if (isArrayLike(source)) {
      return indexKeys(source, has);
    }

    return objectKeys(source);
  };

  /*
   * Exports.
   */

  module.exports = keys;

  },{}],17:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var each = require('@ndhoule/each');

  /**
   * Produce a new array by passing each value in the input `collection` through a transformative
   * `iterator` function. The `iterator` function is passed three arguments:
   * `(value, index, collection)`.
   *
   * @name map
   * @api public
   * @param {Function} iterator The transformer function to invoke per iteration.
   * @param {Array} collection The collection to iterate over.
   * @return {Array} A new array containing the results of each `iterator` invocation.
   * @example
   * var square = function(x) { return x * x; };
   *
   * map(square, [1, 2, 3]);
   * //=> [1, 4, 9]
   */
  var map = function map(iterator, collection) {
    if (typeof iterator !== 'function') {
      throw new TypeError('Expected a function but received a ' + typeof iterator);
    }

    var result = [];

    each(function(val, i, collection) {
      result.push(iterator(val, i, collection));
    }, collection);

    return result;
  };

  /*
   * Exports.
   */

  module.exports = map;

  },{"@ndhoule/each":10}],18:[function(require,module,exports){
  'use strict';

  var objToString = Object.prototype.toString;

  // TODO: Move to lib
  var existy = function(val) {
    return val != null;
  };

  // TODO: Move to lib
  var isArray = function(val) {
    return objToString.call(val) === '[object Array]';
  };

  // TODO: Move to lib
  var isString = function(val) {
     return typeof val === 'string' || objToString.call(val) === '[object String]';
  };

  // TODO: Move to lib
  var isObject = function(val) {
    return val != null && typeof val === 'object';
  };

  /**
   * Returns a copy of the new `object` containing only the specified properties.
   *
   * @name pick
   * @api public
   * @param {string|string[]} props The property or properties to keep.
   * @param {Object} object The object to iterate over.
   * @return {Object} A new object containing only the specified properties from `object`.
   * @example
   * var person = { name: 'Tim', occupation: 'enchanter', fears: 'rabbits' };
   *
   * pick('name', person);
   * //=> { name: 'Tim' }
   *
   * pick(['name', 'fears'], person);
   * //=> { name: 'Tim', fears: 'rabbits' }
   */
  var pick = function pick(props, object) {
    if (!existy(object) || !isObject(object)) {
      return {};
    }

    if (isString(props)) {
      props = [props];
    }

    if (!isArray(props)) {
      props = [];
    }

    var result = {};

    for (var i = 0; i < props.length; i += 1) {
      if (isString(props[i]) && props[i] in object) {
        result[props[i]] = object[props[i]];
      }
    }

    return result;
  };

  /*
   * Exports.
   */

  module.exports = pick;

  },{}],19:[function(require,module,exports){
  'use strict';

  var max = Math.max;

  /**
   * Produce a new array by passing each value in the input `collection` through a transformative
   * `iterator` function. The `iterator` function is passed three arguments:
   * `(value, index, collection)`.
   *
   * @name rest
   * @api public
   * @param {Array} collection The collection to iterate over.
   * @return {Array} A new array containing all but the first element from `collection`.
   * @example
   * rest([1, 2, 3]); // => [2, 3]
   */
  var rest = function rest(collection) {
    if (collection == null || !collection.length) {
      return [];
    }

    // Preallocating an array *significantly* boosts performance when dealing with
    // `arguments` objects on v8. For a summary, see:
    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
    var results = new Array(max(collection.length - 2, 0));

    for (var i = 1; i < collection.length; i += 1) {
      results[i - 1] = collection[i];
    }

    return results;
  };

  /*
   * Exports.
   */

  module.exports = rest;

  },{}],20:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var keys = require('@ndhoule/keys');

  /**
   * Returns an array containing all enumerable values from a `source` object.
   *
   * @name values
   * @api public
   * @category Object
   * @param {Object} source The object to retrieve values from.
   * @return {Array} An array of all the `source` object's values.
   * @example
   * values({ a: 1, b: 2, c: 3 });
   * //=> [1, 2, 3]
   */
  var values = function values(source) {
    var ks = keys(source);
    var results = new Array(ks.length);

    for (var i = 0; i < ks.length; i += 1) {
      results[i] = source[ks[i]];
    }

    return results;
  };

  /*
   * Exports.
   */

  module.exports = values;

  },{"@ndhoule/keys":16}],21:[function(require,module,exports){

  var type = require('component-type');
  var clone = require('component-clone');


  /**
   * Expose `alias`.
   */

  module.exports = alias;


  /**
   * Alias an `object`.
   *
   * @param {Object} obj
   * @param {Mixed} method
   */

  function alias (obj, method) {
    switch (type(method)) {
      case 'object': return aliasByDictionary(clone(obj), method);
      case 'function': return aliasByFunction(clone(obj), method);
    }
  }


  /**
   * Convert the keys in an `obj` using a dictionary of `aliases`.
   *
   * @param {Object} obj
   * @param {Object} aliases
   */

  function aliasByDictionary (obj, aliases) {
    for (var key in aliases) {
      if (undefined === obj[key]) continue;
      obj[aliases[key]] = obj[key];
      delete obj[key];
    }
    return obj;
  }


  /**
   * Convert the keys in an `obj` using a `convert` function.
   *
   * @param {Object} obj
   * @param {Function} convert
   */

  function aliasByFunction (obj, convert) {
    // have to create another object so that ie8 won't infinite loop on keys
    var output = {};
    for (var key in obj) output[convert(key)] = obj[key];
    return output;
  }

  },{"component-clone":1110,"component-type":1120}],22:[function(require,module,exports){
  (function (global){(function (){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  var _analytics = global.analytics;
  /*
   * Module dependencies.
   */
  var Alias = require('segmentio-facade').Alias;
  var Emitter = require('component-emitter');
  var Facade = require('segmentio-facade');
  var Group = require('segmentio-facade').Group;
  var Identify = require('segmentio-facade').Identify;
  var SourceMiddlewareChain = require('./middleware').SourceMiddlewareChain;
  var IntegrationMiddlewareChain = require('./middleware')
      .IntegrationMiddlewareChain;
  var DestinationMiddlewareChain = require('./middleware')
      .DestinationMiddlewareChain;
  var Page = require('segmentio-facade').Page;
  var Track = require('segmentio-facade').Track;
  var bindAll = require('bind-all');
  var clone = require('./utils/clone');
  var extend = require('extend');
  var cookie = require('./cookie');
  var metrics = require('./metrics');
  var debug = require('debug');
  var defaults = require('@ndhoule/defaults');
  var each = require('./utils/each');
  var foldl = require('@ndhoule/foldl');
  var group = require('./group');
  var is = require('is');
  var isMeta = require('@segment/is-meta');
  var keys = require('@ndhoule/keys');
  var memory = require('./memory');
  var nextTick = require('next-tick');
  var normalize = require('./normalize');
  var on = require('component-event').bind;
  var pageDefaults = require('./pageDefaults');
  var pick = require('@ndhoule/pick');
  var prevent = require('@segment/prevent-default');
  var querystring = require('component-querystring');
  var store = require('./store');
  var user = require('./user');
  var type = require('component-type');
  /**
   * Initialize a new `Analytics` instance.
   */
  function Analytics() {
      this._options({});
      this.Integrations = {};
      this._sourceMiddlewares = new SourceMiddlewareChain();
      this._integrationMiddlewares = new IntegrationMiddlewareChain();
      this._destinationMiddlewares = {};
      this._integrations = {};
      this._readied = false;
      this._timeout = 300;
      // XXX: BACKWARDS COMPATIBILITY
      this._user = user;
      this.log = debug('analytics.js');
      bindAll(this);
      var self = this;
      this.on('initialize', function (settings, options) {
          if (options.initialPageview)
              self.page();
          self._parseQuery(window.location.search);
      });
  }
  /**
   * Mix in event emitter.
   */
  Emitter(Analytics.prototype);
  /**
   * Use a `plugin`.
   */
  Analytics.prototype.use = function (plugin) {
      plugin(this);
      return this;
  };
  /**
   * Define a new `Integration`.
   */
  Analytics.prototype.addIntegration = function (Integration) {
      var name = Integration.prototype.name;
      if (!name)
          throw new TypeError('attempted to add an invalid integration');
      this.Integrations[name] = Integration;
      return this;
  };
  /**
   * Define a new `SourceMiddleware`
   */
  Analytics.prototype.addSourceMiddleware = function (middleware) {
      this._sourceMiddlewares.add(middleware);
      return this;
  };
  /**
   * Define a new `IntegrationMiddleware`
   * @deprecated
   */
  Analytics.prototype.addIntegrationMiddleware = function (middleware) {
      this._integrationMiddlewares.add(middleware);
      return this;
  };
  /**
   * Define a new `DestinationMiddleware`
   * Destination Middleware is chained after integration middleware
   */
  Analytics.prototype.addDestinationMiddleware = function (integrationName, middlewares) {
      var self = this;
      middlewares.forEach(function (middleware) {
          if (!self._destinationMiddlewares[integrationName]) {
              self._destinationMiddlewares[integrationName] = new DestinationMiddlewareChain();
          }
          self._destinationMiddlewares[integrationName].add(middleware);
      });
      return self;
  };
  /**
   * Initialize with the given integration `settings` and `options`.
   *
   * Aliased to `init` for convenience.
   */
  Analytics.prototype.init = Analytics.prototype.initialize = function (settings, options) {
      settings = settings || {};
      options = options || {};
      this._options(options);
      this._readied = false;
      // clean unknown integrations from settings
      var self = this;
      each(function (_opts, name) {
          var Integration = self.Integrations[name];
          if (!Integration)
              delete settings[name];
      }, settings);
      // add integrations
      each(function (opts, name) {
          // Don't load disabled integrations
          if (options.integrations) {
              if (options.integrations[name] === false ||
                  (options.integrations.All === false && !options.integrations[name])) {
                  return;
              }
          }
          var Integration = self.Integrations[name];
          var clonedOpts = {};
          extend(true, clonedOpts, opts); // deep clone opts
          var integration = new Integration(clonedOpts);
          self.log('initialize %o - %o', name, opts);
          self.add(integration);
      }, settings);
      var integrations = this._integrations;
      // load user now that options are set
      user.load();
      group.load();
      // make ready callback
      var readyCallCount = 0;
      var integrationCount = keys(integrations).length;
      var ready = function () {
          readyCallCount++;
          if (readyCallCount >= integrationCount) {
              self._readied = true;
              self.emit('ready');
          }
      };
      // init if no integrations
      if (integrationCount <= 0) {
          ready();
      }
      // initialize integrations, passing ready
      // create a list of any integrations that did not initialize - this will be passed with all events for replay support:
      this.failedInitializations = [];
      var initialPageSkipped = false;
      each(function (integration) {
          if (options.initialPageview &&
              integration.options.initialPageview === false) {
              // We've assumed one initial pageview, so make sure we don't count the first page call.
              var page = integration.page;
              integration.page = function () {
                  if (initialPageSkipped) {
                      return page.apply(this, arguments);
                  }
                  initialPageSkipped = true;
                  return;
              };
          }
          integration.analytics = self;
          integration.once('ready', ready);
          try {
              metrics.increment('analytics_js.integration.invoke', {
                  method: 'initialize',
                  integration_name: integration.name
              });
              integration.initialize();
          }
          catch (e) {
              var integrationName = integration.name;
              metrics.increment('analytics_js.integration.invoke.error', {
                  method: 'initialize',
                  integration_name: integration.name
              });
              self.failedInitializations.push(integrationName);
              self.log('Error initializing %s integration: %o', integrationName, e);
              // Mark integration as ready to prevent blocking of anyone listening to analytics.ready()
              integration.ready();
          }
      }, integrations);
      // backwards compat with angular plugin and used for init logic checks
      this.initialized = true;
      this.emit('initialize', settings, options);
      return this;
  };
  /**
   * Set the user's `id`.
   */
  Analytics.prototype.setAnonymousId = function (id) {
      this.user().anonymousId(id);
      return this;
  };
  /**
   * Add an integration.
   */
  Analytics.prototype.add = function (integration) {
      this._integrations[integration.name] = integration;
      return this;
  };
  /**
   * Identify a user by optional `id` and `traits`.
   *
   * @param {string} [id=user.id()] User ID.
   * @param {Object} [traits=null] User traits.
   * @param {Object} [options=null]
   * @param {Function} [fn]
   * @return {Analytics}
   */
  Analytics.prototype.identify = function (id, traits, options, fn) {
      // Argument reshuffling.
      /* eslint-disable no-unused-expressions, no-sequences */
      if (is.fn(options))
          (fn = options), (options = null);
      if (is.fn(traits))
          (fn = traits), (options = null), (traits = null);
      if (is.object(id))
          (options = traits), (traits = id), (id = user.id());
      /* eslint-enable no-unused-expressions, no-sequences */
      // clone traits before we manipulate so we don't do anything uncouth, and take
      // from `user` so that we carryover anonymous traits
      user.identify(id, traits);
      var msg = this.normalize({
          options: options,
          traits: user.traits(),
          userId: user.id()
      });
      // Add the initialize integrations so the server-side ones can be disabled too
      if (this.options.integrations) {
          defaults(msg.integrations, this.options.integrations);
      }
      this._invoke('identify', new Identify(msg));
      // emit
      this.emit('identify', id, traits, options);
      this._callback(fn);
      return this;
  };
  /**
   * Return the current user.
   *
   * @return {Object}
   */
  Analytics.prototype.user = function () {
      return user;
  };
  /**
   * Identify a group by optional `id` and `traits`. Or, if no arguments are
   * supplied, return the current group.
   *
   * @param {string} [id=group.id()] Group ID.
   * @param {Object} [traits=null] Group traits.
   * @param {Object} [options=null]
   * @param {Function} [fn]
   * @return {Analytics|Object}
   */
  Analytics.prototype.group = function (id, traits, options, fn) {
      /* eslint-disable no-unused-expressions, no-sequences */
      if (!arguments.length)
          return group;
      if (is.fn(options))
          (fn = options), (options = null);
      if (is.fn(traits))
          (fn = traits), (options = null), (traits = null);
      if (is.object(id))
          (options = traits), (traits = id), (id = group.id());
      /* eslint-enable no-unused-expressions, no-sequences */
      // grab from group again to make sure we're taking from the source
      group.identify(id, traits);
      var msg = this.normalize({
          options: options,
          traits: group.traits(),
          groupId: group.id()
      });
      // Add the initialize integrations so the server-side ones can be disabled too
      if (this.options.integrations) {
          defaults(msg.integrations, this.options.integrations);
      }
      this._invoke('group', new Group(msg));
      this.emit('group', id, traits, options);
      this._callback(fn);
      return this;
  };
  /**
   * Track an `event` that a user has triggered with optional `properties`.
   *
   * @param {string} event
   * @param {Object} [properties=null]
   * @param {Object} [options=null]
   * @param {Function} [fn]
   * @return {Analytics}
   */
  Analytics.prototype.track = function (event, properties, options, fn) {
      // Argument reshuffling.
      /* eslint-disable no-unused-expressions, no-sequences */
      if (is.fn(options))
          (fn = options), (options = null);
      if (is.fn(properties))
          (fn = properties), (options = null), (properties = null);
      /* eslint-enable no-unused-expressions, no-sequences */
      // figure out if the event is archived.
      var plan = this.options.plan || {};
      var events = plan.track || {};
      var planIntegrationOptions = {};
      // normalize
      var msg = this.normalize({
          properties: properties,
          options: options,
          event: event
      });
      // plan.
      plan = events[event];
      if (plan) {
          this.log('plan %o - %o', event, plan);
          if (plan.enabled === false) {
              // Disabled events should always be sent to Segment.
              planIntegrationOptions = { All: false, 'Segment.io': true };
          }
          else {
              planIntegrationOptions = plan.integrations || {};
          }
      }
      else {
          var defaultPlan = events.__default || { enabled: true };
          if (!defaultPlan.enabled) {
              // Disabled events should always be sent to Segment.
              planIntegrationOptions = { All: false, 'Segment.io': true };
          }
      }
      // Add the initialize integrations so the server-side ones can be disabled too
      defaults(msg.integrations, this._mergeInitializeAndPlanIntegrations(planIntegrationOptions));
      this._invoke('track', new Track(msg));
      this.emit('track', event, properties, options);
      this._callback(fn);
      return this;
  };
  /**
   * Helper method to track an outbound link that would normally navigate away
   * from the page before the analytics calls were sent.
   *
   * BACKWARDS COMPATIBILITY: aliased to `trackClick`.
   *
   * @param {Element|Array} links
   * @param {string|Function} event
   * @param {Object|Function} properties (optional)
   * @return {Analytics}
   */
  Analytics.prototype.trackClick = Analytics.prototype.trackLink = function (links, event, properties) {
      if (!links)
          return this;
      // always arrays, handles jquery
      if (type(links) === 'element')
          links = [links];
      var self = this;
      each(function (el) {
          if (type(el) !== 'element') {
              throw new TypeError('Must pass HTMLElement to `analytics.trackLink`.');
          }
          on(el, 'click', function (e) {
              var ev = is.fn(event) ? event(el) : event;
              var props = is.fn(properties) ? properties(el) : properties;
              var href = el.getAttribute('href') ||
                  el.getAttributeNS('http://www.w3.org/1999/xlink', 'href') ||
                  el.getAttribute('xlink:href');
              self.track(ev, props);
              if (href && el.target !== '_blank' && !isMeta(e)) {
                  prevent(e);
                  self._callback(function () {
                      window.location.href = href;
                  });
              }
          });
      }, links);
      return this;
  };
  /**
   * Helper method to track an outbound form that would normally navigate away
   * from the page before the analytics calls were sent.
   *
   * BACKWARDS COMPATIBILITY: aliased to `trackSubmit`.
   *
   * @param {Element|Array} forms
   * @param {string|Function} event
   * @param {Object|Function} properties (optional)
   * @return {Analytics}
   */
  Analytics.prototype.trackSubmit = Analytics.prototype.trackForm = function (forms, event, properties) {
      if (!forms)
          return this;
      // always arrays, handles jquery
      if (type(forms) === 'element')
          forms = [forms];
      var self = this;
      each(function (el) {
          if (type(el) !== 'element')
              throw new TypeError('Must pass HTMLElement to `analytics.trackForm`.');
          function handler(e) {
              prevent(e);
              var ev = is.fn(event) ? event(el) : event;
              var props = is.fn(properties) ? properties(el) : properties;
              self.track(ev, props);
              self._callback(function () {
                  el.submit();
              });
          }
          // Support the events happening through jQuery or Zepto instead of through
          // the normal DOM API, because `el.submit` doesn't bubble up events...
          var $ = window.jQuery || window.Zepto;
          if ($) {
              $(el).submit(handler);
          }
          else {
              on(el, 'submit', handler);
          }
      }, forms);
      return this;
  };
  /**
   * Trigger a pageview, labeling the current page with an optional `category`,
   * `name` and `properties`.
   *
   * @param {string} [category]
   * @param {string} [name]
   * @param {Object|string} [properties] (or path)
   * @param {Object} [options]
   * @param {Function} [fn]
   * @return {Analytics}
   */
  Analytics.prototype.page = function (category, name, properties, options, fn) {
      // Argument reshuffling.
      /* eslint-disable no-unused-expressions, no-sequences */
      if (is.fn(options))
          (fn = options), (options = null);
      if (is.fn(properties))
          (fn = properties), (options = properties = null);
      if (is.fn(name))
          (fn = name), (options = properties = name = null);
      if (type(category) === 'object')
          (options = name), (properties = category), (name = category = null);
      if (type(name) === 'object')
          (options = properties), (properties = name), (name = null);
      if (type(category) === 'string' && type(name) !== 'string')
          (name = category), (category = null);
      /* eslint-enable no-unused-expressions, no-sequences */
      properties = clone(properties) || {};
      if (name)
          properties.name = name;
      if (category)
          properties.category = category;
      // Ensure properties has baseline spec properties.
      // TODO: Eventually move these entirely to `options.context.page`
      var defs = pageDefaults();
      defaults(properties, defs);
      // Mirror user overrides to `options.context.page` (but exclude custom properties)
      // (Any page defaults get applied in `this.normalize` for consistency.)
      // Weird, yeah--moving special props to `context.page` will fix this in the long term.
      var overrides = pick(keys(defs), properties);
      if (!is.empty(overrides)) {
          options = options || {};
          options.context = options.context || {};
          options.context.page = overrides;
      }
      var msg = this.normalize({
          properties: properties,
          category: category,
          options: options,
          name: name
      });
      // Add the initialize integrations so the server-side ones can be disabled too
      if (this.options.integrations) {
          defaults(msg.integrations, this.options.integrations);
      }
      this._invoke('page', new Page(msg));
      this.emit('page', category, name, properties, options);
      this._callback(fn);
      return this;
  };
  /**
   * FIXME: BACKWARDS COMPATIBILITY: convert an old `pageview` to a `page` call.
   * @api private
   */
  Analytics.prototype.pageview = function (url) {
      var properties = {};
      if (url)
          properties.path = url;
      this.page(properties);
      return this;
  };
  /**
   * Merge two previously unassociated user identities.
   *
   * @param {string} to
   * @param {string} from (optional)
   * @param {Object} options (optional)
   * @param {Function} fn (optional)
   * @return {Analytics}
   */
  Analytics.prototype.alias = function (to, from, options, fn) {
      // Argument reshuffling.
      /* eslint-disable no-unused-expressions, no-sequences */
      if (is.fn(options))
          (fn = options), (options = null);
      if (is.fn(from))
          (fn = from), (options = null), (from = null);
      if (is.object(from))
          (options = from), (from = null);
      /* eslint-enable no-unused-expressions, no-sequences */
      var msg = this.normalize({
          options: options,
          previousId: from,
          userId: to
      });
      // Add the initialize integrations so the server-side ones can be disabled too
      if (this.options.integrations) {
          defaults(msg.integrations, this.options.integrations);
      }
      this._invoke('alias', new Alias(msg));
      this.emit('alias', to, from, options);
      this._callback(fn);
      return this;
  };
  /**
   * Register a `fn` to be fired when all the analytics services are ready.
   */
  Analytics.prototype.ready = function (fn) {
      if (is.fn(fn)) {
          if (this._readied) {
              nextTick(fn);
          }
          else {
              this.once('ready', fn);
          }
      }
      return this;
  };
  /**
   * Set the `timeout` (in milliseconds) used for callbacks.
   */
  Analytics.prototype.timeout = function (timeout) {
      this._timeout = timeout;
  };
  /**
   * Enable or disable debug.
   */
  Analytics.prototype.debug = function (str) {
      if (!arguments.length || str) {
          debug.enable('analytics:' + (str || '*'));
      }
      else {
          debug.disable();
      }
  };
  /**
   * Apply options.
   * @api private
   */
  Analytics.prototype._options = function (options) {
      options = options || {};
      this.options = options;
      cookie.options(options.cookie);
      metrics.options(options.metrics);
      store.options(options.localStorage);
      user.options(options.user);
      group.options(options.group);
      return this;
  };
  /**
   * Callback a `fn` after our defined timeout period.
   * @api private
   */
  Analytics.prototype._callback = function (fn) {
      if (is.fn(fn)) {
          this._timeout ? setTimeout(fn, this._timeout) : nextTick(fn);
      }
      return this;
  };
  /**
   * Call `method` with `facade` on all enabled integrations.
   *
   * @param {string} method
   * @param {Facade} facade
   * @return {Analytics}
   * @api private
   */
  Analytics.prototype._invoke = function (method, facade) {
      var self = this;
      try {
          this._sourceMiddlewares.applyMiddlewares(extend(true, new Facade({}), facade), this._integrations, function (result) {
              // A nullified payload should not be sent.
              if (result === null) {
                  self.log('Payload with method "%s" was null and dropped by source a middleware.', method);
                  return;
              }
              // Check if the payload is still a Facade. If not, convert it to one.
              if (!(result instanceof Facade)) {
                  result = new Facade(result);
              }
              self.emit('invoke', result);
              metrics.increment('analytics_js.invoke', {
                  method: method
              });
              applyIntegrationMiddlewares(result);
          });
      }
      catch (e) {
          metrics.increment('analytics_js.invoke.error', {
              method: method
          });
          self.log('Error invoking .%s method of %s integration: %o', method, name, e);
      }
      return this;
      function applyIntegrationMiddlewares(facade) {
          var failedInitializations = self.failedInitializations || [];
          each(function (integration, name) {
              var facadeCopy = extend(true, new Facade({}), facade);
              if (!facadeCopy.enabled(name))
                  return;
              // Check if an integration failed to initialize.
              // If so, do not process the message as the integration is in an unstable state.
              if (failedInitializations.indexOf(name) >= 0) {
                  self.log('Skipping invocation of .%s method of %s integration. Integration failed to initialize properly.', method, name);
              }
              else {
                  try {
                      // Apply any integration middlewares that exist, then invoke the integration with the result.
                      self._integrationMiddlewares.applyMiddlewares(facadeCopy, integration.name, function (result) {
                          // A nullified payload should not be sent to an integration.
                          if (result === null) {
                              self.log('Payload to integration "%s" was null and dropped by a middleware.', name);
                              return;
                          }
                          // Check if the payload is still a Facade. If not, convert it to one.
                          if (!(result instanceof Facade)) {
                              result = new Facade(result);
                          }
                          // apply destination middlewares
                          // Apply any integration middlewares that exist, then invoke the integration with the result.
                          if (self._destinationMiddlewares[integration.name]) {
                              self._destinationMiddlewares[integration.name].applyMiddlewares(facadeCopy, integration.name, function (result) {
                                  // A nullified payload should not be sent to an integration.
                                  if (result === null) {
                                      self.log('Payload to destination "%s" was null and dropped by a middleware.', name);
                                      return;
                                  }
                                  // Check if the payload is still a Facade. If not, convert it to one.
                                  if (!(result instanceof Facade)) {
                                      result = new Facade(result);
                                  }
                                  metrics.increment('analytics_js.integration.invoke', {
                                      method: method,
                                      integration_name: integration.name
                                  });
                                  integration.invoke.call(integration, method, result);
                              });
                          }
                          else {
                              metrics.increment('analytics_js.integration.invoke', {
                                  method: method,
                                  integration_name: integration.name
                              });
                              integration.invoke.call(integration, method, result);
                          }
                      });
                  }
                  catch (e) {
                      metrics.increment('analytics_js.integration.invoke.error', {
                          method: method,
                          integration_name: integration.name
                      });
                      self.log('Error invoking .%s method of %s integration: %o', method, name, e);
                  }
              }
          }, self._integrations);
      }
  };
  /**
   * Push `args`.
   *
   * @param {Array} args
   * @api private
   */
  Analytics.prototype.push = function (args) {
      var method = args.shift();
      if (!this[method])
          return;
      this[method].apply(this, args);
  };
  /**
   * Reset group and user traits and id's.
   *
   * @api public
   */
  Analytics.prototype.reset = function () {
      this.user().logout();
      this.group().logout();
  };
  /**
   * Parse the query string for callable methods.
   *
   * @api private
   */
  Analytics.prototype._parseQuery = function (query) {
      // Parse querystring to an object
      var q = querystring.parse(query);
      // Create traits and properties objects, populate from querysting params
      var traits = pickPrefix('ajs_trait_', q);
      var props = pickPrefix('ajs_prop_', q);
      // Trigger based on callable parameters in the URL
      if (q.ajs_uid)
          this.identify(q.ajs_uid, traits);
      if (q.ajs_event)
          this.track(q.ajs_event, props);
      if (q.ajs_aid)
          user.anonymousId(q.ajs_aid);
      return this;
      /**
       * Create a shallow copy of an input object containing only the properties
       * whose keys are specified by a prefix, stripped of that prefix
       *
       * @return {Object}
       * @api private
       */
      function pickPrefix(prefix, object) {
          var length = prefix.length;
          var sub;
          return foldl(function (acc, val, key) {
              if (key.substr(0, length) === prefix) {
                  sub = key.substr(length);
                  acc[sub] = val;
              }
              return acc;
          }, {}, object);
      }
  };
  /**
   * Normalize the given `msg`.
   */
  Analytics.prototype.normalize = function (msg) {
      msg = normalize(msg, keys(this._integrations));
      if (msg.anonymousId)
          user.anonymousId(msg.anonymousId);
      msg.anonymousId = user.anonymousId();
      // Ensure all outgoing requests include page data in their contexts.
      msg.context.page = defaults(msg.context.page || {}, pageDefaults());
      return msg;
  };
  /**
   * Merges the tracking plan and initialization integration options.
   *
   * @param  {Object} planIntegrations Tracking plan integrations.
   * @return {Object}                  The merged integrations.
   */
  Analytics.prototype._mergeInitializeAndPlanIntegrations = function (planIntegrations) {
      // Do nothing if there are no initialization integrations
      if (!this.options.integrations) {
          return planIntegrations;
      }
      // Clone the initialization integrations
      var integrations = extend({}, this.options.integrations);
      var integrationName;
      // Allow the tracking plan to disable integrations that were explicitly
      // enabled on initialization
      if (planIntegrations.All === false) {
          integrations = { All: false };
      }
      for (integrationName in planIntegrations) {
          if (planIntegrations.hasOwnProperty(integrationName)) {
              // Don't allow the tracking plan to re-enable disabled integrations
              if (this.options.integrations[integrationName] !== false) {
                  integrations[integrationName] = planIntegrations[integrationName];
              }
          }
      }
      return integrations;
  };
  /**
   * No conflict support.
   */
  Analytics.prototype.noConflict = function () {
      window.analytics = _analytics;
      return this;
  };
  /*
   * Exports.
   */
  module.exports = Analytics;
  module.exports.cookie = cookie;
  module.exports.memory = memory;
  module.exports.store = store;
  module.exports.metrics = metrics;

  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{"./cookie":23,"./group":25,"./memory":27,"./metrics":28,"./middleware":29,"./normalize":30,"./pageDefaults":31,"./store":32,"./user":33,"./utils/clone":34,"./utils/each":35,"@ndhoule/defaults":8,"@ndhoule/foldl":14,"@ndhoule/keys":16,"@ndhoule/pick":18,"@segment/is-meta":1090,"@segment/prevent-default":1099,"bind-all":1107,"component-emitter":1114,"component-event":1115,"component-querystring":1118,"component-type":1120,"debug":37,"extend":1126,"is":1131,"next-tick":1142,"segmentio-facade":1158}],23:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Module dependencies.
   */
  var bindAll = require('bind-all');
  var clone = require('./utils/clone');
  var cookie = require('@segment/cookie');
  var debug = require('debug')('analytics.js:cookie');
  var defaults = require('@ndhoule/defaults');
  var topDomain = require('@segment/top-domain');
  /**
   * Initialize a new `Cookie` with `options`.
   *
   * @param {Object} options
   */
  function Cookie(options) {
      this.options(options);
  }
  /**
   * Get or set the cookie options.
   */
  Cookie.prototype.options = function (options) {
      if (arguments.length === 0)
          return this._options;
      options = options || {};
      var domain = '.' + topDomain(window.location.href);
      if (domain === '.')
          domain = null;
      this._options = defaults(options, {
          // default to a year
          maxage: 31536000000,
          path: '/',
          domain: domain,
          sameSite: 'Lax'
      });
      // http://curl.haxx.se/rfc/cookie_spec.html
      // https://publicsuffix.org/list/effective_tld_names.dat
      //
      // try setting a dummy cookie with the options
      // if the cookie isn't set, it probably means
      // that the domain is on the public suffix list
      // like myapp.herokuapp.com or localhost / ip.
      this.set('ajs:test', true);
      if (!this.get('ajs:test')) {
          debug('fallback to domain=null');
          this._options.domain = null;
      }
      this.remove('ajs:test');
  };
  /**
   * Set a `key` and `value` in our cookie.
   */
  Cookie.prototype.set = function (key, value) {
      try {
          value = window.JSON.stringify(value);
          cookie(key, value === 'null' ? null : value, clone(this._options));
          return true;
      }
      catch (e) {
          return false;
      }
  };
  /**
   * Get a value from our cookie by `key`.
   */
  Cookie.prototype.get = function (key) {
      try {
          var value = cookie(key);
          value = value ? window.JSON.parse(value) : null;
          return value;
      }
      catch (e) {
          return null;
      }
  };
  /**
   * Remove a value from our cookie by `key`.
   */
  Cookie.prototype.remove = function (key) {
      try {
          cookie(key, null, clone(this._options));
          return true;
      }
      catch (e) {
          return false;
      }
  };
  /**
   * Expose the cookie singleton.
   */
  module.exports = bindAll(new Cookie());
  /**
   * Expose the `Cookie` constructor.
   */
  module.exports.Cookie = Cookie;

  },{"./utils/clone":34,"@ndhoule/defaults":8,"@segment/cookie":1088,"@segment/top-domain":1104,"bind-all":1107,"debug":37}],24:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /*
   * Module dependencies.
   */
  var clone = require('./utils/clone');
  var cookie = require('./cookie');
  var debug = require('debug')('analytics:entity');
  var defaults = require('@ndhoule/defaults');
  var extend = require('@ndhoule/extend');
  var memory = require('./memory');
  var store = require('./store');
  var isodateTraverse = require('@segment/isodate-traverse');
  /**
   * Expose `Entity`
   */
  module.exports = Entity;
  /**
   * Initialize new `Entity` with `options`.
   */
  function Entity(options) {
      this.options(options);
      this.initialize();
  }
  /**
   * Initialize picks the storage.
   *
   * Checks to see if cookies can be set
   * otherwise fallsback to localStorage.
   */
  Entity.prototype.initialize = function () {
      cookie.set('ajs:cookies', true);
      // cookies are enabled.
      if (cookie.get('ajs:cookies')) {
          cookie.remove('ajs:cookies');
          this._storage = cookie;
          return;
      }
      // localStorage is enabled.
      if (store.enabled) {
          this._storage = store;
          return;
      }
      // fallback to memory storage.
      debug('warning using memory store both cookies and localStorage are disabled');
      this._storage = memory;
  };
  /**
   * Get the storage.
   */
  Entity.prototype.storage = function () {
      return this._storage;
  };
  /**
   * Get or set storage `options`.
   */
  Entity.prototype.options = function (options) {
      if (arguments.length === 0)
          return this._options;
      this._options = defaults(options || {}, this.defaults || {});
  };
  /**
   * Get or set the entity's `id`.
   */
  Entity.prototype.id = function (id) {
      switch (arguments.length) {
          case 0:
              return this._getId();
          case 1:
              return this._setId(id);
          default:
          // No default case
      }
  };
  /**
   * Get the entity's id.
   */
  Entity.prototype._getId = function () {
      if (!this._options.persist) {
          return this._id === undefined ? null : this._id;
      }
      // Check cookies.
      var cookieId = this._getIdFromCookie();
      if (cookieId) {
          return cookieId;
      }
      // Check localStorage.
      var lsId = this._getIdFromLocalStorage();
      if (lsId) {
          // Copy the id to cookies so we can read it directly from cookies next time.
          this._setIdInCookies(lsId);
          return lsId;
      }
      return null;
  };
  /**
   * Get the entity's id from cookies.
   */
  // FIXME `options.cookie` is an optional field, so `this._options.cookie.key`
  // can thrown an exception.
  Entity.prototype._getIdFromCookie = function () {
      return this.storage().get(this._options.cookie.key);
  };
  /**
   * Get the entity's id from cookies.
   */
  Entity.prototype._getIdFromLocalStorage = function () {
      if (!this._options.localStorageFallbackDisabled) {
          return store.get(this._options.cookie.key);
      }
      return null;
  };
  /**
   * Set the entity's `id`.
   */
  Entity.prototype._setId = function (id) {
      if (this._options.persist) {
          this._setIdInCookies(id);
          this._setIdInLocalStorage(id);
      }
      else {
          this._id = id;
      }
  };
  /**
   * Set the entity's `id` in cookies.
   */
  Entity.prototype._setIdInCookies = function (id) {
      this.storage().set(this._options.cookie.key, id);
  };
  /**
   * Set the entity's `id` in local storage.
   */
  Entity.prototype._setIdInLocalStorage = function (id) {
      if (!this._options.localStorageFallbackDisabled) {
          store.set(this._options.cookie.key, id);
      }
  };
  /**
   * Get or set the entity's `traits`.
   *
   * BACKWARDS COMPATIBILITY: aliased to `properties`
   */
  Entity.prototype.properties = Entity.prototype.traits = function (traits) {
      switch (arguments.length) {
          case 0:
              return this._getTraits();
          case 1:
              return this._setTraits(traits);
          default:
          // No default case
      }
  };
  /**
   * Get the entity's traits. Always convert ISO date strings into real dates,
   * since they aren't parsed back from local storage.
   */
  Entity.prototype._getTraits = function () {
      var ret = this._options.persist
          ? store.get(this._options.localStorage.key)
          : this._traits;
      return ret ? isodateTraverse(clone(ret)) : {};
  };
  /**
   * Set the entity's `traits`.
   */
  Entity.prototype._setTraits = function (traits) {
      traits = traits || {};
      if (this._options.persist) {
          store.set(this._options.localStorage.key, traits);
      }
      else {
          this._traits = traits;
      }
  };
  /**
   * Identify the entity with an `id` and `traits`. If we it's the same entity,
   * extend the existing `traits` instead of overwriting.
   */
  Entity.prototype.identify = function (id, traits) {
      traits = traits || {};
      var current = this.id();
      if (current === null || current === id)
          traits = extend(this.traits(), traits);
      if (id)
          this.id(id);
      this.debug('identify %o, %o', id, traits);
      this.traits(traits);
      this.save();
  };
  /**
   * Save the entity to local storage and the cookie.
   */
  Entity.prototype.save = function () {
      if (!this._options.persist)
          return false;
      this._setId(this.id());
      this._setTraits(this.traits());
      return true;
  };
  /**
   * Log the entity out, reseting `id` and `traits` to defaults.
   */
  Entity.prototype.logout = function () {
      this.id(null);
      this.traits({});
      this.storage().remove(this._options.cookie.key);
      store.remove(this._options.cookie.key);
      store.remove(this._options.localStorage.key);
  };
  /**
   * Reset all entity state, logging out and returning options to defaults.
   */
  Entity.prototype.reset = function () {
      this.logout();
      this.options({});
  };
  /**
   * Load saved entity `id` or `traits` from storage.
   */
  Entity.prototype.load = function () {
      this.id(this.id());
      this.traits(this.traits());
  };

  },{"./cookie":23,"./memory":27,"./store":32,"./utils/clone":34,"@ndhoule/defaults":8,"@ndhoule/extend":13,"@segment/isodate-traverse":1091,"debug":37}],25:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /*
   * Module dependencies.
   */
  var Entity = require('./entity');
  var bindAll = require('bind-all');
  var debug = require('debug')('analytics:group');
  var inherit = require('inherits');
  /**
   * Group defaults
   */
  Group.defaults = {
      persist: true,
      cookie: {
          key: 'ajs_group_id'
      },
      localStorage: {
          key: 'ajs_group_properties'
      }
  };
  /**
   * Initialize a new `Group` with `options`.
   */
  function Group(options) {
      this.defaults = Group.defaults;
      this.debug = debug;
      Entity.call(this, options);
  }
  /**
   * Inherit `Entity`
   */
  inherit(Group, Entity);
  /**
   * Expose the group singleton.
   */
  module.exports = bindAll(new Group());
  /**
   * Expose the `Group` constructor.
   */
  module.exports.Group = Group;

  },{"./entity":24,"bind-all":1107,"debug":37,"inherits":1129}],26:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Analytics.js
   *
   * (C) 2013-2016 Segment.io Inc.
   */
  var Analytics = require('./analytics');
  // Create a new `analytics` singleton.
  var analytics = new Analytics();
  // Expose `require`.
  // TODO(ndhoule): Look into deprecating, we no longer need to expose it in tests
  analytics.require = require;
  // Expose package version.
  analytics.VERSION = require('../package.json').version;
  /*
   * Exports.
   */
  module.exports = analytics;

  },{"../package.json":38,"./analytics":22}],27:[function(require,module,exports){
  'use strict';
  /*
   * Module Dependencies.
   */
  var bindAll = require('bind-all');
  var clone = require('./utils/clone');
  /**
   * HOP.
   */
  var has = Object.prototype.hasOwnProperty;
  /**
   * Expose `Memory`
   */
  module.exports = bindAll(new Memory());
  /**
   * Initialize `Memory` store
   */
  function Memory() {
      this.store = {};
  }
  /**
   * Set a `key` and `value`.
   */
  Memory.prototype.set = function (key, value) {
      this.store[key] = clone(value);
      return true;
  };
  /**
   * Get a `key`.
   */
  Memory.prototype.get = function (key) {
      if (!has.call(this.store, key))
          return;
      return clone(this.store[key]);
  };
  /**
   * Remove a `key`.
   */
  Memory.prototype.remove = function (key) {
      delete this.store[key];
      return true;
  };

  },{"./utils/clone":34,"bind-all":1107}],28:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  var bindAll = require('bind-all');
  var send = require('@segment/send-json');
  var debug = require('debug')('analytics.js:metrics');
  function Metrics(options) {
      this.options(options);
  }
  /**
   * Set the metrics options.
   */
  Metrics.prototype.options = function (options) {
      options = options || {};
      this.host = options.host || 'api.segment.io/v1';
      this.sampleRate = options.sampleRate || 0; // disable metrics by default.
      this.flushTimer = options.flushTimer || 30 * 1000 /* 30s */;
      this.maxQueueSize = options.maxQueueSize || 20;
      this.queue = [];
      if (this.sampleRate > 0) {
          var self = this;
          setInterval(function () {
              self._flush();
          }, this.flushTimer);
      }
  };
  /**
   * Increments the counter identified by name and tags by one.
   */
  Metrics.prototype.increment = function (metric, tags) {
      if (Math.random() > this.sampleRate) {
          return;
      }
      if (this.queue.length >= this.maxQueueSize) {
          return;
      }
      this.queue.push({ type: 'Counter', metric: metric, value: 1, tags: tags });
      // Trigger a flush if this is an error metric.
      if (metric.indexOf('error') > 0) {
          this._flush();
      }
  };
  /**
   * Flush all queued metrics.
   */
  Metrics.prototype._flush = function () {
      var self = this;
      if (self.queue.length <= 0) {
          return;
      }
      var payload = { series: this.queue };
      var headers = { 'Content-Type': 'text/plain' };
      self.queue = [];
      // This endpoint does not support jsonp, so only proceed if the browser
      // supports xhr.
      if (send.type !== 'xhr')
          return;
      send('https://' + this.host + '/m', payload, headers, function (err, res) {
          debug('sent %O, received %O', payload, [err, res]);
      });
  };
  /**
   * Expose the metrics singleton.
   */
  module.exports = bindAll(new Metrics());
  /**
   * Expose the `Metrics` constructor.
   */
  module.exports.Metrics = Metrics;

  },{"@segment/send-json":1101,"bind-all":1107,"debug":37}],29:[function(require,module,exports){
  'use strict';
  var Facade = require('segmentio-facade');
  module.exports.SourceMiddlewareChain = function SourceMiddlewareChain() {
      var apply = middlewareChain(this);
      this.applyMiddlewares = function (facade, integrations, callback) {
          return apply(function (mw, payload, next) {
              mw({
                  integrations: integrations,
                  next: next,
                  payload: payload
              });
          }, facade, callback);
      };
  };
  module.exports.IntegrationMiddlewareChain = function IntegrationMiddlewareChain() {
      var apply = middlewareChain(this);
      this.applyMiddlewares = function (facade, integration, callback) {
          return apply(function (mw, payload, next) {
              mw(payload, integration, next);
          }, facade, callback);
      };
  };
  module.exports.DestinationMiddlewareChain = function DestinationMiddlewareChain() {
      var apply = middlewareChain(this);
      this.applyMiddlewares = function (facade, integration, callback) {
          return apply(function (mw, payload, next) {
              mw({ payload: payload, integration: integration, next: next });
          }, facade, callback);
      };
  };
  // Chain is essentially a linked list of middlewares to run in order.
  function middlewareChain(dest) {
      var middlewares = [];
      // Return a copy to prevent external mutations.
      dest.getMiddlewares = function () {
          return middlewares.slice();
      };
      dest.add = function (middleware) {
          if (typeof middleware !== 'function')
              throw new Error('attempted to add non-function middleware');
          // Check for identical object references - bug check.
          if (middlewares.indexOf(middleware) !== -1)
              throw new Error('middleware is already registered');
          middlewares.push(middleware);
      };
      // fn is the callback to be run once all middlewares have been applied.
      return function applyMiddlewares(run, facade, callback) {
          if (typeof facade !== 'object')
              throw new Error('applyMiddlewares requires a payload object');
          if (typeof callback !== 'function')
              throw new Error('applyMiddlewares requires a function callback');
          // Attach callback to the end of the chain.
          var middlewaresToApply = middlewares.slice();
          middlewaresToApply.push(callback);
          executeChain(run, facade, middlewaresToApply, 0);
      };
  }
  // Go over all middlewares until all have been applied.
  function executeChain(run, payload, middlewares, index) {
      // If the facade has been nullified, immediately skip to the final middleware.
      if (payload === null) {
          middlewares[middlewares.length - 1](null);
          return;
      }
      // Check if the payload is still a Facade. If not, convert it to one.
      if (!(payload instanceof Facade)) {
          payload = new Facade(payload);
      }
      var mw = middlewares[index];
      if (mw) {
          // If there's another middleware, continue down the chain. Otherwise, call the final function.
          if (middlewares[index + 1]) {
              run(mw, payload, function (result) {
                  executeChain(run, result, middlewares, ++index);
              });
          }
          else {
              mw(payload);
          }
      }
  }
  module.exports.middlewareChain = middlewareChain;

  },{"segmentio-facade":1158}],30:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Module Dependencies.
   */
  var debug = require('debug')('analytics.js:normalize');
  var defaults = require('@ndhoule/defaults');
  var each = require('./utils/each');
  var includes = require('@ndhoule/includes');
  var map = require('./utils/map');
  var type = require('component-type');
  var uuid = require('uuid/v4');
  var md5 = require('spark-md5').hash;
  /**
   * HOP.
   */
  var has = Object.prototype.hasOwnProperty;
  /**
   * Expose `normalize`
   */
  module.exports = normalize;
  /**
   * Toplevel properties.
   */
  var toplevel = ['integrations', 'anonymousId', 'timestamp', 'context'];
  function normalize(msg, list) {
      var lower = map(function (s) {
          return s.toLowerCase();
      }, list);
      var opts = msg.options || {};
      var integrations = opts.integrations || {};
      var providers = opts.providers || {};
      var context = opts.context || {};
      var ret = {};
      debug('<-', msg);
      // integrations.
      each(function (value, key) {
          if (!integration(key))
              return;
          if (!has.call(integrations, key))
              integrations[key] = value;
          delete opts[key];
      }, opts);
      // providers.
      delete opts.providers;
      each(function (value, key) {
          if (!integration(key))
              return;
          if (type(integrations[key]) === 'object')
              return;
          if (has.call(integrations, key) && typeof providers[key] === 'boolean')
              return;
          integrations[key] = value;
      }, providers);
      // move all toplevel options to msg
      // and the rest to context.
      each(function (_value, key) {
          if (includes(key, toplevel)) {
              ret[key] = opts[key];
          }
          else {
              context[key] = opts[key];
          }
      }, opts);
      // generate and attach a messageId to msg
      msg.messageId = 'ajs-' + md5(window.JSON.stringify(msg) + uuid());
      // cleanup
      delete msg.options;
      ret.integrations = integrations;
      ret.context = context;
      ret = defaults(ret, msg);
      debug('->', ret);
      return ret;
      function integration(name) {
          return !!(includes(name, list) ||
              name.toLowerCase() === 'all' ||
              includes(name.toLowerCase(), lower));
      }
  }

  },{"./utils/each":35,"./utils/map":36,"@ndhoule/defaults":8,"@ndhoule/includes":15,"component-type":1120,"debug":37,"spark-md5":1166,"uuid/v4":1186}],31:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  /*
   * Module dependencies.
   */
  var canonical = require('@segment/canonical');
  var includes = require('@ndhoule/includes');
  var url = require('component-url');
  /**
   * Return a default `options.context.page` object.
   *
   * https://segment.com/docs/spec/page/#properties
   */
  function pageDefaults() {
      return {
          path: canonicalPath(),
          referrer: document.referrer,
          search: location.search,
          title: document.title,
          url: canonicalUrl(location.search)
      };
  }
  /**
   * Return the canonical path for the page.
   */
  function canonicalPath() {
      var canon = canonical();
      if (!canon)
          return window.location.pathname;
      var parsed = url.parse(canon);
      return parsed.pathname;
  }
  /**
   * Return the canonical URL for the page concat the given `search`
   * and strip the hash.
   */
  function canonicalUrl(search) {
      var canon = canonical();
      if (canon)
          return includes('?', canon) ? canon : canon + search;
      var url = window.location.href;
      var i = url.indexOf('#');
      return i === -1 ? url : url.slice(0, i);
  }
  /*
   * Exports.
   */
  module.exports = pageDefaults;

  },{"@ndhoule/includes":15,"@segment/canonical":1086,"component-url":1121}],32:[function(require,module,exports){
  'use strict';
  /*
   * Module dependencies.
   */
  var bindAll = require('bind-all');
  var defaults = require('@ndhoule/defaults');
  var store = require('@segment/store');
  /**
   * Initialize a new `Store` with `options`.
   *
   * @param {Object} options
   */
  function Store(options) {
      this.options(options);
  }
  /**
   * Set the `options` for the store.
   */
  Store.prototype.options = function (options) {
      if (arguments.length === 0)
          return this._options;
      options = options || {};
      defaults(options, { enabled: true });
      this.enabled = options.enabled && store.enabled;
      this._options = options;
  };
  /**
   * Set a `key` and `value` in local storage.
   */
  Store.prototype.set = function (key, value) {
      if (!this.enabled)
          return false;
      return store.set(key, value);
  };
  /**
   * Get a value from local storage by `key`.
   */
  Store.prototype.get = function (key) {
      if (!this.enabled)
          return null;
      return store.get(key);
  };
  /**
   * Remove a value from local storage by `key`.
   */
  Store.prototype.remove = function (key) {
      if (!this.enabled)
          return false;
      return store.remove(key);
  };
  /**
   * Expose the store singleton.
   */
  module.exports = bindAll(new Store());
  /**
   * Expose the `Store` constructor.
   */
  module.exports.Store = Store;

  },{"@ndhoule/defaults":8,"@segment/store":1102,"bind-all":1107}],33:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  var Entity = require('./entity');
  var bindAll = require('bind-all');
  var cookie = require('./cookie');
  var debug = require('debug')('analytics:user');
  var inherit = require('inherits');
  var rawCookie = require('@segment/cookie');
  var uuid = require('uuid');
  var localStorage = require('./store');
  User.defaults = {
      persist: true,
      cookie: {
          key: 'ajs_user_id',
          oldKey: 'ajs_user'
      },
      localStorage: {
          key: 'ajs_user_traits'
      }
  };
  /**
   * Initialize a new `User` with `options`.
   */
  function User(options) {
      this.defaults = User.defaults;
      this.debug = debug;
      Entity.call(this, options);
  }
  /**
   * Inherit `Entity`
   */
  inherit(User, Entity);
  /**
   * Set/get the user id.
   *
   * When the user id changes, the method will reset his anonymousId to a new one.
   *
   * @example
   * // didn't change because the user didn't have previous id.
   * anonymousId = user.anonymousId();
   * user.id('foo');
   * assert.equal(anonymousId, user.anonymousId());
   *
   * // didn't change because the user id changed to null.
   * anonymousId = user.anonymousId();
   * user.id('foo');
   * user.id(null);
   * assert.equal(anonymousId, user.anonymousId());
   *
   * // change because the user had previous id.
   * anonymousId = user.anonymousId();
   * user.id('foo');
   * user.id('baz'); // triggers change
   * user.id('baz'); // no change
   * assert.notEqual(anonymousId, user.anonymousId());
   */
  User.prototype.id = function (id) {
      var prev = this._getId();
      var ret = Entity.prototype.id.apply(this, arguments);
      if (prev == null)
          return ret;
      // FIXME: We're relying on coercion here (1 == "1"), but our API treats these
      // two values differently. Figure out what will break if we remove this and
      // change to strict equality
      /* eslint-disable eqeqeq */
      if (prev != id && id)
          this.anonymousId(null);
      /* eslint-enable eqeqeq */
      return ret;
  };
  /**
   * Set / get / remove anonymousId.
   *
   * @param {String} anonymousId
   * @return {String|User}
   */
  User.prototype.anonymousId = function (anonymousId) {
      var store = this.storage();
      // set / remove
      if (arguments.length) {
          store.set('ajs_anonymous_id', anonymousId);
          this._setAnonymousIdInLocalStorage(anonymousId);
          return this;
      }
      // new
      anonymousId = store.get('ajs_anonymous_id');
      if (anonymousId) {
          // value exists in cookie, copy it to localStorage
          this._setAnonymousIdInLocalStorage(anonymousId);
          // refresh cookie to extend expiry
          store.set('ajs_anonymous_id', anonymousId);
          return anonymousId;
      }
      if (!this._options.localStorageFallbackDisabled) {
          // if anonymousId doesn't exist in cookies, check localStorage
          anonymousId = localStorage.get('ajs_anonymous_id');
          if (anonymousId) {
              // Write to cookies if available in localStorage but not cookies
              store.set('ajs_anonymous_id', anonymousId);
              return anonymousId;
          }
      }
      // old - it is not stringified so we use the raw cookie.
      anonymousId = rawCookie('_sio');
      if (anonymousId) {
          anonymousId = anonymousId.split('----')[0];
          store.set('ajs_anonymous_id', anonymousId);
          this._setAnonymousIdInLocalStorage(anonymousId);
          store.remove('_sio');
          return anonymousId;
      }
      // empty
      anonymousId = uuid.v4();
      store.set('ajs_anonymous_id', anonymousId);
      this._setAnonymousIdInLocalStorage(anonymousId);
      return store.get('ajs_anonymous_id');
  };
  /**
   * Set the user's `anonymousid` in local storage.
   */
  User.prototype._setAnonymousIdInLocalStorage = function (id) {
      if (!this._options.localStorageFallbackDisabled) {
          localStorage.set('ajs_anonymous_id', id);
      }
  };
  /**
   * Remove anonymous id on logout too.
   */
  User.prototype.logout = function () {
      Entity.prototype.logout.call(this);
      this.anonymousId(null);
  };
  /**
   * Load saved user `id` or `traits` from storage.
   */
  User.prototype.load = function () {
      if (this._loadOldCookie())
          return;
      Entity.prototype.load.call(this);
  };
  /**
   * BACKWARDS COMPATIBILITY: Load the old user from the cookie.
   *
   * @api private
   */
  User.prototype._loadOldCookie = function () {
      var user = cookie.get(this._options.cookie.oldKey);
      if (!user)
          return false;
      this.id(user.id);
      this.traits(user.traits);
      cookie.remove(this._options.cookie.oldKey);
      return true;
  };
  /**
   * Expose the user singleton.
   */
  module.exports = bindAll(new User());
  /**
   * Expose the `User` constructor.
   */
  module.exports.User = User;

  },{"./cookie":23,"./entity":24,"./store":32,"@segment/cookie":1088,"bind-all":1107,"debug":37,"inherits":1129,"uuid":1182}],34:[function(require,module,exports){
  'use strict';
  var type = require('component-type');
  /**
   * Deeply clone an object.
   *
   * @param {*} obj Any object.
   *
   * COPYRIGHT: https://github.com/ndhoule/clone/blob/master/LICENSE.md
   * The MIT License (MIT)
   * Copyright (c) 2015 Nathan Houle
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var clone = function clone(obj) {
      var t = type(obj);
      var copy;
      if (t === 'object') {
          copy = {};
          for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                  copy[key] = clone(obj[key]);
              }
          }
          return copy;
      }
      if (t === 'array') {
          copy = new Array(obj.length);
          for (var i = 0, l = obj.length; i < l; i++) {
              copy[i] = clone(obj[i]);
          }
          return copy;
      }
      if (t === 'regexp') {
          // from millermedeiros/amd-utils - MIT
          var flags = '';
          flags += obj.multiline ? 'm' : '';
          flags += obj.global ? 'g' : '';
          flags += obj.ignoreCase ? 'i' : '';
          return new RegExp(obj.source, flags);
      }
      if (t === 'date') {
          return new Date(obj.getTime());
      }
      // string, number, boolean, etc.
      return obj;
  };
  module.exports = clone;

  },{"component-type":1120}],35:[function(require,module,exports){
  'use strict';
  /*
   * The MIT License (MIT)
   * Copyright (c) 2015 Nathan Houle
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /*
   * Module dependencies.
   */
  var keys = require('@ndhoule/keys');
  var objToString = Object.prototype.toString;
  /**
   * Tests if a value is a number.
   *
   * @name isNumber
   * @api private
   * @param {*} val The value to test.
   * @return {boolean} Returns `true` if `val` is a number, otherwise `false`.
   */
  var isNumber = function isNumber(val) {
      var type = typeof val;
      return (type === 'number' ||
          (type === 'object' && objToString.call(val) === '[object Number]'));
  };
  /**
   * Tests if a value is an array.
   *
   * @name isArray
   * @api private
   * @param {*} val The value to test.
   * @return {boolean} Returns `true` if the value is an array, otherwise `false`.
   */
  var isArray = typeof Array.isArray === 'function'
      ? Array.isArray
      : function isArray(val) {
          return objToString.call(val) === '[object Array]';
      };
  /**
   * Tests if a value is array-like. Array-like means the value is not a function and has a numeric
   * `.length` property.
   *
   * @name isArrayLike
   * @api private
   * @param {*} val
   * @return {boolean}
   */
  var isArrayLike = function isArrayLike(val) {
      return (val != null &&
          (isArray(val) || (val !== 'function' && isNumber(val.length))));
  };
  /**
   * Internal implementation of `each`. Works on arrays and array-like data structures.
   *
   * @name arrayEach
   * @api private
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Array} array The array(-like) structure to iterate over.
   * @return {undefined}
   */
  var arrayEach = function arrayEach(iterator, array) {
      for (var i = 0; i < array.length; i += 1) {
          // Break iteration early if `iterator` returns `false`
          if (iterator(array[i], i, array) === false) {
              break;
          }
      }
  };
  /**
   * Internal implementation of `each`. Works on objects.
   *
   * @name baseEach
   * @api private
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Object} object The object to iterate over.
   * @return {undefined}
   */
  var baseEach = function baseEach(iterator, object) {
      var ks = keys(object);
      for (var i = 0; i < ks.length; i += 1) {
          // Break iteration early if `iterator` returns `false`
          if (iterator(object[ks[i]], ks[i], object) === false) {
              break;
          }
      }
  };
  /**
   * Iterate over an input collection, invoking an `iterator` function for each element in the
   * collection and passing to it three arguments: `(value, index, collection)`. The `iterator`
   * function can end iteration early by returning `false`.
   *
   * @name each
   * @api public
   * @param {Function(value, key, collection)} iterator The function to invoke per iteration.
   * @param {Array|Object|string} collection The collection to iterate over.
   * @return {undefined} Because `each` is run only for side effects, always returns `undefined`.
   * @example
   * var log = console.log.bind(console);
   *
   * each(log, ['a', 'b', 'c']);
   * //-> 'a', 0, ['a', 'b', 'c']
   * //-> 'b', 1, ['a', 'b', 'c']
   * //-> 'c', 2, ['a', 'b', 'c']
   * //=> undefined
   *
   * each(log, 'tim');
   * //-> 't', 2, 'tim'
   * //-> 'i', 1, 'tim'
   * //-> 'm', 0, 'tim'
   * //=> undefined
   *
   * // Note: Iteration order not guaranteed across environments
   * each(log, { name: 'tim', occupation: 'enchanter' });
   * //-> 'tim', 'name', { name: 'tim', occupation: 'enchanter' }
   * //-> 'enchanter', 'occupation', { name: 'tim', occupation: 'enchanter' }
   * //=> undefined
   */
  var each = function each(iterator, collection) {
      return (isArrayLike(collection) ? arrayEach : baseEach).call(this, iterator, collection);
  };
  /*
   * Exports.
   */
  module.exports = each;

  },{"@ndhoule/keys":16}],36:[function(require,module,exports){
  'use strict';
  /*
   * The MIT License (MIT)
   * Copyright (c) 2015 Nathan Houle
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /*
   * Module dependencies.
   */
  var each = require('./each');
  /**
   * Produce a new array by passing each value in the input `collection` through a transformative
   * `iterator` function. The `iterator` function is passed three arguments:
   * `(value, index, collection)`.
   *
   * @name map
   * @api public
   * @param {Function} iterator The transformer function to invoke per iteration.
   * @param {Array} collection The collection to iterate over.
   * @return {Array} A new array containing the results of each `iterator` invocation.
   * @example
   * var square = function(x) { return x * x; };
   *
   * map(square, [1, 2, 3]);
   * //=> [1, 4, 9]
   */
  var map = function map(iterator, collection) {
      if (typeof iterator !== 'function') {
          throw new TypeError('Expected a function but received a ' + typeof iterator);
      }
      var result = [];
      each(function (val, i, collection) {
          result.push(iterator(val, i, collection));
      }, collection);
      return result;
  };
  /*
   * Exports.
   */
  module.exports = map;

  },{"./each":35}],37:[function(require,module,exports){

  /**
   * Expose `debug()` as the module.
   */

  module.exports = debug;

  /**
   * Create a debugger with the given `name`.
   *
   * @param {String} name
   * @return {Type}
   * @api public
   */

  function debug(name) {
    if (!debug.enabled(name)) return function(){};

    return function(fmt){
      fmt = coerce(fmt);

      var curr = new Date;
      var ms = curr - (debug[name] || curr);
      debug[name] = curr;

      fmt = name
        + ' '
        + fmt
        + ' +' + debug.humanize(ms);

      // This hackery is required for IE8
      // where `console.log` doesn't have 'apply'
      window.console
        && console.log
        && Function.prototype.apply.call(console.log, console, arguments);
    }
  }

  /**
   * The currently active debug mode names.
   */

  debug.names = [];
  debug.skips = [];

  /**
   * Enables a debug mode by name. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} name
   * @api public
   */

  debug.enable = function(name) {
    try {
      localStorage.debug = name;
    } catch(e){}

    var split = (name || '').split(/[\s,]+/)
      , len = split.length;

    for (var i = 0; i < len; i++) {
      name = split[i].replace('*', '.*?');
      if (name[0] === '-') {
        debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
      }
      else {
        debug.names.push(new RegExp('^' + name + '$'));
      }
    }
  };

  /**
   * Disable debug output.
   *
   * @api public
   */

  debug.disable = function(){
    debug.enable('');
  };

  /**
   * Humanize the given `ms`.
   *
   * @param {Number} m
   * @return {String}
   * @api private
   */

  debug.humanize = function(ms) {
    var sec = 1000
      , min = 60 * 1000
      , hour = 60 * min;

    if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
    if (ms >= min) return (ms / min).toFixed(1) + 'm';
    if (ms >= sec) return (ms / sec | 0) + 's';
    return ms + 'ms';
  };

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  debug.enabled = function(name) {
    for (var i = 0, len = debug.skips.length; i < len; i++) {
      if (debug.skips[i].test(name)) {
        return false;
      }
    }
    for (var i = 0, len = debug.names.length; i < len; i++) {
      if (debug.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };

  /**
   * Coerce `val`.
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }

  // persist

  try {
    if (window.localStorage) debug.enable(localStorage.debug);
  } catch(e){}

  },{}],38:[function(require,module,exports){
  module.exports={
    "version": "3.13.9"
  }
  },{}],39:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Define the `AdlearnOpenPlatform` integration.
   */
  var AdLearnOpenPlatform = integration('AdLearn Open Platform')
    .option('retargetingPixelId', '')
    .tag(
      'retargeting',
      '<img src="https://secure.leadback.advertising.com/adcedge/lb?site=695501&betr={{ retargetingPixelId }}"/>'
    )
    .tag(
      'existingUsers',
      '<img src="https://secure.leadback.advertising.com/adcedge/lb?site=695501&srvc=1&betr={{ retargetingPixelId }}=920204[720]"/>'
    )
    .tag(
      'conversion',
      '<img src="https://secure.ace-tag.advertising.com/action/type={{ type }}/bins=1/rich=0/mnum=1516/logs=0/xsstr1={{ userId }}/xsstr2={{ productIds }}/xssale={{ total }}/xsmemid={{ orderId }}/"/>'
    )
    .mapping('events');

  /**
   * Page load the retargeting pixel.
   *
   * @api public
   * @param {Page} page
   */
  AdLearnOpenPlatform.prototype.page = function() {
    var user = this.analytics.user();

    this.load('retargeting');
    if (user.id()) this.load('existingUsers');
  };

  /**
   * Track conversion events.
   *
   * @api public
   * @param {Track} track
   */
  AdLearnOpenPlatform.prototype.track = function(track) {
    var userId = this.analytics.user().id();
    var orderId = track.orderId();
    var total = track.total() && (track.total() || 0).toFixed(2);
    var productIds = this.productIds(track.products());

    var events = this.events(track.event());
    var self = this;
    each(function(event) {
      return self.load('conversion', {
        type: event,
        userId: userId || '',
        orderId: orderId || '',
        total: total || '',
        productIds: productIds || ''
      });
    }, events);
  };

  /**
   * Join all the product IDs together for AdLearnOpenPlatform.
   *
   * @api private
   * @param {Object[]} products
   * @return {string}
   */
  AdLearnOpenPlatform.prototype.productIds = function(products) {
    // TODO(ndhoule): Refactor into pluck(products, 'id')
    var ids = [];
    each(function(product) {
      ids.push(product.id);
    }, products);
    return ids.join(',');
  };

  /*
   * Exports.
   */

  module.exports = AdLearnOpenPlatform;

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":40}],40:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var clone = require('@ndhoule/clone');
  var debug = require('debug');
  var defaults = require('@ndhoule/defaults');
  var extend = require('@ndhoule/extend');
  var slug = require('slug-component');
  var protos = require('./protos');
  var statics = require('./statics');

  /**
   * Create a new `Integration` constructor.
   *
   * @constructs Integration
   * @param {string} name
   * @return {Function} Integration
   */

  function createIntegration(name) {
    /**
     * Initialize a new `Integration`.
     *
     * @class
     * @param {Object} options
     */

    function Integration(options) {
      if (options && options.addIntegration) {
        // plugin
        return options.addIntegration(Integration);
      }
      this.debug = debug('analytics:integration:' + slug(name));
      this.options = defaults(clone(options) || {}, this.defaults);
      this._queue = [];
      this.once('ready', bind(this, this.flush));

      Integration.emit('construct', this);
      this.ready = bind(this, this.ready);
      this._wrapInitialize();
      this._wrapPage();
      this._wrapTrack();
    }

    Integration.prototype.defaults = {};
    Integration.prototype.globals = [];
    Integration.prototype.templates = {};
    Integration.prototype.name = name;
    extend(Integration, statics);
    extend(Integration.prototype, protos);

    return Integration;
  }

  /**
   * Exports.
   */

  module.exports = createIntegration;

  },{"./protos":41,"./statics":42,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":43,"slug-component":1165}],41:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Emitter = require('component-emitter');
  var after = require('@ndhoule/after');
  var each = require('@ndhoule/each');
  var events = require('analytics-events');
  var every = require('@ndhoule/every');
  var fmt = require('@segment/fmt');
  var foldl = require('@ndhoule/foldl');
  var is = require('is');
  var loadIframe = require('load-iframe');
  var loadScript = require('@segment/load-script');
  var nextTick = require('next-tick');
  var normalize = require('to-no-case');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * No operation.
   */

  var noop = function noop() {};

  /**
   * Window defaults.
   */

  var onerror = window.onerror;
  var onload = null;

  /**
   * Mixin emitter.
   */

  /* eslint-disable new-cap */
  Emitter(exports);
  /* eslint-enable new-cap */

  /**
   * Initialize.
   */

  exports.initialize = function() {
    var ready = this.ready;
    nextTick(ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  exports.loaded = function() {
    return false;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  /* eslint-disable no-unused-vars */
  exports.page = function(page) {};
  /* eslint-enable no-unused-vars */

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  /* eslint-disable no-unused-vars */
  exports.track = function(track) {};
  /* eslint-enable no-unused-vars */

  /**
   * Get values from items in `options` that are mapped to `key`.
   * `options` is an integration setting which is a collection
   * of type 'map', 'array', or 'mixed'
   *
   * Use cases include mapping events to pixelIds (map), sending generic
   * conversion pixels only for specific events (array), or configuring dynamic
   * mappings of event properties to query string parameters based on event (mixed)
   *
   * @api public
   * @param {Object|Object[]|String[]} options An object, array of objects, or
   * array of strings pulled from settings.mapping.
   * @param {string} key The name of the item in options whose metadata
   * we're looking for.
   * @return {Array} An array of settings that match the input `key` name.
   * @example
   *
   * // 'Map'
   * var events = { my_event: 'a4991b88' };
   * .map(events, 'My Event');
   * // => ["a4991b88"]
   * .map(events, 'whatever');
   * // => []
   *
   * // 'Array'
   * * var events = ['Completed Order', 'My Event'];
   * .map(events, 'My Event');
   * // => ["My Event"]
   * .map(events, 'whatever');
   * // => []
   *
   * // 'Mixed'
   * var events = [{ key: 'my event', value: '9b5eb1fa' }];
   * .map(events, 'my_event');
   * // => ["9b5eb1fa"]
   * .map(events, 'whatever');
   * // => []
   */

  exports.map = function(options, key) {
    var normalizedComparator = normalize(key);
    var mappingType = getMappingType(options);

    if (mappingType === 'unknown') {
      return [];
    }

    return foldl(function(matchingValues, val, key) {
      var compare;
      var result;

      if (mappingType === 'map') {
        compare = key;
        result = val;
      }

      if (mappingType === 'array') {
        compare = val;
        result = val;
      }

      if (mappingType === 'mixed') {
        compare = val.key;
        result = val.value;
      }

      if (normalize(compare) === normalizedComparator) {
        matchingValues.push(result);
      }

      return matchingValues;
    }, [], options);
  };

  /**
   * Invoke a `method` that may or may not exist on the prototype with `args`,
   * queueing or not depending on whether the integration is "ready". Don't
   * trust the method call, since it contains integration party code.
   *
   * @api private
   * @param {string} method
   * @param {...*} args
   */

  exports.invoke = function(method) {
    if (!this[method]) return;
    var args = Array.prototype.slice.call(arguments, 1);
    if (!this._ready) return this.queue(method, args);

    this.debug('%s with %o', method, args);
    return this[method].apply(this, args);
  };

  /**
   * Queue a `method` with `args`. If the integration assumes an initial
   * pageview, then let the first call to `page` pass through.
   *
   * @api private
   * @param {string} method
   * @param {Array} args
   */

  exports.queue = function(method, args) {
    if (method === 'page' && this._assumesPageview && !this._initialized) {
      return this.page.apply(this, args);
    }

    this._queue.push({ method: method, args: args });
  };

  /**
   * Flush the internal queue.
   *
   * @api private
   */

  exports.flush = function() {
    this._ready = true;
    var self = this;

    each(function(call) {
      self[call.method].apply(self, call.args);
    }, this._queue);

    // Empty the queue.
    this._queue.length = 0;
  };

  /**
   * Reset the integration, removing its global variables.
   *
   * @api private
   */

  exports.reset = function() {
    for (var i = 0; i < this.globals.length; i++) {
      window[this.globals[i]] = undefined;
    }

    window.onerror = onerror;
    window.onload = onload;
  };

  /**
   * Load a tag by `name`.
   *
   * @param {string} name The name of the tag.
   * @param {Object} locals Locals used to populate the tag's template variables
   * (e.g. `userId` in '<img src="https://whatever.com/{{ userId }}">').
   * @param {Function} [callback=noop] A callback, invoked when the tag finishes
   * loading.
   */

  exports.load = function(name, locals, callback) {
    // Argument shuffling
    if (typeof name === 'function') { callback = name; locals = null; name = null; }
    if (name && typeof name === 'object') { callback = locals; locals = name; name = null; }
    if (typeof locals === 'function') { callback = locals; locals = null; }

    // Default arguments
    name = name || 'library';
    locals = locals || {};

    locals = this.locals(locals);
    var template = this.templates[name];
    if (!template) throw new Error(fmt('template "%s" not defined.', name));
    var attrs = render(template, locals);
    callback = callback || noop;
    var self = this;
    var el;

    switch (template.type) {
    case 'img':
      attrs.width = 1;
      attrs.height = 1;
      el = loadImage(attrs, callback);
      break;
    case 'script':
      el = loadScript(attrs, function(err) {
        if (!err) return callback();
        self.debug('error loading "%s" error="%s"', self.name, err);
      });
        // TODO: hack until refactoring load-script
      delete attrs.src;
      each(function(val, key) {
        el.setAttribute(key, val);
      }, attrs);
      break;
    case 'iframe':
      el = loadIframe(attrs, callback);
      break;
    default:
        // No default case
    }

    return el;
  };

  /**
   * Locals for tag templates.
   *
   * By default it includes a cache buster and all of the options.
   *
   * @param {Object} [locals]
   * @return {Object}
   */

  exports.locals = function(locals) {
    locals = locals || {};
    var cache = Math.floor(new Date().getTime() / 3600000);
    if (!locals.hasOwnProperty('cache')) locals.cache = cache;
    each(function(val, key) {
      if (!locals.hasOwnProperty(key)) locals[key] = val;
    }, this.options);
    return locals;
  };

  /**
   * Simple way to emit ready.
   *
   * @api public
   */

  exports.ready = function() {
    this.emit('ready');
  };

  /**
   * Wrap the initialize method in an exists check, so we don't have to do it for
   * every single integration.
   *
   * @api private
   */

  exports._wrapInitialize = function() {
    var initialize = this.initialize;
    this.initialize = function() {
      this.debug('initialize');
      this._initialized = true;
      var ret = initialize.apply(this, arguments);
      this.emit('initialize');
      return ret;
    };

    if (this._assumesPageview) this.initialize = after(2, this.initialize);
  };

  /**
   * Wrap the page method to call `initialize` instead if the integration assumes
   * a pageview.
   *
   * @api private
   */

  exports._wrapPage = function() {
    var page = this.page;
    this.page = function() {
      if (this._assumesPageview && !this._initialized) {
        return this.initialize.apply(this, arguments);
      }

      return page.apply(this, arguments);
    };
  };

  /**
   * Wrap the track method to call other ecommerce methods if available depending
   * on the `track.event()`.
   *
   * @api private
   */

  exports._wrapTrack = function() {
    var t = this.track;
    this.track = function(track) {
      var event = track.event();
      var called;
      var ret;

      for (var method in events) {
        if (has.call(events, method)) {
          var regexp = events[method];
          if (!this[method]) continue;
          if (!regexp.test(event)) continue;
          ret = this[method].apply(this, arguments);
          called = true;
          break;
        }
      }

      if (!called) ret = t.apply(this, arguments);
      return ret;
    };
  };

  /**
   * Determine the type of the option passed to `#map`
   *
   * @api private
   * @param {Object|Object[]} mapping
   * @return {String} mappingType
   */

  function getMappingType(mapping) {
    if (is.array(mapping)) {
      return every(isMixed, mapping) ? 'mixed' : 'array';
    }
    if (is.object(mapping)) return 'map';
    return 'unknown';
  }

  /**
   * Determine if item in mapping array is a valid "mixed" type value
   *
   * Must be an object with properties "key" (of type string)
   * and "value" (of any type)
   *
   * @api private
   * @param {*} item
   * @return {Boolean}
   */

  function isMixed(item) {
    if (!is.object(item)) return false;
    if (!is.string(item.key)) return false;
    if (!has.call(item, 'value')) return false;
    return true;
  }

  /**
   * TODO: Document me
   *
   * @api private
   * @param {Object} attrs
   * @param {Function} fn
   * @return {Image}
   */

  function loadImage(attrs, fn) {
    fn = fn || function() {};
    var img = new Image();
    img.onerror = error(fn, 'failed to load pixel', img);
    img.onload = function() { fn(); };
    img.src = attrs.src;
    img.width = 1;
    img.height = 1;
    return img;
  }

  /**
   * TODO: Document me
   *
   * @api private
   * @param {Function} fn
   * @param {string} message
   * @param {Element} img
   * @return {Function}
   */

  function error(fn, message, img) {
    return function(e) {
      e = e || window.event;
      var err = new Error(message);
      err.event = e;
      err.source = img;
      fn(err);
    };
  }

  /**
   * Render template + locals into an `attrs` object.
   *
   * @api private
   * @param {Object} template
   * @param {Object} locals
   * @return {Object}
   */

  function render(template, locals) {
    return foldl(function(attrs, val, key) {
      attrs[key] = val.replace(/\{\{\ *(\w+)\ *\}\}/g, function(_, $1) {
        return locals[$1];
      });
      return attrs;
    }, {}, template.attrs);
  }

  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":45,"component-emitter":1114,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],42:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Emitter = require('component-emitter');
  var domify = require('domify');
  var each = require('@ndhoule/each');
  var includes = require('@ndhoule/includes');

  /**
   * Mix in emitter.
   */

  /* eslint-disable new-cap */
  Emitter(exports);
  /* eslint-enable new-cap */

  /**
   * Add a new option to the integration by `key` with default `value`.
   *
   * @api public
   * @param {string} key
   * @param {*} value
   * @return {Integration}
   */

  exports.option = function(key, value) {
    this.prototype.defaults[key] = value;
    return this;
  };

  /**
   * Add a new mapping option.
   *
   * This will create a method `name` that will return a mapping for you to use.
   *
   * @api public
   * @param {string} name
   * @return {Integration}
   * @example
   * Integration('My Integration')
   *   .mapping('events');
   *
   * new MyIntegration().track('My Event');
   *
   * .track = function(track){
   *   var events = this.events(track.event());
   *   each(send, events);
   *  };
   */

  exports.mapping = function(name) {
    this.option(name, []);
    this.prototype[name] = function(key) {
      return this.map(this.options[name], key);
    };
    return this;
  };

  /**
   * Register a new global variable `key` owned by the integration, which will be
   * used to test whether the integration is already on the page.
   *
   * @api public
   * @param {string} key
   * @return {Integration}
   */

  exports.global = function(key) {
    this.prototype.globals.push(key);
    return this;
  };

  /**
   * Mark the integration as assuming an initial pageview, so to defer loading
   * the script until the first `page` call, noop the first `initialize`.
   *
   * @api public
   * @return {Integration}
   */

  exports.assumesPageview = function() {
    this.prototype._assumesPageview = true;
    return this;
  };

  /**
   * Mark the integration as being "ready" once `load` is called.
   *
   * @api public
   * @return {Integration}
   */

  exports.readyOnLoad = function() {
    this.prototype._readyOnLoad = true;
    return this;
  };

  /**
   * Mark the integration as being "ready" once `initialize` is called.
   *
   * @api public
   * @return {Integration}
   */

  exports.readyOnInitialize = function() {
    this.prototype._readyOnInitialize = true;
    return this;
  };

  /**
   * Define a tag to be loaded.
   *
   * @api public
   * @param {string} [name='library'] A nicename for the tag, commonly used in
   * #load. Helpful when the integration has multiple tags and you need a way to
   * specify which of the tags you want to load at a given time.
   * @param {String} str DOM tag as string or URL.
   * @return {Integration}
   */

  exports.tag = function(name, tag) {
    if (tag == null) {
      tag = name;
      name = 'library';
    }
    this.prototype.templates[name] = objectify(tag);
    return this;
  };

  /**
   * Given a string, give back DOM attributes.
   *
   * Do it in a way where the browser doesn't load images or iframes. It turns
   * out domify will load images/iframes because whenever you construct those
   * DOM elements, the browser immediately loads them.
   *
   * @api private
   * @param {string} str
   * @return {Object}
   */

  function objectify(str) {
    // replace `src` with `data-src` to prevent image loading
    str = str.replace(' src="', ' data-src="');

    var el = domify(str);
    var attrs = {};

    each(function(attr) {
      // then replace it back
      var name = attr.name === 'data-src' ? 'src' : attr.name;
      if (!includes(attr.name + '=', str)) return;
      attrs[name] = attr.value;
    }, el.attributes);

    return {
      type: el.tagName.toLowerCase(),
      attrs: attrs
    };
  }

  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":46}],43:[function(require,module,exports){
  (function (process){(function (){
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = require('./debug');
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit')

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }

  }).call(this)}).call(this,require('_process'))
  },{"./debug":44,"_process":1149}],44:[function(require,module,exports){

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require('ms');

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    return debug;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }

  },{"ms":47}],45:[function(require,module,exports){

  module.exports = {
    // Promotions
    promotionViewed: /^[ _]?promotion[ _]?viewed?[ _]?$/i,
    viewedPromotion: /^[ _]?viewed[ _]?promotion?[ _]?$/i,
    promotionClicked: /^[ _]?promotion[ _]?clicked?[ _]?$/i,
    clickedPromotion: /^[ _]?clicked[ _]?promotion?[ _]?$/i,
    // Browsing
    productsSearched: /^[ _]?products[ _]?searched[ _]?$/i,
    productListViewed: /^[ _]?product[ _]?list[ _]?viewed[ _]?$/i,
    productListFiltered: /^[ _]?product[ _]?list[ _]?filtered[ _]?$/i,
    viewedProductCategory: /^[ _]?viewed[ _]?product[ _]?category[ _]?$/i,
    viewedProductDetails: /^[ _]?viewed[ _]?product[ _]?details?[ _]?$/i,
    // Core Ordering
    productClicked: /^[ _]?product[ _]?clicked[ _]?$/i,
    clickedProduct: /^[ _]?clicked[ _]?product[ _]?$/i,
    productViewed: /^[ _]?product[ _]?viewed[ _]?$/i,
    viewedProduct: /^[ _]?viewed[ _]?product[ _]?$/i,
    productAdded: /^[ _]?product[ _]?added[ _]?$/i,
    addedProduct: /^[ _]?added[ _]?product[ _]?$/i,
    productRemoved: /^[ _]?product[ _]?removed[ _]?$/i,
    removedProduct: /^[ _]?removed[ _]?product[ _]?$/i,
    cartViewed: /^[ _]?cart[ _]?viewed[ _]?$/i,
    orderStarted: /^[ _]?order[ _]?started[ _]?$/i,
    startedOrder: /^[ _]?started[ _]?order[ _]?$/i,
    orderUpdated: /^[ _]?order[ _]?updated[ _]?$/i,
    updatedOrder: /^[ _]?updated[ _]?order[ _]?$/i,
    orderCompleted: /^[ _]?order[ _]?completed[ _]?$/i,
    completedOrder: /^[ _]?completed[ _]?order[ _]?$/i,
    orderRefunded: /^[ _]?order[ _]?refunded[ _]?$/i,
    refundedOrder: /^[ _]?refunded[ _]?order[ _]?$/i,
    orderCancelled: /^[ _]?order[ _]?cancelled[ _]?$/i,
    paymentInfoAdded: /^[ _]?payment[ _]?info[ _]?added[ _]?$/i,
    checkoutStarted: /^[ _]?checkout[ _]?started[ _]?$/i,
    checkoutStepViewed: /^[ _]?checkout[ _]?step[ _]?viewed[ _]?$/i,
    viewedCheckoutStep: /^[ _]?viewed[ _]?checkout[ _]?step[ _]?$/i,
    checkoutStepCompleted: /^[ _]?checkout[ _]?step[ _]?completed[ _]?$/i,
    completedCheckoutStep: /^[ _]?completed[ _]?checkout[ _]?step[ _]?$/i,
    // Coupons
    couponEntered: /^[ _]?coupon[ _]?entered[ _]?$/i,
    couponApplied: /^[ _]?coupon[ _]?applied[ _]?$/i,
    couponDenied: /^[ _]?coupon[ _]?denied[ _]?$/i,
    couponRemoved: /^[ _]?coupon[ _]?removed[ _]?$/i,
    // Wishlisting
    productAddedToWishlist: /^[ _]?product[ _]?added[ _]?to[ _]?wishlist[ _]?$/i,
    wishlistProductRemoved: /^[ _]?wishlist[ _]?product[ _]?removed[ _]?$/i,
    wishlistProductAddedToCart: /^[ _]?wishlist[ _]?product[ _]?added[ _]?to[ _]?cart[ _]?$/i,
    // Sharing
    productShared: /^[ _]?product[ _]?shared[ _]?$/i,
    cartShared: /^[ _]?cart[ _]?shared[ _]?$/i,
    // Reviewing
    productRemoved: /^[ _]?product[ _]?removed[ _]?$/i,
    // App Lifecycle
    applicationInstalled: /^[ _]?application[ _]?installed[ _]?$/i,
    applicationUpdated: /^[ _]?application[ _]?updated[ _]?$/i,
    applicationOpened: /^[ _]?application[ _]?opened[ _]?$/i,
    applicationBackgrounded: /^[ _]?application[ _]?backgrounded[ _]?$/i,
    applicationUninstalled: /^[ _]?application[ _]?uninstalled[ _]?$/i,
    // App Campaign and Referral Events
    installAttributed: /^[ _]?install[ _]?attributed[ _]?$/i,
    deepLinkOpened: /^[ _]?deep[ _]?link[ _]?opened[ _]?$/i,
    pushNotificationReceived: /^[ _]?push[ _]?notification[ _]?received[ _]?$/i,
    pushNotificationTapped: /^[ _]?push[ _]?notification[ _]?received[ _]?$/i,
    pushNotificationBounced: /^[ _]?push[ _]?notification[ _]?bounced[ _]?$/i
  };

  },{}],46:[function(require,module,exports){

  /**
   * Expose `parse`.
   */

  module.exports = parse;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug = false;
  var bugTestDiv;
  if (typeof document !== 'undefined') {
    bugTestDiv = document.createElement('div');
    // Setup
    bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
    bugTestDiv = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
  };

  map.td =
  map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map.option =
  map.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map.thead =
  map.tbody =
  map.colgroup =
  map.caption =
  map.tfoot = [1, '<table>', '</table>'];

  map.polyline =
  map.ellipse =
  map.polygon =
  map.circle =
  map.text =
  map.line =
  map.path =
  map.rect =
  map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);

    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = map[tag] || map._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }

    return fragment;
  }

  },{}],47:[function(require,module,exports){
  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    return plural(ms, d, 'day') ||
      plural(ms, h, 'hour') ||
      plural(ms, m, 'minute') ||
      plural(ms, s, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  },{}],48:[function(require,module,exports){
  'use strict';

  /**
   * Dependencies
   */

  var integration = require('@segment/analytics.js-integration');
  var dot = require('obj-case');
  var each = require('@ndhoule/each');
  var iso = require('@segment/to-iso-string');
  var Track = require('segmentio-facade').Track;
  var trample = require('@segment/trample');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Keys that get applied to `window.s` object,
   * but need to be cleared out before every call.
   *
   * We need to keep this array to share state because otherwise,
   * we can't delete existing keys on the window.s object in between
   * `.track()` and `.page()` calls since they may set different fields.
   * This prevents properties of `.page()` call being sent along with
   * `.track()` calls.
   */

  var dynamicKeys = [];

  /**
   * Expose `Adobe Analytics`.
   */

  var AdobeAnalytics = (module.exports = integration('Adobe Analytics'));

  /**
   * Uses the default `field` from the `window.s` object if it exists,
   * otherwise uses the passed in `value`. Also adds the field to
   * `this.sOptions` and `this.options`
   *
   * @api private
   * @param {string} field
   * @param {*} value
   */

  AdobeAnalytics.sOption = function(field, value) {
    var s = window.s;
    var isValid = s && has.call(s, field) && !isEmptyString(field);

    var newValue = isValid ? s[field] : value;

    // TODO: Consider removing this. Not sure why we are doing this since it has no future reference
    this.prototype.sOptions = this.prototype.sOptions || {};
    this.prototype.sOptions[field] = newValue;

    // Set field and value to this.options
    return this.option(field, newValue);
  };

  /**
   * Add our Adobe Analytics instance
   */

  AdobeAnalytics.global('s')
    .global('s_gi')
    .option('events', {})
    .option('eVars', {})
    .option('props', {})
    .option('hVars', {})
    .option('lVars', {})
    .option('merchEvents', [])
    .option('contextValues', {})
    .option('customDataPrefix', '')
    .option('reportSuiteId', window.s_account)
    .option('timestampOption', 'enabled')
    .option('productIdentifier', 'name')
    .option('marketingCloudOrgId', null)
    .option('enableTrackPageName', true)
    .option('disableVisitorId', false)
    .option('preferVisitorId', false)
    .option('heartbeatTrackingServerUrl', '')
    .option('ssl', false)

    .sOption('visitorID')
    .sOption('channel')
    .sOption('campaign')
    .sOption('state')
    .sOption('zip')
    .sOption('pageName')
    .sOption('trackingServer')
    .sOption('trackingServerSecure')
    .sOption('visitorMigrationKey')
    .sOption('visitorMigrationServer')
    .sOption('visitorNamespace')
    .sOption('dc')
    .sOption('charSet', 'ISO-8859-1')
    .sOption('currencyCode', 'USD')
    .sOption('trackDownloadLinks', true)
    .sOption('trackExternalLinks', true)
    .sOption('trackInlineStats', true)
    .sOption(
      'linkDownloadFileTypes',
      'exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx'
    )
    .sOption('linkInternalFilters')
    .sOption('linkLeaveQueryString', false)
    .sOption('linkTrackVars', 'None')
    .sOption('linkTrackEvents', 'None')
    .sOption('usePlugins', true)
    .tag(
      'default',
      '<script src="//cdn.segment.com/integrations/adobe-analytics/appmeasurement-2.20.0.js">'
    )
    .tag(
      'heartbeat',
      '<script src="//cdn.segment.com/integrations/adobe-analytics/appmeasurement-2.20.0-heartbeat.js">'
    );

  /**
   * Initialize.
   *
   * @api public
   */

  AdobeAnalytics.prototype.initialize = function() {
    var options = this.options;
    var self = this;

    // Lowercase all keys of event map for easy matching later
    if (!Array.isArray(options.events)) lowercaseKeys(options.events);

    // In case this has been defined already
    window.s_account = window.s_account || options.reportSuiteId;

    // Initialize a window object that can be used to update the playhead value of a session
    // WITHOUT sending several 'Video Content Playing' events. (see line 1242)
    window._segHBPlayheads = {};

    // Load the larger Heartbeat script only if the customer has it enabled in settings.
    // This file is considerably bigger, so this check is necessary.
    if (options.heartbeatTrackingServerUrl) {
      this.load('heartbeat', function() {
        var s = window.s;
        s.trackingServer = s.trackingServer || options.trackingServerUrl;
        s.trackingServerSecure =
          s.trackingServerSecure || options.trackingServerSecureUrl;

        // visitorAPI.js is included in our rendering of appmeasurement.js to prevent race conditions
        // current .load() function does not guarantee synchronous loading which AA requires
        // visitorAPI is loaded before appmeasurement.js and initialized after both scripts were loaded synchronously
        if (
          options.marketingCloudOrgId &&
          window.Visitor &&
          typeof window.Visitor.getInstance === 'function'
        ) {
          s.visitor = window.Visitor.getInstance(options.marketingCloudOrgId, {
            trackingServer: window.s.trackingServer || options.trackingServerUrl,
            trackingServerSecure:
              window.s.trackingServerSecure || options.trackingServerSecureUrl
          });

          // Set up for Heartbeat
          self.mediaHeartbeats = {};
          self.adBreakCounts = {};
          self.qosData = {};
          self.playhead = 0;
          self.adBreakInProgress = false;
          self.heartbeatEventMap = {
            // Segment spec'd event: Heartbeat function
            'video playback started': initHeartbeat,
            'video content started': heartbeatVideoStart,
            'video playback paused': heartbeatVideoPaused,
            'video playback resumed': heartbeatVideoStart, // Treated as a 'play' as well.
            'video content completed': heartbeatVideoComplete,
            'video playback completed': heartbeatSessionEnd,
            'video ad started': heartbeatAdStarted,
            'video ad completed': heartbeatAdCompleted,
            'video ad skipped': heartbeatAdSkipped,
            'video playback seek started': heartbeatSeekStarted,
            'video playback seek completed': heartbeatSeekCompleted,
            'video playback buffer started': heartbeatBufferStarted,
            'video playback buffer completed': heartbeatBufferCompleted,
            'video quality updated': heartbeatQualityUpdated,
            'video content playing': heartbeatUpdatePlayhead,
            'video playback interrupted': heartbeatVideoPaused
          };
        }

        self.ready();
      });
    } else {
      this.load('default', function() {
        var s = window.s;
        s.trackingServer = s.trackingServer || options.trackingServerUrl;
        s.trackingServerSecure =
          s.trackingServerSecure || options.trackingServerSecureUrl;

        // visitorAPI.js is included in our rendering of appmeasurement.js to prevent race conditions
        // current .load() function does not guarantee synchronous loading which AA requires
        // visitorAPI is loaded before appmeasurement.js and initialized after both scripts were loaded synchronously
        if (
          options.marketingCloudOrgId &&
          window.Visitor &&
          typeof window.Visitor.getInstance === 'function'
        ) {
          s.visitor = window.Visitor.getInstance(options.marketingCloudOrgId, {
            trackingServer: window.s.trackingServer || options.trackingServerUrl,
            trackingServerSecure:
              window.s.trackingServerSecure || options.trackingServerSecureUrl
          });
        }
        self.ready();
      });
    }
  };

  /**
   * Adobe Analytics is loaded if the `window.s_gi` function exists.
   *
   * @return {Boolean} loaded
   */

  AdobeAnalytics.prototype.loaded = function() {
    return !!window.s_gi;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  AdobeAnalytics.prototype.page = function(page) {
    // Delete any existing keys on window.s from previous call
    clearKeys(dynamicKeys);

    // Set the page name
    var pageName = page.fullName();
    // TODO: for nameless analytics.page(), pageName is `undefined`
    // Should we be setting or sending something else here?
    // When window.s.pageName is not set, AA falls back on url which is bad.
    // Not sure what happens when it is sent as `undefined` (not string)
    // Either way, any change here would be breaking
    window.s.pageName = pageName;
    window.s.referrer = page.referrer();

    // Visitor ID aka AA's concept of `userId`.
    // This is not using `update()` so once it is set, it will be sent
    // with `.track()` calls as well.
    // visitorId is not supported for timestamped hits
    // https://marketing.adobe.com/resources/help/en_US/sc/implement/timestamps-overview.html
    if (!this.options.disableVisitorId) {
      var userId = this.analytics.user().id();
      if (userId) {
        if (this.options.timestampOption === 'disabled')
          window.s.visitorID = userId;
        if (
          this.options.timestampOption === 'hybrid' &&
          this.options.preferVisitorId
        )
          window.s.visitorID = userId;
      }
    }

    // Attach some variables on the `window.s` to be sent with the call
    update(pageName, 'events');
    updateCommonVariables(page, this.options);

    calculateTimestamp(page, this.options);

    // Check if any properties match mapped eVar, prop, or hVar in options
    var props = extractProperties(page, this.options);
    // Attach them to window.s and push to dynamicKeys
    each(update, props);

    // Update `s.contextData`
    updateContextData(page, this.options);

    // actually make the "page" request, just a single "t" not "tl"
    // "t" will send all variables on the window.s while "tl" does not
    // "t" will increment pageviews while "tl" does not
    window.s.t();
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  AdobeAnalytics.prototype.track = function(track) {
    // Delete any existing keys on window.s from previous call
    clearKeys(dynamicKeys);

    var eventName = track.event().toLowerCase();

    // Map to Heartbeat events if enabled.
    if (this.options.heartbeatTrackingServerUrl) {
      var heartbeatFunc = this.heartbeatEventMap[eventName];
      if (heartbeatFunc) {
        heartbeatFunc.call(this, track);
        return; // Heartbeat calls AA itself, so returning here likely prevents dupe data.
      }
    }
    // Check if Segment event is mapped in settings; if not, noop
    var isMapped = this.isMapped(eventName);
    if (!isMapped) {
      return;
    }

    // 'cart opened' is not covered in our ecommerce spec and was one-off specced for this integration
    if (eventName === 'cart opened' || eventName === 'opened cart') {
      this.processEvent(track, 'scOpen');
    } else {
      this.processEvent(track);
    }
  };

  /**
   * Viewed Product.
   *
   * https://segment.com/docs/spec/ecommerce/#viewed-product
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.productViewed = function(track) {
    clearKeys(dynamicKeys);
    this.processEvent(track, 'prodView');
  };

  AdobeAnalytics.prototype.productListViewed = function(track) {
    clearKeys(dynamicKeys);
    this.processEvent(track, 'prodView');
  };

  /**
   * Product Added
   *
   * https://segment.com/docs/spec/ecommerce/#added-removed-product
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.productAdded = function(track) {
    clearKeys(dynamicKeys);
    this.processEvent(track, 'scAdd');
  };

  /**
   * Product Removed
   *
   * https://segment.com/docs/spec/ecommerce/#added-removed-product
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.productRemoved = function(track) {
    clearKeys(dynamicKeys);
    this.processEvent(track, 'scRemove');
  };

  /**
   * Order Completed
   * https://segment.com/docs/spec/ecommerce/#completing-an-order
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.orderCompleted = function(track) {
    clearKeys(dynamicKeys);

    var props = track.properties();
    update(props.purchaseId || track.orderId(), 'purchaseID');
    update(props.transactionId || track.orderId(), 'transactionID');

    this.processEvent(track, 'purchase');
  };

  /**
   * Cart Viewed
   *
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.cartViewed = function(track) {
    clearKeys(dynamicKeys);
    this.processEvent(track, 'scView');
  };

  /**
   * Checkout Started
   *
   * @api public
   * @param {Track} Track
   */

  AdobeAnalytics.prototype.checkoutStarted = function(track) {
    clearKeys(dynamicKeys);

    var props = track.properties();
    update(props.purchaseId || track.orderId(), 'purchaseID');
    update(props.transactionId || track.orderId(), 'transactionID');

    this.processEvent(track, 'scCheckout');
  };

  /**
   * Update window variables and then fire Adobe track call
   *
   * @param {*} msg Segment Page or Track payload
   * @param {string} adobeEvent Adobe standard event
   */

  AdobeAnalytics.prototype.processEvent = function(msg, adobeEvent) {
    var merchEvents = getMerchConfig(msg, this.options);
    var properties = msg.properties();

    // sets `window.s.products`
    setProductsString(
      msg.event(),
      properties,
      adobeEvent,
      this.options.productIdentifier,
      merchEvents.configProductMerchEvent,
      merchEvents.productEVars
    );

    updateContextData(msg, this.options);

    var eVarEvent = dot(this.options.eVars, msg.event());
    update(msg.event(), eVarEvent);

    // sets `window.s.events`
    setEventsString(
      msg.event(),
      properties,
      this.options.events,
      merchEvents.configMerchEvents,
      adobeEvent
    );

    updateCommonVariables(msg, this.options);

    calculateTimestamp(msg, this.options);

    var mappedProps = extractProperties(msg, this.options);
    each(update, mappedProps);

    if (msg.currency() !== 'USD') update(msg.currency(), 'currencyCode');

    window.s.linkTrackVars = dynamicKeys.join(',');

    // Send request off to Adobe Analytics
    // 1st param: sets 500ms delay to give browser time, also means you are tracking something other than a href link
    // 2nd param: 'o' means 'Other' as opposed to 'd' for 'Downloads' and 'e' for Exit links
    // 3rd param: link name you will see in reports
    window.s.tl(true, 'o', msg.event());
  };

  /**
   * Update a number of Adobe Analytics common variables on window.s to be
   * sent with the call
   *
   * @api private
   * @param {Facade} facade
   */

  function updateCommonVariables(facade, options) {
    var properties = facade.properties();
    var campaign = facade.proxy('context.campaign.name') || properties.campaign;

    update(properties.channel || options.channel, 'channel');
    update(campaign || options.campaign, 'campaign');
    update(properties.state || options.state, 'state');
    update(properties.zip || options.zip, 'zip');

    // Some customers have said that adding pageName to s.tl() calls are having adverse effects on their pageview reporting
    // But since it is not reported by all users, we will make this an option.
    if (options.enableTrackPageName && facade.type() === 'track')
      update(
        properties.pageName ||
          options.pageName ||
          facade.proxy('context.page.title'),
        'pageName'
      );
  }

  /**
   * Update the AA variable and explicitly mark the link vars
   *
   * @api private
   * @param {String, String} value, key
   * @return {string} window.s[key]
   */

  function update(value, key) {
    // Make sure we have everything we need
    if (!key || value === undefined || value === null || value === '') return;
    // Push each key to be sent later with the payload
    // Only keys listed here will be parsed from the window.s object when data is sent via s.tl() aka `.track()` calls
    dynamicKeys.push(key);
    // Set Adobe Analytics variables on the window.s to be sent
    window.s[key] = value.toString();
  }

  /**
   * Update window.s.timestamp
   *
   * Reporting suites can either be timestamp enabled, timestamp optional or timestamp disabled
   * Timestamps cannot be updated if you are setting the visitorId which is why we check that timestamp is preferred for hybrid suites
   * @api private
   * @param {Facade} msg
   * @param {Object} options
   */

  function calculateTimestamp(msg, options) {
    var setting = options.timestampOption;
    var properties = msg.properties();
    var timestamp = properties.timestamp || msg.timestamp();
    // Timestamp must be either unix or iso-8601
    if (typeof timestamp !== 'string') timestamp = iso(timestamp);
    if (setting === 'disabled') return;
    if (setting === 'enabled') update(timestamp, 'timestamp');
    if (setting === 'hybrid' && !options.preferVisitorId)
      update(timestamp, 'timestamp');
  }

  /**
   * Updates the "events" property on window.s.
   *
   * It accepts a "predefinedEvent" event which is an adobe-specific event like "prodView".
   * Additional events will be custom "eventXXX" events specified by the user in
   * their configuration.
   *
   * @api private
   * @param  {String} eventName             The Segment event
   * @param  {Object} properties            The event payloads properties
   * @param  {Object|Array} eventsMap       The configured events mapping
   * @param  {Object|Array} merchEventsMap  The configured merchEvents setting mapping
   * @param  {String} predefinedEvent  An Adobe-specific event (if applicable)
   */

  function setEventsString(
    eventName,
    properties,
    eventsMap,
    merchEventsMap,
    predefinedEvent
  ) {
    var event = eventName.toLowerCase();
    var adobeEvents = predefinedEvent ? [predefinedEvent] : [];

    if (eventsMap.length > 0) {
      // iterate through event map and pull adobe events corresponding to the incoming segment event
      each(function(eventMapping) {
        if (eventMapping.segmentEvent.toLowerCase() === event) {
          each(function(event) {
            if (adobeEvents.indexOf(event) <= 0) {
              adobeEvents.push(event);
            }
          }, eventMapping.adobeEvents);
        }
      }, eventsMap);
    }

    if (merchEventsMap.length > 0) {
      // append adobeEvents with merchMap (currency and counter events)
      each(function(merchMapping) {
        var merchMap = mapMerchEvents(merchMapping, properties);
        each(function(merchEvent) {
          if (adobeEvents.indexOf(merchEvent) <= 0) {
            adobeEvents.push(merchEvent);
          }
        }, merchMap);
      }, merchEventsMap);
    }

    adobeEvents = adobeEvents.filter(function(item) {
      return !!item;
    });
    var value = adobeEvents.join(',');
    update(value, 'events');
    window.s.linkTrackEvents = value;
  }

  /**
   * Update window.s.contextData from event properties and context.
   *
   * Context variables will only be inserted if listed in the "Context Data
   * Variables" mapping. Properties will all be included, but will be prefixed
   * with the "Context Data Property Prefix" setting.
   *
   * @api private
   * @param {Object} context
   */

  function updateContextData(facade, options) {
    window.s.contextData = {};

    // All properties, prefixed with `options.customDataPrefix`.
    var properties = trample(facade.properties());
    var propertyPrefix = options.customDataPrefix
      ? options.customDataPrefix + '.'
      : '';
    each(function(value, key) {
      addContextDatum(propertyPrefix + key, value);
    }, properties);

    // Context variables named in settings.
    //
    // There is a bug here, but it must be maintained. `extractProperties` will
    // look at *all* our mappings, but only the `contextValues` mapping should be
    // used here.
    var contextProperties = extractProperties(facade, options, 'context');
    each(function(value, key) {
      if (!key || value === undefined || value === null || value === '') {
        return;
      }

      // If context data values are booleans then stringify them.
      // Adobe's SDK seems to reject a false boolean value. Stringifying is
      // acceptable since these values are appended as query strings anyway.
      if (typeof value === 'boolean') {
        addContextDatum(key, value.toString());
        return;
      }

      addContextDatum(key, value);
    }, contextProperties);
  }

  /**
   * Add a single key-value pair to the AA `s.contextData`, and append the key to
   * `dynamicKeys`.
   *
   * Be sure to use `dynamicKeys` to construct `s.trackLinkVars`, or calls to
   * `trackLink`/`tl` will not include this value.
   *
   * @api private
   * @param {String} key
   * @param {String} value
   */

  function addContextDatum(key, value) {
    window.s.contextData[key] = value;
    dynamicKeys.push('contextData.' + key);
  }

  /**
   *
   * Map event level (order wide) currency & incrementor events.
   * https://docs.adobe.com/content/help/en/analytics/implementation/javascript-implementation/variables-analytics-reporting/page-variables.html
   * Example input:
      "merchEvents": [
        {
          "adobeEvent": "event1",
          "valueScope": "event",
          "segmentProperty": ""
        },
        {
          "adobeEvent": "event34",
          "valueScope": "event",
          "segmentProperty": "total"
        },
        {
          "adobeEvent": "event2",
          "valueScope": "product",
          "segmentProperty": "products.price"
        }
      ]
   *
   * Example output: [event1,event34=20,event2]
   * @api private
   * @param {Objeect|Array} merchEvents
   * @param {Properties} props
   * @return {Object|Array} An array  of Adobe eventts, some may have values.
   */

  function mapMerchEvents(merchEvent, props) {
    var merchMap = [];
    if (!merchEvent) {
      return merchMap;
    }

    if (merchEvent.valueScope === 'event') {
      if (merchEvent.segmentProperty in props) {
        var eventString =
          merchEvent.adobeEvent + '=' + String(props[merchEvent.segmentProperty]);
        merchMap.push(eventString);
      } else if (!merchEvent.segmentProperty) {
        // To account for  event with no value
        merchMap.push(merchEvent.adobeEvent);
      }
    } else {
      // If the valueScope is products, the Adobe event must
      // also be passed in on s.events as well, but without a value
      merchMap.push(merchEvent.adobeEvent);
    }
    return merchMap;
  }

  /**
   * Extract values from  `settings.merchEvents`.
   *
   * Example input:
    settings.merchEvents = [
          {
            'segmentEvent': 'Order Completed',
            'merchEvents': [
              {
                'adobeEvent': 'event3',
                'valueScope': 'event',
                'segmentProperty': 'total'
              }
            ],
            'productEVars': [
              {
                'key': 'products.price',
                'value': 'eVar32'
              }
            ]
          }
        ]
   * @api private
   * @param {Object} msg
   * @param {Object} settings
   * @return {Object}
   */

  function getMerchConfig(msg, settings) {
    var eventName = msg.event().toLowerCase();
    var mapping = (settings.merchEvents || []).find(function(setting) {
      return setting.segmentEvent.toLowerCase() === eventName;
    });

    var config = {
      configProductMerchEvent: [],
      configMerchEvents: [],
      productEVars: []
    };

    if (mapping) {
      config.configProductMerchEvent = mapping.merchEvents;
      config.configMerchEvents = dedupeMerchEventSettings(
        mapping.merchEvents || []
      );
      config.productEVars = mapping.productEVars;
    }
    return config;
  }

  /**
  * Dedupe  Merch  Event Setting
  * Example input:
    "merchEvents": [
        {
          "adobeEvent": "event1",
          "valueScope": "product",
          "segmentProperty": "products.sku"
        },
        {
          "adobeEvent": "event1",
          "valueScope": "event",
          "segmentProperty": "total"
        }
      ]
  * @param {Array} configMerchEvents
  * @return {Array}
  */

  function dedupeMerchEventSettings(configMerchEvents) {
    var dedupeSettings = {};
    each(function(eventObject) {
      var existingEventObject = dedupeSettings[eventObject.adobeEvent];
      if (
        !existingEventObject ||
        (existingEventObject.valueScope === 'product' &&
          eventObject.valueScope === 'event')
      ) {
        dedupeSettings[eventObject.adobeEvent] = eventObject;
      }
    }, configMerchEvents);

    var res = [];
    for (var adobeEvent in dedupeSettings) {
      if (dedupeSettings[adobeEvent]) {
        res.push(dedupeSettings[adobeEvent]);
      }
    }
    return res;
  }

  /**
   * Clear last keys used with Adobe Analytics.
   *
   * @api private
   * @param {Array} keys
   */

  function clearKeys(keys) {
    each(function(linkVar) {
      delete window.s[linkVar];
    }, keys);
    // Clears the array passed in
    keys.length = 0; //eslint-disable-line
  }

  /**
   * 1. Extracts properties and context values for `window.s` for `page` and `track` calls.
   * 2. Extracts fields to update custom content metadata on video heartbeat events (from context & properties).
   * 3. Extracts fields from context object to update context data ie. `window.s.contextData`.
   *
   * @api private
   * @param {Facade} facade
   * @param {Object} options
   * @param {String} propType
   */

  function extractProperties(facade, options, propType) {
    var result = {};
    var mappings = [
      options.eVars,
      options.props,
      options.hVars,
      options.lVars,
      options.contextValues
    ];

    var topLevelProperties = ['messageId', 'anonymousId', 'event'];

    var props = facade.properties();
    if (propType === 'mergedPropContext') {
      props = merge(trample(facade.properties()), trample(facade.context()));
    } else if (propType === 'context') {
      props = trample(facade.context());
    }

    // Iterate through each variable mappings to find matching props
    for (var x = 0; x < mappings.length; x++) {
      each(match, mappings[x]);
    }

    function match(mappedValue, mappedKey) {
      var value = dot(props, mappedKey);
      // On track and page calls the propType here will be empty. On video HB calls the propTyp will
      // be 'mergedPropContext'. On those events we use  the extracted properties from this fxn to explicitly
      // map link vars on `window.s` object.
      if (topLevelProperties.includes(mappedKey) && propType !== 'context') {
        value = facade.proxy(mappedKey);
      }

      // When we are checking the context object for segment property mappings (updateContextData)
      // we only want set top level fields to Context Data Variables.
      var contextValueKeys = Object.keys(options.contextValues);
      if (
        topLevelProperties.includes(mappedKey) &&
        propType === 'context' &&
        contextValueKeys.includes(mappedKey)
      ) {
        value = facade.proxy(mappedKey);
      }
      var isarr = Array.isArray(value);
      // make sure it's an acceptable data type
      if (
        value !== null &&
        !isFunction(value) &&
        (typeof value !== 'object' || isarr)
      ) {
        // list variables should be joined by commas if sent as arrays
        if (/^list\d+$/.test(mappedValue) && isarr) value = value.join();

        result[mappedValue] = value;
      }
    }

    return result;
  }

  /**
   * Format product string to set `window.s.products`.
   *
   * @api private
   * @param {string} eventName
   * @param {Prooperties} properties
   * @param {string} adobeEvent
   * @param {string} identifier
   * @param {Object|Array} productMerchEvents
   * @param {Object|Array} productEVars
   */

  function setProductsString(
    eventName,
    properties,
    adobeEvent,
    identifier,
    productMerchEvents,
    productEVars
  ) {
    var singleProductEvent =
      adobeEvent === 'scAdd' ||
      adobeEvent === 'scRemove' ||
      (adobeEvent === 'prodView' && eventName !== 'Product List Viewed');

    // Map to Adobe non-predefined single product event when merchEvents or productEVars is configured.
    var isSingleProductEvent =
      (productMerchEvents.length || productEVars.length) &&
      !Array.isArray(properties.products);

    var productFields =
      singleProductEvent || isSingleProductEvent
        ? [properties]
        : properties.products;

    mapProducts(
      productFields,
      identifier,
      productEVars,
      productMerchEvents,
      properties
    );
  }

  /**
   * Format products string and set formatted string as value of `window.s.products`.
   *
   * @param {Array} products
   * @param {string} identifier
   * @param {Object|Array} productEVars Array of objects
   * @param {Object|Array} merchEvents Array of objects
   * @param {Properties} properties
   * @return {string}
   * @api private
   */

  function mapProducts(
    products,
    identifier,
    productEVars,
    merchEvents,
    properties
  ) {
    if (!Array.isArray(products)) return;
    var productString = products.map(function(productProperties) {
      var product = new Track({ properties: productProperties });
      var category = product.category() || '';
      var quantity = product.quantity() != null ? product.quantity() : 1;
      // This logic produces NaN results when price is not passed in.
      // This functionality has been in place for too long to simply correct
      // without risking introducing a regression.
      var total = (product.price() * quantity).toFixed(2);
      var item = product[identifier]();
      // support ecom spec v2 when identifier setting == 'id'
      // ecom spec v2 supports object_id convention
      if (identifier === 'id') {
        item = product.productId() || product.id();
      }

      var eventString = '';
      if (merchEvents && merchEvents.length) {
        // to account for top level properties and nested products,
        // we pass in properties and props, a product within products.
        eventString = mapProductEvents(
          merchEvents,
          properties,
          productProperties
        );
      }

      // Format merchandizing eVars:
      // https://docs.adobe.com/content/help/en/analytics/components/variables/merchandising-variables/var-merchandising-impl.html
      var productEVarstring = '';
      if (productEVars && productEVars.length) {
        // We send the entire properties object, because the setting
        // respects the input of products.price, or price for the
        // top level property.
        productEVarstring = mapProductEVars(
          productEVars,
          properties,
          productProperties
        );
      }
      // Note that product level currency and counter events preceed product eVars.
      // Ex: s.products="Category;ABC123;1;10;event1=1.99|event2=25;evar1=2 Day Shipping|evar2=3 Stars"
      if (eventString !== '' || productEVarstring !== '') {
        var test = [
          category,
          item,
          quantity,
          total,
          eventString,
          productEVarstring
        ].map(function(value) {
          if (value == null) {
            return String(value);
          }
          return value;
        });
        return test.join(';');
      }
      return [category, item, quantity, total]
        .map(function(value) {
          if (value == null) {
            return String(value);
          }
          return value;
        })
        .join(';');
    });
    update(productString, 'products');
  }

  /**
   * Map product-level currency * counter events.
   * https://docs.adobe.com/content/help/en/analytics/implementation/javascript-implementation/variables-analytics-reporting/page-variables.html
   *
   * Example input:
      "merchEvents": [
        {
          "adobeEvent": "event1",
          "valueScope": "product",
          "segmentProperty": "products.foo"
        },
        {
          "adobeEvent": "event2",
          "valueScope": "product",
          "segmentProperty": "priceStatus"
        },
        {
          "adobeEvent": "event34",
          "valueScope": "event",
          "segmentProperty": "products.price"
        },
        {
          "adobeEvent": "event2",
          "valueScope": "event",
          "segmentProperty": ""
        }
      ]
   * @param {Array} merchEvents
   * @param {Object} props
   * @param {Object} product
   * @return {String}
   * @api private
   */

  function mapProductEvents(merchEvents, props, product) {
    var merchMap = [];
    var eventString;

    each(function(event) {
      if (event.valueScope === 'product') {
        // Respect what the customer configures in the setting.
        // ex. products.cart_id
        // Only check products if "products." configured in settings.
        if (!event.segmentProperty) {
          // If the customer did not indicate a Segment Property in their settings to
          // associate with the incrementor we will return early.
          return merchMap;
        }
        if (event.segmentProperty.startsWith('products.')) {
          var value = getProductField(event.segmentProperty, product);
          if (value && value !== 'undefined') {
            eventString = event.adobeEvent + '=' + value;
            merchMap.push(eventString);
          }
        } else if (event.segmentProperty in props) {
          eventString =
            event.adobeEvent + '=' + String(props[event.segmentProperty]);
          merchMap.push(eventString);
        }
      }
    }, merchEvents);

    return merchMap.join('|');
  }

  /**
  * Map product merchandising eVars using product syntax
  * https://docs.adobe.com/content/help/en/analytics/implementation/javascript-implementation/variables-analytics-reporting/page-variables.html
  * Example input:
     "productEVars": [
       {
         "key": "priceStatus",
         "value": "eVar32"
       },
       {
         "key": "discount",
         "value": "eVar17"
       },
     ]
    * @param {Array} productEVars
    * @param {Object} props
    * @param {Object} product
    * @return {String}
   */

  function mapProductEVars(productEVars, props, product) {
    var eVars = [];

    each(function(eVar) {
      // Respect what the customer configures in the setting. ex. products.cart_id
      // Only check products if "products." configured in settings.
      if (eVar.key.startsWith('products.')) {
        var productValue = getProductField(eVar.key, product);
        if (productValue && productValue !== 'undefined') {
          eVars.push(eVar.value + '=' + productValue);
        }
      } else if (eVar.key in props) {
        eVars.push(eVar.value + '=' + props[eVar.key]);
      }
    }, productEVars);

    return eVars.join('|');
  }

  /**
   * Get product key after string
   *
   * Example input: products.isMembershipExclusive or products.$.price
   * Example output: isMembershipExclusive or price
   * @param {String} productString
   * @param {Object} product
   * @return {String}
   */
  function getProductField(productString, product) {
    var fields = productString.split('.');
    return product[fields[fields.length - 1]].toString();
  }
  /**
   * Check if event is mapped in either `events` or `merchEvents` settings.
   * If not, the destination will noop.
   *
   *
   * @param {String} Track payload `event` field.
   * @return {Boolean}
   * @api private
   */

  AdobeAnalytics.prototype.isMapped = function(event) {
    return (
      (this.options.events || []).find(function(setting) {
        return setting.segmentEvent.toLowerCase() === event;
      }) ||
      (this.options.merchEvents || []).find(function(setting) {
        return setting.segmentEvent.toLowerCase() === event;
      })
    );
  };

  /**
   * Check if function is a function
   *
   * @api private
   * @param {Object} props
   * @param {Object} options
   */

  function isFunction(fn) {
    var getType = {};
    return fn && getType.toString.call(fn) === '[object Function]';
  }

  /**
   *
   * @api private
   * @param {Object} obj
   * @return {Object}
   */

  /* eslint-disable */
  function lowercaseKeys(obj) {
    obj = obj || {};
    each(function(value, key) {
      delete obj[key];
      obj[key.toLowerCase()] = value;
    }, obj);
    return obj;
  }
  /* eslint-disable */

  /**
   * Return whether `str` is an empty string.
   *
   *
   * @api private
   * @return {boolean} empty
   */

  function isEmptyString(str) {
    // This is technically faster than a flat `str === ''` comparison.
    return typeof str === 'string' && str.length === 0;
  }

  /**
   * Begin Heartbeat Implementation
   *
   * NOTE: THIS FUNCTIONALITY IS STILL IN BETA, AND NEEDS CLEANUP.
   *
   * Notes for later:
   *
   * 1. The video id (presently mapped to props.asset_id) can NOT be an empty string / undefined.
   * 2. The video player can NOT be an empty string / undefined.
   * 3. All methods here need to be defined up in heartbeatEventMap.
   */

  function populateHeartbeat(track) {
    var props = track.properties();
    var mediaHeartbeat = this.mediaHeartbeats[props.session_id || 'default'];

    // If the configuration doesn't already exist, then create it.
    if (!mediaHeartbeat) {
      initHeartbeat.call(this, track);
    } else {
      var mediaHeartbeatConfig = mediaHeartbeat.config;
      mediaHeartbeatConfig.channel =
        props.channel || mediaHeartbeatConfig.channel;
      mediaHeartbeatConfig.appVersion =
        track.proxy('context.app.version') || mediaHeartbeatConfig.appVersion;
      // Default to the latest given value if it exists, else the old value if it exists.
      mediaHeartbeatConfig.playerName =
        props.video_player || mediaHeartbeatConfig.playerName;
    }
  }

  function initHeartbeat(track) {
    var self = this; // Bound in .track()

    var videoAnalytics = window.ADB.va;
    var props = track.properties();

    var mediaHeartbeatConfig = new videoAnalytics.MediaHeartbeatConfig();
    var mediaHeartbeatDelegate = new videoAnalytics.MediaHeartbeatDelegate();

    mediaHeartbeatConfig.trackingServer = this.options.heartbeatTrackingServerUrl;
    mediaHeartbeatConfig.channel = props.channel || '';
    mediaHeartbeatConfig.ovp = 'unknown'; // TODO: Awaiting spec confirmation.
    mediaHeartbeatConfig.appVersion =
      track.proxy('context.app.version') || 'unknown';
    mediaHeartbeatConfig.playerName = props.video_player || 'unknown';
    mediaHeartbeatConfig.ssl = this.options.ssl;
    mediaHeartbeatConfig.debugLogging = !!window._enableHeartbeatDebugLogging; // Optional beta flag for seeing debug output.

    mediaHeartbeatDelegate.getCurrentPlaybackTime = function() {
      var playhead = self.playhead || 0;

      // We allow implementions to set the playhead value of a video session on a shared
      // window object. This allows us to relay the playhead to AA's heartbeat SDK several
      // times a second, without relying on a 'Video Content Playing' event to update the position.
      var sessions = window._segHBPlayheads || {};
      if (sessions[props.session_id]) {
        playhead = sessions[props.session_id];
      }

      return playhead;
    };

    mediaHeartbeatDelegate.getQoSObject = function() {
      return self.qosData;
    };

    // Instantiate the real Heartbeat instance.
    this.mediaHeartbeats[props.session_id || 'default'] = {
      heartbeat: new videoAnalytics.MediaHeartbeat(
        mediaHeartbeatDelegate,
        mediaHeartbeatConfig,
        window.s
      ), // window.s is our AppMeasurement instance.
      delegate: mediaHeartbeatDelegate,
      config: mediaHeartbeatConfig
    };

    createQosObject.call(this, track);

    heartbeatSessionStart.call(this, track);
  }

  // This is called when the user intends to start playback (not when the video actually begins to play).
  function heartbeatSessionStart(track) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    var streamType = props.livestream
      ? videoAnalytics.MediaHeartbeat.StreamType.LIVE
      : videoAnalytics.MediaHeartbeat.StreamType.VOD; // There's also LINEAR, unsure how to differentiate in our spec.
    var mediaObj = videoAnalytics.MediaHeartbeat.createMediaObject(
      props.title || '',
      props.asset_id || 'unknown video id',
      props.total_length || 0,
      streamType
    );

    // Assign custom context data using the Context Data Variables settings and properties in payload.
    var contextData = createCustomVideoMetadataContext(track, this.options); // This might be a custom object for the user.
    createStandardVideoMetadata(track, mediaObj);

    this.mediaHeartbeats[
      props.session_id || 'default'
    ].heartbeat.trackSessionStart(mediaObj, contextData);
  }

  // This is called when the video actually starts to playback.
  function heartbeatVideoStart(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();

    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackPlay();
    // Assign custom metadata using the Context Data Variables settings and properties in payload.
    var chapterCustomMetadata = createCustomVideoMetadataContext(
      track,
      this.options
    );

    if (!this.mediaHeartbeats[props.session_id || 'default'].chapterInProgress) {
      var chapterObj = videoAnalytics.MediaHeartbeat.createChapterObject(
        props.chapter_name || 'no chapter name',
        props.position || 1,
        props.length || 6000, // This is a temporary max to prevent max from being exceeding if users forget to set a length.
        props.start_time || 0
      );

      /* To be implemented.
      var chapterMetadata = {
        segmentType: props.segmentType || 'no segment type',
        segmentName: props.segmentName || 'no segment name',
        segmentInfo: props.segmentInfo || 'no segment info'
      };
      */

      this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
        videoAnalytics.MediaHeartbeat.Event.ChapterStart,
        chapterObj,
        chapterCustomMetadata
      );
      this.mediaHeartbeats[props.session_id || 'default'].chapterInProgress = true;
    }
  }

  function heartbeatVideoComplete(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.ChapterComplete
    );
    this.mediaHeartbeats[props.session_id || 'default'].chapterInProgress = false;
  }

  function heartbeatVideoPaused(track) {
    populateHeartbeat.call(this, track);

    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackPause();
  }

  function heartbeatSessionEnd(track) {
    populateHeartbeat.call(this, track);

    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackComplete();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackSessionEnd();

    // Remove the session from memory when it's all over.
    delete this.mediaHeartbeats[props.session_id || 'default'];
    delete this.adBreakCounts[props.session_id || 'default'];
  }

  // Right now, we're treating each ad as its own ad break due to a mismatch of our spec and Adobe's.
  function heartbeatAdStarted(track) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    var adSessionCount = this.adBreakCounts[props.session_id || 'default'];

    /* eslint-disable */
    adSessionCount
      ? (adSessionCount = ++this.adBreakCounts[props.session_id || 'default'])
      : (adSessionCount = this.adBreakCounts[props.session_id || 'default'] = 1);
    /* eslint-disable */

    var adBreakObj = videoAnalytics.MediaHeartbeat.createAdBreakObject(
      props.type || 'unknown',
      adSessionCount,
      props.position || 1
    );

    // Yes, this completely changes from the explicitly-named functions.
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdBreakStart,
      adBreakObj
    );
    this.adBreakInProgress = true;

    // Now explicitly start the ad. Optional metadata object can be passed in.
    var adObj = videoAnalytics.MediaHeartbeat.createAdObject(
      props.title || 'no title',
      props.asset_id.toString() || 'default ad',
      props.position || 1,
      props.total_length || 0
    );
    createStandardAdMetadata(track, adObj);

    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdStart,
      adObj,
      props.content || {}
    );
  }

  function heartbeatAdCompleted(track) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();

    if (!this.adBreakInProgress) {
      heartbeatAdStarted.call(this, track);
    }

    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdComplete
    );
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdBreakComplete
    );
    this.adBreakInProgress = false;
  }

  function heartbeatAdSkipped(track) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();

    if (!this.adBreakInProgress) {
      heartbeatAdStarted.call(this, track);
    }

    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdSkip
    );
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.AdBreakComplete
    );
    this.adBreakInProgress = false;
  }

  function heartbeatBufferStarted(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.BufferStart
    );
  }

  function heartbeatBufferCompleted(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.BufferComplete
    );
  }

  function heartbeatSeekStarted(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.SeekStart
    );
  }

  function heartbeatSeekCompleted(track) {
    populateHeartbeat.call(this, track);

    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    this.mediaHeartbeats[props.session_id || 'default'].heartbeat.trackEvent(
      videoAnalytics.MediaHeartbeat.Event.SeekComplete
    );
  }

  function heartbeatQualityUpdated(track) {
    createQosObject.call(this, track);
  }

  function createStandardVideoMetadata(track, mediaObj) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    var metaKeys = videoAnalytics.MediaHeartbeat.VideoMetadataKeys;
    var stdVidMeta = {};
    var segAdbMap = {
      program: metaKeys.SHOW,
      season: metaKeys.SEASON,
      episode: metaKeys.EPISODE,
      assetId: metaKeys.ASSET_ID,
      contentAssetId: metaKeys.ASSET_ID,
      genre: metaKeys.GENRE,
      airdate: metaKeys.FIRST_AIR_DATE,
      publisher: metaKeys.ORIGINATOR,
      channel: metaKeys.NETWORK,
      rating: metaKeys.RATING
    };

    // eslint-disable-next-line
    for (var prop in segAdbMap) {
      // If the property exists on the Segment object, set the Adobe metadata key to that value.
      stdVidMeta[segAdbMap[prop]] = props[prop] || 'no ' + segAdbMap[prop];
    }

    mediaObj.setValue(
      videoAnalytics.MediaHeartbeat.MediaObjectKey.StandardVideoMetadata,
      stdVidMeta
    );
  }

  function createCustomVideoMetadataContext(track, options) {
    var contextData = {};

    //Check properties & context object for `settings.contextValue` mappings to assign custom metadata
    var extractedProperties = extractProperties(track, options, 'mergedPropContext');
    each(function(value, key) {
      if (!key || value === undefined || value === null || value === '') {
        return;
      }

      // If context data values are booleans then stringify them.
      // Adobe's SDK seems to reject a false boolean value. Stringifying is
      // acceptable since these values are appended as query strings anyway.
      if (typeof value === 'boolean') {
        contextData[key] = value.toString();
        return;
      }

      contextData[key] = value;
    }, extractedProperties);
    return contextData;
  }

  function createStandardAdMetadata(track, adObj) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();
    var metaKeys = videoAnalytics.MediaHeartbeat.AdMetadataKeys;
    var stdAdMeta = {};
    var segAdbMap = {
      publisher: metaKeys.ADVERTISER
    };

    // eslint-disable-next-line
    for (var prop in segAdbMap) {
      // If the property exists on the Segment object, set the Adobe metadata key to that value.
      stdAdMeta[segAdbMap[prop]] = props[prop] || 'no ' + segAdbMap[prop];
    }

    adObj.setValue(
      videoAnalytics.MediaHeartbeat.MediaObjectKey.StandardAdMetadata,
      stdAdMeta
    );
  }

  function heartbeatUpdatePlayhead(track) {
    var props = track.properties();

    this.playhead = props.position;
  }

  function createQosObject(track) {
    var videoAnalytics = window.ADB.va;
    var props = track.properties();

    // Arguments are not an object. Property order goes: bitrate, startupTime, fps, droppedFrames.
    this.qosData = videoAnalytics.MediaHeartbeat.createQoSObject(
      props.bitrate || 0,
      props.startupTime || 0,
      props.fps || 0,
      props.droppedFrames || 0
    );
  }

  /**
   * Merge two javascript objects. This works similarly to `Object.assign({}, obj1, obj2)`
   * but it's compatible with old browsers. The properties of the first argument takes preference
   * over the other.
   *
   * It does not do fancy stuff, just use it with top level properties.
   *
   * @param {Object} obj1 Object 1
   * @param {Object} obj2 Object 2
   *
   * @return {Object} a new object with all the properties of obj1 and the remainder of obj2.
   */
  function merge(obj1, obj2) {
    var res = {};

    // All properties of obj1
    for (var propObj1 in obj1) {
      if (obj1.hasOwnProperty(propObj1)) {
        res[propObj1] = obj1[propObj1];
      }
    }

    // Extra properties of obj2
    for (var propObj2 in obj2) {
      if (obj2.hasOwnProperty(propObj2) && !res.hasOwnProperty(propObj2)) {
        res[propObj2] = obj2[propObj2];
      }
    }

    return res;
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":49,"@segment/to-iso-string":1103,"@segment/trample":1105,"obj-case":1143,"segmentio-facade":1158}],49:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var debug = require('debug');
  var defaults = require('@ndhoule/defaults');
  var extend = require('extend');
  var slug = require('slug-component');
  var protos = require('./protos');
  var statics = require('./statics');

  /**
   * Create a new `Integration` constructor.
   *
   * @constructs Integration
   * @param {string} name
   * @return {Function} Integration
   */

  function createIntegration(name) {
    /**
     * Initialize a new `Integration`.
     *
     * @class
     * @param {Object} options
     */

    function Integration(options) {
      if (options && options.addIntegration) {
        // plugin
        return options.addIntegration(Integration);
      }
      this.debug = debug('analytics:integration:' + slug(name));
      var clonedOpts = {};
      extend(true, clonedOpts, options); // deep clone options
      this.options = defaults(clonedOpts || {}, this.defaults);
      this._queue = [];
      this.once('ready', bind(this, this.flush));

      Integration.emit('construct', this);
      this.ready = bind(this, this.ready);
      this._wrapInitialize();
      this._wrapPage();
      this._wrapTrack();
    }

    Integration.prototype.defaults = {};
    Integration.prototype.globals = [];
    Integration.prototype.templates = {};
    Integration.prototype.name = name;
    extend(Integration, statics);
    extend(Integration.prototype, protos);

    return Integration;
  }

  /**
   * Exports.
   */

  module.exports = createIntegration;

  },{"./protos":50,"./statics":51,"@ndhoule/defaults":8,"component-bind":1109,"debug":52,"extend":54,"slug-component":1165}],50:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Emitter = require('component-emitter');
  var each = require('@ndhoule/each');
  var events = require('analytics-events');
  var every = require('@ndhoule/every');
  var fmt = require('@segment/fmt');
  var foldl = require('@ndhoule/foldl');
  var is = require('is');
  var loadIframe = require('load-iframe');
  var loadScript = require('@segment/load-script');
  var nextTick = require('next-tick');
  var normalize = require('to-no-case');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * No operation.
   */

  var noop = function noop() {};

  /**
   * Window defaults.
   */

  var onerror = window.onerror;
  var onload = null;

  /**
   * Mixin emitter.
   */

  /* eslint-disable new-cap */
  Emitter(exports);
  /* eslint-enable new-cap */

  /**
   * Initialize.
   */

  exports.initialize = function() {
    var ready = this.ready;
    nextTick(ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  exports.loaded = function() {
    return false;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  /* eslint-disable no-unused-vars */
  exports.page = function(page) {};
  /* eslint-enable no-unused-vars */

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  /* eslint-disable no-unused-vars */
  exports.track = function(track) {};
  /* eslint-enable no-unused-vars */

  /**
   * Get values from items in `options` that are mapped to `key`.
   * `options` is an integration setting which is a collection
   * of type 'map', 'array', or 'mixed'
   *
   * Use cases include mapping events to pixelIds (map), sending generic
   * conversion pixels only for specific events (array), or configuring dynamic
   * mappings of event properties to query string parameters based on event (mixed)
   *
   * @api public
   * @param {Object|Object[]|String[]} options An object, array of objects, or
   * array of strings pulled from settings.mapping.
   * @param {string} key The name of the item in options whose metadata
   * we're looking for.
   * @return {Array} An array of settings that match the input `key` name.
   * @example
   *
   * // 'Map'
   * var events = { my_event: 'a4991b88' };
   * .map(events, 'My Event');
   * // => ["a4991b88"]
   * .map(events, 'whatever');
   * // => []
   *
   * // 'Array'
   * * var events = ['Completed Order', 'My Event'];
   * .map(events, 'My Event');
   * // => ["My Event"]
   * .map(events, 'whatever');
   * // => []
   *
   * // 'Mixed'
   * var events = [{ key: 'my event', value: '9b5eb1fa' }];
   * .map(events, 'my_event');
   * // => ["9b5eb1fa"]
   * .map(events, 'whatever');
   * // => []
   */

  exports.map = function(options, key) {
    var normalizedComparator = normalize(key);
    var mappingType = getMappingType(options);

    if (mappingType === 'unknown') {
      return [];
    }

    return foldl(function(matchingValues, val, key) {
      var compare;
      var result;

      if (mappingType === 'map') {
        compare = key;
        result = val;
      }

      if (mappingType === 'array') {
        compare = val;
        result = val;
      }

      if (mappingType === 'mixed') {
        compare = val.key;
        result = val.value;
      }

      if (normalize(compare) === normalizedComparator) {
        matchingValues.push(result);
      }

      return matchingValues;
    }, [], options);
  };

  /**
   * Invoke a `method` that may or may not exist on the prototype with `args`,
   * queueing or not depending on whether the integration is "ready". Don't
   * trust the method call, since it contains integration party code.
   *
   * @api private
   * @param {string} method
   * @param {...*} args
   */

  exports.invoke = function(method) {
    if (!this[method]) return;
    var args = Array.prototype.slice.call(arguments, 1);
    if (!this._ready) return this.queue(method, args);

    this.debug('%s with %o', method, args);
    return this[method].apply(this, args);
  };

  /**
   * Queue a `method` with `args`.
   *
   * @api private
   * @param {string} method
   * @param {Array} args
   */

  exports.queue = function(method, args) {
    this._queue.push({ method: method, args: args });
  };

  /**
   * Flush the internal queue.
   *
   * @api private
   */

  exports.flush = function() {
    this._ready = true;
    var self = this;

    each(function(call) {
      self[call.method].apply(self, call.args);
    }, this._queue);

    // Empty the queue.
    this._queue.length = 0;
  };

  /**
   * Reset the integration, removing its global variables.
   *
   * @api private
   */

  exports.reset = function() {
    for (var i = 0; i < this.globals.length; i++) {
      window[this.globals[i]] = undefined;
    }

    window.onerror = onerror;
    window.onload = onload;
  };

  /**
   * Load a tag by `name`.
   *
   * @param {string} name The name of the tag.
   * @param {Object} locals Locals used to populate the tag's template variables
   * (e.g. `userId` in '<img src="https://whatever.com/{{ userId }}">').
   * @param {Function} [callback=noop] A callback, invoked when the tag finishes
   * loading.
   */

  exports.load = function(name, locals, callback) {
    // Argument shuffling
    if (typeof name === 'function') { callback = name; locals = null; name = null; }
    if (name && typeof name === 'object') { callback = locals; locals = name; name = null; }
    if (typeof locals === 'function') { callback = locals; locals = null; }

    // Default arguments
    name = name || 'library';
    locals = locals || {};

    locals = this.locals(locals);
    var template = this.templates[name];
    if (!template) throw new Error(fmt('template "%s" not defined.', name));
    var attrs = render(template, locals);
    callback = callback || noop;
    var self = this;
    var el;

    switch (template.type) {
    case 'img':
      attrs.width = 1;
      attrs.height = 1;
      el = loadImage(attrs, callback);
      break;
    case 'script':
      el = loadScript(attrs, function(err) {
        if (!err) return callback();
        self.debug('error loading "%s" error="%s"', self.name, err);
      });
        // TODO: hack until refactoring load-script
      delete attrs.src;
      each(function(val, key) {
        el.setAttribute(key, val);
      }, attrs);
      break;
    case 'iframe':
      el = loadIframe(attrs, callback);
      break;
    default:
        // No default case
    }

    return el;
  };

  /**
   * Locals for tag templates.
   *
   * By default it includes a cache buster and all of the options.
   *
   * @param {Object} [locals]
   * @return {Object}
   */

  exports.locals = function(locals) {
    locals = locals || {};
    var cache = Math.floor(new Date().getTime() / 3600000);
    if (!locals.hasOwnProperty('cache')) locals.cache = cache;
    each(function(val, key) {
      if (!locals.hasOwnProperty(key)) locals[key] = val;
    }, this.options);
    return locals;
  };

  /**
   * Simple way to emit ready.
   *
   * @api public
   */

  exports.ready = function() {
    this.emit('ready');
  };

  /**
   * Wrap the initialize method in an exists check, so we don't have to do it for
   * every single integration.
   *
   * @api private
   */

  exports._wrapInitialize = function() {
    var initialize = this.initialize;
    this.initialize = function() {
      this.debug('initialize');
      this._initialized = true;
      var ret = initialize.apply(this, arguments);
      this.emit('initialize');
      return ret;
    };
  };

  /**
   * Wrap the page method to call to noop the first page call if the integration assumes
   * a pageview.
   *
   * @api private
   */

  exports._wrapPage = function() {
    var page = this.page;
    var initialPageSkipped = false;
    this.page = function() {
      if (this._assumesPageview && !initialPageSkipped) {
        initialPageSkipped = true;
        return;
      }
      return page.apply(this, arguments);
    };
  };

  /**
   * Wrap the track method to call other ecommerce methods if available depending
   * on the `track.event()`.
   *
   * @api private
   */

  exports._wrapTrack = function() {
    var t = this.track;
    this.track = function(track) {
      var event = track.event();
      var called;
      var ret;

      for (var method in events) {
        if (has.call(events, method)) {
          var regexp = events[method];
          if (!this[method]) continue;
          if (!regexp.test(event)) continue;
          ret = this[method].apply(this, arguments);
          called = true;
          break;
        }
      }

      if (!called) ret = t.apply(this, arguments);
      return ret;
    };
  };

  /**
   * Determine the type of the option passed to `#map`
   *
   * @api private
   * @param {Object|Object[]} mapping
   * @return {String} mappingType
   */

  function getMappingType(mapping) {
    if (is.array(mapping)) {
      return every(isMixed, mapping) ? 'mixed' : 'array';
    }
    if (is.object(mapping)) return 'map';
    return 'unknown';
  }

  /**
   * Determine if item in mapping array is a valid "mixed" type value
   *
   * Must be an object with properties "key" (of type string)
   * and "value" (of any type)
   *
   * @api private
   * @param {*} item
   * @return {Boolean}
   */

  function isMixed(item) {
    if (!is.object(item)) return false;
    if (!is.string(item.key)) return false;
    if (!has.call(item, 'value')) return false;
    return true;
  }

  /**
   * TODO: Document me
   *
   * @api private
   * @param {Object} attrs
   * @param {Function} fn
   * @return {Image}
   */

  function loadImage(attrs, fn) {
    fn = fn || function() {};
    var img = new Image();
    img.onerror = error(fn, 'failed to load pixel', img);
    img.onload = function() { fn(); };
    img.src = attrs.src;
    img.width = 1;
    img.height = 1;
    return img;
  }

  /**
   * TODO: Document me
   *
   * @api private
   * @param {Function} fn
   * @param {string} message
   * @param {Element} img
   * @return {Function}
   */

  function error(fn, message, img) {
    return function(e) {
      e = e || window.event;
      var err = new Error(message);
      err.event = e;
      err.source = img;
      fn(err);
    };
  }

  /**
   * Render template + locals into an `attrs` object.
   *
   * @api private
   * @param {Object} template
   * @param {Object} locals
   * @return {Object}
   */

  function render(template, locals) {
    return foldl(function(attrs, val, key) {
      attrs[key] = val.replace(/\{\{\ *(\w+)\ *\}\}/g, function(_, $1) {
        return locals[$1];
      });
      return attrs;
    }, {}, template.attrs);
  }

  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],51:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Emitter = require('component-emitter');
  var domify = require('domify');
  var each = require('@ndhoule/each');
  var includes = require('@ndhoule/includes');

  /**
   * Mix in emitter.
   */

  /* eslint-disable new-cap */
  Emitter(exports);
  /* eslint-enable new-cap */

  /**
   * Add a new option to the integration by `key` with default `value`.
   *
   * @api public
   * @param {string} key
   * @param {*} value
   * @return {Integration}
   */

  exports.option = function(key, value) {
    this.prototype.defaults[key] = value;
    return this;
  };

  /**
   * Add a new mapping option.
   *
   * This will create a method `name` that will return a mapping for you to use.
   *
   * @api public
   * @param {string} name
   * @return {Integration}
   * @example
   * Integration('My Integration')
   *   .mapping('events');
   *
   * new MyIntegration().track('My Event');
   *
   * .track = function(track){
   *   var events = this.events(track.event());
   *   each(send, events);
   *  };
   */

  exports.mapping = function(name) {
    this.option(name, []);
    this.prototype[name] = function(key) {
      return this.map(this.options[name], key);
    };
    return this;
  };

  /**
   * Register a new global variable `key` owned by the integration, which will be
   * used to test whether the integration is already on the page.
   *
   * @api public
   * @param {string} key
   * @return {Integration}
   */

  exports.global = function(key) {
    this.prototype.globals.push(key);
    return this;
  };

  /**
   * Mark the integration as assuming an initial pageview, so to defer the first page call, keep track of
   * whether we already nooped the first page call.
   *
   * @api public
   * @return {Integration}
   */

  exports.assumesPageview = function() {
    this.prototype._assumesPageview = true;
    return this;
  };

  /**
   * Mark the integration as being "ready" once `load` is called.
   *
   * @api public
   * @return {Integration}
   */

  exports.readyOnLoad = function() {
    this.prototype._readyOnLoad = true;
    return this;
  };

  /**
   * Mark the integration as being "ready" once `initialize` is called.
   *
   * @api public
   * @return {Integration}
   */

  exports.readyOnInitialize = function() {
    this.prototype._readyOnInitialize = true;
    return this;
  };

  /**
   * Define a tag to be loaded.
   *
   * @api public
   * @param {string} [name='library'] A nicename for the tag, commonly used in
   * #load. Helpful when the integration has multiple tags and you need a way to
   * specify which of the tags you want to load at a given time.
   * @param {String} str DOM tag as string or URL.
   * @return {Integration}
   */

  exports.tag = function(name, tag) {
    if (tag == null) {
      tag = name;
      name = 'library';
    }
    this.prototype.templates[name] = objectify(tag);
    return this;
  };

  /**
   * Given a string, give back DOM attributes.
   *
   * Do it in a way where the browser doesn't load images or iframes. It turns
   * out domify will load images/iframes because whenever you construct those
   * DOM elements, the browser immediately loads them.
   *
   * @api private
   * @param {string} str
   * @return {Object}
   */

  function objectify(str) {
    // replace `src` with `data-src` to prevent image loading
    str = str.replace(' src="', ' data-src="');

    var el = domify(str);
    var attrs = {};

    each(function(attr) {
      // then replace it back
      var name = attr.name === 'data-src' ? 'src' : attr.name;
      if (!includes(attr.name + '=', str)) return;
      attrs[name] = attr.value;
    }, el.attributes);

    return {
      type: el.tagName.toLowerCase(),
      attrs: attrs
    };
  }

  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":55}],52:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":53,"_process":1149,"dup":43}],53:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":56}],54:[function(require,module,exports){
  'use strict';

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;
  var defineProperty = Object.defineProperty;
  var gOPD = Object.getOwnPropertyDescriptor;

  var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
      return Array.isArray(arr);
    }

    return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
      return false;
    }

    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
      return false;
    }

    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for (key in obj) { /**/ }

    return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
  var setProperty = function setProperty(target, options) {
    if (defineProperty && options.name === '__proto__') {
      defineProperty(target, options.name, {
        enumerable: true,
        configurable: true,
        value: options.newValue,
        writable: true
      });
    } else {
      target[options.name] = options.newValue;
    }
  };

  // Return undefined instead of __proto__ if '__proto__' is not an own property
  var getProperty = function getProperty(obj, name) {
    if (name === '__proto__') {
      if (!hasOwn.call(obj, name)) {
        return void 0;
      } else if (gOPD) {
        // In early versions of node, obj['__proto__'] is buggy when obj has
        // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
        return gOPD(obj, name).value;
      }
    }

    return obj[name];
  };

  module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0];
    var i = 1;
    var length = arguments.length;
    var deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2;
    }
    if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
      target = {};
    }

    for (; i < length; ++i) {
      options = arguments[i];
      // Only deal with non-null/undefined values
      if (options != null) {
        // Extend the base object
        for (name in options) {
          src = getProperty(target, name);
          copy = getProperty(options, name);

          // Prevent never-ending loop
          if (target !== copy) {
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : [];
              } else {
                clone = src && isPlainObject(src) ? src : {};
              }

              // Never move original objects, clone them
              setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

            // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              setProperty(target, { name: name, newValue: copy });
            }
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  },{}],55:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],56:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],57:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Adobe Target` integration.
   */

  var AdobeTarget = (module.exports = integration('Adobe Target'));

  AdobeTarget.prototype.initialize = function() {
    // make sure the integration doesn't break in case at.js isn't included manually
    window.adobe = window.adobe || {};
    window.adobe.target = window.adobe.target || {};
    window.adobe.target.trackEvent =
      window.adobe.target.trackEvent ||
      function() {
        /* noop */
      };
    this.ready();
  };

  AdobeTarget.prototype.track = function(track) {
    var mbox = getMboxName(track);

    if (mbox === undefined) {
      return;
    }

    window.adobe.target.trackEvent({
      mbox: mbox,
      params: track.properties()
    });
  };

  AdobeTarget.prototype.orderCompleted = function(track) {
    var mbox = getMboxName(track);

    if (mbox === undefined) {
      return;
    }

    var products = track.products() || [];
    var productIdArray = [];

    for (var i = 0; i < products.length; i++) {
      var productId =
        products[i].id || products[i].productId || products[i].product_id;
      if (productId) productIdArray.push(productId);
    }

    window.adobe.target.trackEvent({
      mbox: mbox,
      params: {
        orderId: track.orderId(),
        orderTotal: track.revenue(),
        productPurchaseId: productIdArray.join(',')
      }
    });
  };

  function getMboxName(msg) {
    var opts = msg.options('Adobe Target');

    if (!opts.mboxName) {
      return;
    }

    var mbox = opts.mboxName;

    if (typeof mbox !== 'string') {
      mbox = mbox.toString();
    }
    return mbox;
  }

  },{"@segment/analytics.js-integration":58}],58:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":59,"./statics":60,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":61,"dup":40,"slug-component":1165}],59:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":63,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],60:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":64,"dup":42}],61:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":62,"_process":1149,"dup":43}],62:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":65}],63:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],64:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],65:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],66:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var entries = require('@ndhoule/entries');
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var map = require('@ndhoule/map');
  var pick = require('@ndhoule/pick');
  var values = require('@ndhoule/values');

  /**
   * Map of special #track properties to their default Adometry shorthands.
   *
   * https://segment.com/docs/api/tracking/track/#special-properties
   */

  var TRACK_SPECIAL_PROPERTIES = {
    revenue: 'rev',
    value: 'val'
  };

  /**
   * Expose `Adometry`.
   */

  var Adometry = (module.exports = integration('Adometry')
    .global('DMTRY')
    .option('advertiserId', '')
    .option('campaignId', '')
    .option('pageId', '')
    .tag(
      'page',
      '<script src="//js.dmtry.com/channel.js#gid:{{ campaignId }};advid:{{ advertiserId }};pid:{{ pageId }}{{ properties }}">'
    )
    .tag(
      'track',
      '<script src="//js.dmtry.com/channel.js#gid:{{ campaignId }};advid:{{ advertiserId }};pid:{{ placementId }}{{ properties }}">'
    )
    .mapping('events')
    .mapping('aliases'));

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Adometry.prototype.track = function(track) {
    var event = track.event();
    if (!event) return;

    var self = this;
    var placementIds = this.events(event);
    var aliases = extend({}, this.options.aliases, TRACK_SPECIAL_PROPERTIES);
    var properties = track.properties(aliases);
    var filteredProperties = pick(values(aliases), properties);

    each(function(placementId) {
      self.load('track', {
        advertiserId: self.options.advertiserId,
        campaignId: self.options.campaignId,
        placementId: placementId,
        properties: self._hashify(filteredProperties, 'cus.')
      });
    }, placementIds);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Adometry.prototype.page = function(page) {
    var self = this;
    var anonymousId = page.anonymousId();
    var properties = { ano: anonymousId };

    self.load('page', {
      properties: self._hashify(properties, 'cus.')
    });
  };

  /**
   * Creates an Adometry-compatible hash from an object.
   *
   * @api private
   * @param {object} props A hash of key-value pairs.
   * @param {string} prefix A prefix to add to each key.
   * @return {string}
   */

  // TODO: Move into a lib file and test separately once we have multi-file support
  Adometry.prototype._hashify = function(props, prefix) {
    prefix = prefix || '';
    props = entries(props);

    if (!props || !props.length) {
      return '';
    }

    return (
      ';' +
      map(function(prop) {
        return prefix + prop[0] + ':' + prop[1];
      }, props).join(';')
    );
  };

  },{"@ndhoule/each":10,"@ndhoule/entries":11,"@ndhoule/extend":13,"@ndhoule/map":17,"@ndhoule/pick":18,"@ndhoule/values":20,"@segment/analytics.js-integration":67}],67:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":68,"./statics":69,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":70,"dup":40,"slug-component":1165}],68:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":72,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],69:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":73,"dup":42}],70:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":71,"_process":1149,"dup":43}],71:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":74}],72:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],73:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],74:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],75:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var foldl = require('@ndhoule/foldl');
  var integration = require('@segment/analytics.js-integration');
  var map = require('@ndhoule/map');
  var snake = require('to-snake-case');
  var useHttps = require('use-https');

  /**
   * Expose `AdRoll` integration.
   */

  var AdRoll = (module.exports = integration('AdRoll')
    .assumesPageview()
    .global('__adroll')
    .global('__adroll_loaded')
    .global('adroll_adv_id')
    .global('adroll_custom_data')
    .global('adroll_email')
    .global('adroll_pix_id')
    .option('advId', '')
    .option('pixId', '')
    .option('_version', 2)
    .tag('http', '<script src="http://a.adroll.com/j/roundtrip.js">')
    .tag('https', '<script src="https://s.adroll.com/j/roundtrip.js">')
    .mapping('events'));

  /**
   * Initialize.
   *
   * http://support.adroll.com/getting-started-in-4-easy-steps/#step-one
   * http://support.adroll.com/enhanced-conversion-tracking/
   *
   * @api public
   */

  AdRoll.prototype.initialize = function() {
    window.adroll_adv_id = this.options.advId;
    window.adroll_pix_id = this.options.pixId;
    window.__adroll_loaded = true;
    var name = useHttps() ? 'https' : 'http';
    this.load(name, this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  AdRoll.prototype.loaded = function() {
    return !!window.__adroll;
  };

  /**
   * Page.
   *
   * http://support.adroll.com/segmenting-clicks/
   *
   * @api public
   * @param {Page} page
   */

  AdRoll.prototype.page = function(page) {
    this.track(page.track(page.fullName()));
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  AdRoll.prototype.identify = function(identify) {
    if (identify.email()) {
      window.adroll_email = identify.email();
      window.__adroll.record_adroll_email('segment');
    }
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  AdRoll.prototype.track = function(track) {
    var events = this.events(track.event());
    var userId = this.analytics.user().id();
    var data = formulateData(track, { revenue: 'adroll_conversion_value' });
    // As of April 2015, Adroll no longer accepts segments by name, instead
    // segmenting exclusively by segment ID, which will be present in events map
    // TODO: Deprecate and remove this behavior
    if (this.options._version === 1) {
      // If this is an unmapped event, fall back on a snakeized event name
      if (!events.length) events = [track.event()];
      // legacy (v1) behavior is to snakeize all mapped `events` values
      events = map(snake, events);
    }

    if (userId) data.user_id = userId;

    sendConversion(events, data);
  };

  /**
   * Product Viewed/Added
   *
   * @api public
   * @param {Track} track
   */

  AdRoll.prototype.productViewed = AdRoll.prototype.productAdded = function(
    track
  ) {
    var events = this.events(track.event());
    var userId = this.analytics.user().id();
    var data = formulateData(track, {
      id: 'product_id',
      productId: 'product_id',
      price: 'adroll_conversion_value'
    });

    if (this.options._version === 1) {
      // If this is an unmapped event, fall back on a snakeized event name
      if (!events.length) events = [track.event()];
      // legacy (v1) behavior is to snakeize all mapped `events` values
      events = map(snake, events);
    }

    if (userId) data.user_id = userId;

    sendConversion(events, data);
  };

  /**
   * Order Completed
   *
   * @api public
   * @param {Track} track
   */

  AdRoll.prototype.orderCompleted = function(track) {
    var events = this.events(track.event());
    var userId = this.analytics.user().id();
    var data = formulateData(track, {
      orderId: 'order_id',
      revenue: 'adroll_conversion_value'
    });

    if (track.properties().currency) {
      data.adroll_currency = track.properties().currency;
      delete data.currency;
    }

    if (this.options._version === 1) {
      // If this is an unmapped event, fall back on a snakeized event name
      if (!events.length) events = [track.event()];
      // legacy (v1) behavior is to snakeize all mapped `events` values
      events = map(snake, events);
    }

    if (userId) data.user_id = userId;

    sendConversion(events, data);
  };

  /**
   * Send conversion events
   *
   * @params {Object, Object} events, data
   * @api private
   */

  function sendConversion(events, d) {
    each(function(segmentId) {
      var data = d;
      data.adroll_segments = segmentId;
      window.__adroll.record_user(data);
    }, events);
  }

  /**
   * Format data payload
   *
   * @params {Object, Object} track, alias
   * @api private
   */

  function formulateData(track, alias) {
    var aliases = alias || {};
    var ret = foldl(function(props, val, key) {
      var properties = props;
      properties[snake(key)] = val;
      return properties;
    }, track.properties(aliases));

    return ret;
  }

  },{"@ndhoule/each":10,"@ndhoule/foldl":14,"@ndhoule/map":17,"@segment/analytics.js-integration":76,"to-snake-case":1172,"use-https":1180}],76:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":77,"./statics":78,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":80,"slug-component":1165}],77:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],78:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":79,"dup":51}],79:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],80:[function(require,module,exports){
  'use strict';

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
      return Array.isArray(arr);
    }

    return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
      return false;
    }

    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
      return false;
    }

    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for (key in obj) { /**/ }

    return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0];
    var i = 1;
    var length = arguments.length;
    var deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2;
    }
    if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
      target = {};
    }

    for (; i < length; ++i) {
      options = arguments[i];
      // Only deal with non-null/undefined values
      if (options != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];

          // Prevent never-ending loop
          if (target !== copy) {
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : [];
              } else {
                clone = src && isPlainObject(src) ? src : {};
              }

              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy);

            // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy;
            }
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  },{}],81:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');

  /**
   * Expose `AdWords`.
   */

  var AdWords = (module.exports = integration('AdWords')
    .option('conversionId', '')
    .option('pageRemarketing', false)
    .option('eventMappings', [])
    .tag('<script src="//www.googleadservices.com/pagead/conversion_async.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  AdWords.prototype.initialize = function() {
    var loaded = this.loaded;
    var ready = this.ready;
    this.load(function() {
      when(loaded, ready);
    });
  };

  /**
   * Loaded.
   *
   * @api private
   * @return {boolean}
   */

  AdWords.prototype.loaded = function() {
    return !!(document.body && window.google_trackConversion);
  };

  /**
   * Page.
   *
   * https://support.google.com/adwords/answer/3111920#standard_parameters
   * https://support.google.com/adwords/answer/3103357
   * https://developers.google.com/adwords-remarketing-tag/asynchronous/
   * https://developers.google.com/adwords-remarketing-tag/parameters
   *
   * @api public
   * @param {Page} page
   */

  AdWords.prototype.page = function(page) {
    // Remarketing option can support both Adwords' "static" or "dynamic" remarketing tags
    // Difference is static you don't need to send props under `google_custom_params`
    var remarketing = this.options.pageRemarketing;
    var id = this.options.conversionId;
    var props = page.properties();

    // Conversion tag
    window.google_trackConversion({
      google_conversion_id: id,
      google_custom_params: {},
      google_remarketing_only: false // this ensures that this is a conversion tag
    });

    // Remarketing tag (must be sent in _addition_ to any conversion tags)
    // https://developers.google.com/adwords-remarketing-tag/
    if (remarketing) {
      window.google_trackConversion({
        google_conversion_id: id,
        google_custom_params: props,
        google_remarketing_only: true // this ensures that this is a remarketing tag
      });
    }
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track}
   */

  AdWords.prototype.track = function(track) {
    var self = this;
    var props = track.properties();
    var eventMappings = this.options.eventMappings;
    var revenue = track.revenue() || 0;

    eventMappings.forEach(function(mapping) {
      var id;
      if (mapping.value) {
        if (mapping.value.eventName.toLowerCase() !== track.event().toLowerCase())
          return;
        id = mapping.value.conversionId || self.options.conversionId; // customer can either specify one global conversion id or one per  mapping

        // Fire conversion tag
        if (mapping.value.label !== '') {
          delete props.revenue;

          window.google_trackConversion({
            google_conversion_id: id,
            google_custom_params: props,
            google_conversion_language: 'en',
            google_conversion_format: '3',
            google_conversion_color: 'ffffff',
            google_conversion_label: mapping.value.label,
            google_conversion_value: revenue,
            google_remarketing_only: false // ensure this is a conversion tag
          });
        }

        // Fire remarketing tag
        if (mapping.value.remarketing) {
          window.google_trackConversion({
            google_conversion_id: id,
            google_custom_params: props, // do not send PII here!
            google_remarketing_only: true // ensure this is a remarketing tag
          });
        }
      } else {
        if (mapping.eventName.toLowerCase() !== track.event().toLowerCase())
          return;
        id = mapping.conversionId || self.options.conversionId; // customer can either specify one global conversion id or one per  mapping

        // Fire conversion tag
        if (mapping.label !== '') {
          delete props.revenue;

          window.google_trackConversion({
            google_conversion_id: id,
            google_custom_params: props,
            google_conversion_language: 'en',
            google_conversion_format: '3',
            google_conversion_color: 'ffffff',
            google_conversion_label: mapping.label,
            google_conversion_value: revenue,
            google_remarketing_only: false // ensure this is a conversion tag
          });
        }

        // Fire remarketing tag
        if (mapping.remarketing) {
          window.google_trackConversion({
            google_conversion_id: id,
            google_custom_params: props, // do not send PII here!
            google_remarketing_only: true // ensure this is a remarketing tag
          });
        }
      }
    });
  };

  },{"@segment/analytics.js-integration":82,"do-when":1125}],82:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":83,"./statics":84,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],83:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":85,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],84:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":86,"dup":42}],85:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],86:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],87:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose Alexa integration.
   */

  var Alexa = (module.exports = integration('Alexa')
    .assumesPageview()
    .global('_atrk_opts')
    .option('account', null)
    .option('domain', '')
    .option('dynamic', true)
    .tag('<script src="//d31qbv1cthcecs.cloudfront.net/atrk.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Alexa.prototype.initialize = function() {
    var self = this;
    window._atrk_opts = {
      atrk_acct: this.options.account,
      domain: this.options.domain,
      dynamic: this.options.dynamic
    };
    this.load(function() {
      window.atrk();
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Alexa.prototype.loaded = function() {
    return !!window.atrk;
  };

  },{"@segment/analytics.js-integration":88}],88:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":89,"./statics":90,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],89:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":91,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],90:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":92,"dup":42}],91:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],92:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],93:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Ambassador` integration.
   */
  var Ambassador = (module.exports = integration('Ambassador')
    .global('mbsy')
    .option('uid', '')
    .option('campaigns', {})
    .tag('<script src="https://cdn.getambassador.com/us.js">')
    .mapping('events'));

  /**
   * Initialize.
   *
   * @api public
   */
  Ambassador.prototype.initialize = function() {
    /* eslint-disable */
    (function (m,b,s,y) { m[b] = m[b] || {}; m[b].uid = s; m[b].methods = ['identify', 'track']; m[b].queue = []; m[b].factory = function(t) { return function() { var l = Array.prototype.slice.call(arguments); l.unshift(t); m[b].queue.push(l); return m[b].queue; };}; for (var t = 0; t < m[b].methods.length; t++) { y = m[b].methods[t]; m[b][y] = m[b].factory(y); }}.bind(this))(window, 'mbsy', this.options.uid);
    /* eslint-enable */

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */
  Ambassador.prototype.loaded = function() {
    return !!window.mbsy;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */
  Ambassador.prototype.identify = function(identify) {
    // Check if there are allowed campaigns
    var allowedCampaigns = getAllowedCampaigns(this.options.campaigns);
    var id = identify.userId();
    var email = identify.email();
    var traits = identify.traits();

    delete traits.id;

    if (!(id || email)) return this.debug('user id or email is required');

    var args = [];
    if (id) args.push(id);
    args.push(traits);

    var opts = {};
    opts.identifyType = 'segment';
    args.push(opts);

    // Loop through campaigns and run identify for each one
    if (allowedCampaigns.length > 0) {
      for (var i = 0; i < allowedCampaigns.length; i++) {
        opts.campaign = allowedCampaigns[i];
        window.mbsy.identify.apply(this, args);
      }
    } else {
      window.mbsy.identify.apply(this, args);
    }
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */
  Ambassador.prototype.track = function(track) {
    // Check if there are allowed campaigns
    var allowedCampaigns = getAllowedCampaigns(this.options.campaigns);
    if (!allowedCampaigns) return;

    var props = track.properties();
    var evt = track.event();
    var events = this.events(evt);

    // Check if event is mapped to a conversion
    if (events.indexOf('conversion') === -1) return;

    // Loop through allowed campaigns and run a conversion for each
    for (var i = 0; i < allowedCampaigns.length; i++) {
      props.campaign = allowedCampaigns[i];
      window.mbsy.track(evt, props, { conversion: true });
    }
  };

  /**
   * Builds a list of allowed campaigns based in the provided url
   *
   * @api private
   * @param {Object} allCampaigns
   * @param {String} url
   */
  function getAllowedCampaigns(allCampaigns) {
    var allowedCampaigns = [];
    for (var c in allCampaigns) {
      if (isValidUrl(c)) {
        allowedCampaigns.push(allCampaigns[c]);
      }
    }

    return allowedCampaigns.length === 0 ? false : allowedCampaigns;
  }

  // Private: windowContext
  // Allow passing in mock window object for testing
  function windowLocationContext() {
    return window.mockLocation ? parseUrl(window.mockLocation) : window.location;
  }

  /**
   * Returns true if a location contains a hash
   *
   * @api private
   * @param {String} url
   */
  function containsHash(locationObj) {
    return locationObj.hash && locationObj.href.indexOf('#') >= 0;
  }

  /**
   * Checks if the current url matches provided url string
   *
   * @api private
   * @param {String} url
   */
  function isValidUrl(u) {
    // If url is not present, return false
    if (!u) {
      return false;
    }

    var url = u;

    // Replace dot-like characters with standard period
    url = url.replace(/．/g, '.');

    // Add protocol to the parsed url if not added already
    url = url.substr(0, 4) === 'http' ? url : 'http://' + url;

    // Replace * with a complex phrase (all valid url characters), otherwise safari will not parse the url properly
    var wildcardPhrase = '--' + new Date().getTime() + '--';
    url = url.replace(/\*/g, wildcardPhrase);

    // This allows mixed case paths to be considered equal. Ex: /my-path, /My-Path and /MY-PATH are considered equal
    url = url.toLowerCase();

    // Get browersUrl and force to lower case
    var rawBrowserUrl = windowLocationContext().href.toLowerCase();

    // Get integration and browser url parts
    var providedUrlParts = parseUrl(url);
    var browserUrlParts = parseUrl(rawBrowserUrl);

    // Split hostname and pathname parts
    var providedHostnameParts = decodeURIComponent(providedUrlParts.hostname)
      .split('.')
      .filter(function(p) {
        return !!p;
      })
      .reverse();
    // Explanation -->             ^ decode hostname                               ^ split on .  ^ filter removes blank parts    ^ reverse array for proper comparison
    var providedPathnameParts = decodeURIComponent(providedUrlParts.pathname)
      .split('/')
      .filter(function(p) {
        return !!p;
      });
    // Explanation -->             ^ decode pathname                               ^ split on /  ^ filter removes blank parts
    var providedHashParts = decodeURIComponent(providedUrlParts.hash)
      .replace(/[#!]+/g, '')
      .split('/')
      .filter(function(p) {
        return !!p;
      });
    // Explanation -->         ^ decode pathname                            ^ remove #  ^ split on /  ^ filter removes blank parts

    var browserHostnameParts = browserUrlParts.hostname
      .split('.')
      .filter(function(p) {
        return !!p;
      })
      .reverse();
    // Explanation -->         ^ decode hostname       ^ split on .  ^ filter removes blank parts    ^ reverse array for proper comparison
    var browserPathnameParts = browserUrlParts.pathname
      .split('/')
      .filter(function(p) {
        return !!p;
      });
    // Explanation -->         ^ decode pathname       ^ split on /  ^ filter removes blank parts
    var browserHashParts = browserUrlParts.hash
      .replace(/[#!]+/g, '')
      .split('?')[0]
      .split('/')
      .filter(function(p) {
        return !!p;
      });
    // Explanation -->     ^ decode pathname    ^ remove #           ^split on ?   ^ split on /  ^ filter removes blank parts

    // Compare hostname parts
    // Hostname is compared in reverse (reversed above), that allows *.domain to match any number of subdomains before .domain
    for (var i = 0; i < providedHostnameParts.length; i++) {
      // We only compare when the parsed url is not a wildcard
      // If the hostname parts do not match -> no match
      if (
        providedHostnameParts[i] !== wildcardPhrase &&
        providedHostnameParts[i] !== browserHostnameParts[i]
      ) {
        return false;
      }
    }

    // Compare pathname parts
    // Pathname is compared incrementally, that allows /test/* to match any additional paths after /test/
    for (var x = 0; x < providedPathnameParts.length; x++) {
      // We only compare when the parsed url is not a wildcard
      // If the pathname parts do not match -> no match
      if (
        providedPathnameParts[x] !== wildcardPhrase &&
        providedPathnameParts[x] !== browserPathnameParts[x]
      ) {
        return false;
      }
    }

    // Compare hash parts
    // Hash is compared incrementally, that allows #!test/ to match any additional paths after #!test/
    // Hash will not be compared if the integration's parsed_url does not contain a hash
    if (containsHash(providedUrlParts)) {
      for (var y = 0; y < providedHashParts.length; y++) {
        // We only compare when the parsed url is not a wildcard
        // If the pathname parts do not match -> no match
        if (
          (providedHashParts[y] !== wildcardPhrase &&
            providedHashParts[y] !== browserHashParts[y]) ||
          (!browserHashParts[y] && !containsHash(browserUrlParts))
        ) {
          return false;
        }
      }
    }

    // If we are not on the homepage and the integration has no path parts, no match
    if (providedPathnameParts.length === 0 && browserPathnameParts.length > 0) {
      return false;
    }

    // Finally we return true if all above comparisons have passed
    return true;
  }

  /**
   * Parses a provided url into protocol, hostname, pathname, hash and search
   *
   * @api private
   * @param {String} url
   */
  function parseUrl(url) {
    // Create anchor and set url, returns an object similar to window.location
    var urlAnchor = document.createElement('a');
    urlAnchor.href = url;

    var urlParts = {
      hash: urlAnchor.hash,
      href: urlAnchor.href,
      pathname: urlAnchor.pathname,
      port: urlAnchor.port,
      search: urlAnchor.search,
      hostname: urlAnchor.hostname,
      host: urlAnchor.host,
      origin: urlAnchor.origin,
      protocol: urlAnchor.protocol
    };

    // Fix for IE parsing root pathname without a /
    if (urlParts.pathname.substr(0, 1) !== '/') {
      urlParts.pathname = '/' + urlParts.pathname;
    }

    return urlParts;
  }

  },{"@segment/analytics.js-integration":94}],94:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":95,"./statics":96,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],95:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":97,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],96:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":98,"dup":42}],97:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],98:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],99:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var integration = require('@segment/analytics.js-integration');
  var topDomain = require('@segment/top-domain');
  var when = require('do-when');
  var is = require('is');
  var each = require('@ndhoule/each');
  var Track = require('segmentio-facade').Track;

  /**
   * UMD?
   */

  var umd = typeof window.define === 'function' && window.define.amd;

  /**
   * Source.
   */

  var src = 'https://cdn.amplitude.com/libs/amplitude-6.0.0-min.gz.js';

  /**
   * Expose `Amplitude` integration.
   */

  var Amplitude = (module.exports = integration('Amplitude')
    .global('amplitude')
    .option('apiKey', '')
    .option('trackAllPages', false)
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .option('trackUtmProperties', true)
    .option('trackReferrer', false)
    .option('batchEvents', false)
    .option('eventUploadThreshold', 30)
    .option('eventUploadPeriodMillis', 30000)
    .option('useLogRevenueV2', false)
    .option('forceHttps', false)
    .option('trackGclid', false)
    .option('saveParamsReferrerOncePerSession', true)
    .option('deviceIdFromUrlParam', false)
    .option('mapQueryParams', {})
    .option('trackRevenuePerProduct', false)
    .option('preferAnonymousIdForDeviceId', false)
    .option('traitsToSetOnce', [])
    .option('traitsToIncrement', [])
    .option('appendFieldsToEventProps', {})
    .option('unsetParamsReferrerOnNewSession', false)
    .option('trackProductsOnce', false)
    .option('versionName', '')
    .option('useAmplitudeReferral', false)
    .tag('<script src="' + src + '">'));

  /**
   * Initialize.
   *
   * https://github.com/amplitude/Amplitude-Javascript
   *
   * @api public
   */

  Amplitude.prototype.initialize = function() {
    /* prettier-ignore */
    // amplitude snippet (lines loading amplitude cdn-served script are removed as that is already achieved via Segment tag and load methods)
    /* eslint-disable */
    /* istanbul ignore next */
    (function(e,t){var n=e.amplitude||{_q:[],_iq:{}};;function s(e,t){e.prototype[t]=function(){this._q.push([t].concat(Array.prototype.slice.call(arguments,0)));return this}}var o=function(){this._q=[];return this};var a=["add","append","clearAll","prepend","set","setOnce","unset"];for(var u=0;u<a.length;u++){s(o,a[u])}n.Identify=o;var c=function(){this._q=[];return this};var l=["setProductId","setQuantity","setPrice","setRevenueType","setEventProperties"];for(var p=0;p<l.length;p++){s(c,l[p])}n.Revenue=c;var d=["init","logEvent","logRevenue","setUserId","setUserProperties","setOptOut","setVersionName","setDomain","setDeviceId","setGlobalUserProperties","identify","clearUserProperties","setGroup","logRevenueV2","regenerateDeviceId","groupIdentify","onInit","logEventWithTimestamp","logEventWithGroups","setSessionId","resetSessionId"];function v(e){function t(t){e[t]=function(){e._q.push([t].concat(Array.prototype.slice.call(arguments,0)))}}for(var n=0;n<d.length;n++){t(d[n])}}v(n);n.getInstance=function(e){e=(!e||e.length===0?"$default_instance":e).toLowerCase();if(!n._iq.hasOwnProperty(e)){n._iq[e]={_q:[]};v(n._iq[e])}return n._iq[e]};e.amplitude=n})(window,document);
    /* eslint-enable */
    this.setDomain(window.location.href);

    window.amplitude.getInstance().init(this.options.apiKey, null, {
      includeUtm: this.options.trackUtmProperties,
      batchEvents: this.options.batchEvents,
      eventUploadThreshold: this.options.eventUploadThreshold,
      eventUploadPeriodMillis: this.options.eventUploadPeriodMillis,
      forceHttps: this.options.forceHttps,
      includeGclid: this.options.trackGclid,
      saveParamsReferrerOncePerSession: this.options
        .saveParamsReferrerOncePerSession,
      includeReferrer: this.options.useAmplitudeReferral,
      deviceIdFromUrlParam: this.options.deviceIdFromUrlParam,
      unsetParamsReferrerOnNewSession: this.options
        .unsetParamsReferrerOnNewSession,
      deviceId:
        this.options.preferAnonymousIdForDeviceId &&
        this.analytics &&
        this.analytics.user() &&
        this.analytics.user().anonymousId()
    });

    // Initialize the amplitute with user specified site version if any.
    // https://help.amplitude.com/hc/en-us/articles/115001361248-JavaScript-SDK-Installation#setting-version-name
    var versionName = this.options.versionName;
    if (versionName) {
      window.amplitude.getInstance().setVersionName(versionName);
    }

    var loaded = bind(this, this.loaded);
    var ready = this.ready;
    // FIXME (wcjohnson11): Refactor the load method to include this logic
    // to better support if UMD present

    /* istanbul ignore if  */
    if (umd) {
      window.require([src], function(amplitude) {
        window.amplitude = amplitude;
        when(loaded, function() {
          window.amplitude.runQueuedFunctions();
          ready();
        });
      });
      return;
    }

    this.load(function() {
      if (window.amplitude.runQueuedFunctions) {
        window.amplitude.runQueuedFunctions();
        ready();
      }
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Amplitude.prototype.loaded = function() {
    return !!(window.amplitude && window.amplitude.getInstance().options);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Amplitude.prototype.page = function(page) {
    this.setDeviceIdFromAnonymousId(page);

    if (this.options.trackReferrer && !this.options.useAmplitudeReferral)
      this.sendReferrer();

    var category = page.category();
    var name = page.fullName();
    var opts = this.options;

    // all pages
    if (opts.trackAllPages) {
      this.track(page.track());
    }

    // categorized pages
    if (category && opts.trackCategorizedPages) {
      this.track(page.track(category));
    }

    // named pages
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   */

  Amplitude.prototype.identify = function(identify) {
    this.setDeviceIdFromAnonymousId(identify);

    var id = identify.userId();
    var traits = identify.traits();
    if (id) window.amplitude.getInstance().setUserId(id);

    // map query params from context url if opted in
    var mapQueryParams = this.options.mapQueryParams;
    var query = identify.proxy('context.page.search');
    if (!is.empty(mapQueryParams)) {
      // since we accept any arbitrary property name and we dont have conditional UI components
      // in the app where we can limit users to only add a single mapping, so excuse the temporary jank
      each(function(value, key) {
        traits[key] = query;
      }, mapQueryParams);
    }

    this.setTraits(traits);

    // Set user groups: https://amplitude.zendesk.com/hc/en-us/articles/115001361248#setting-user-groups
    var groups = identify.options(this.name).groups;
    if (groups && is.object(groups)) {
      for (var group in groups) {
        if (groups.hasOwnProperty(group))
          window.amplitude.getInstance().setGroup(group, groups[group]);
      }
    }
  };

  Amplitude.prototype.setTraits = function(traits) {
    var traitsToIncrement = this.options.traitsToIncrement || [];
    var traitsToSetOnce = this.options.traitsToSetOnce || [];
    var amplitudeIdentify = new window.amplitude.Identify();

    for (var trait in traits) {
      if (!traits.hasOwnProperty(trait)) continue;

      var shouldIncrement = traitsToIncrement.indexOf(trait) >= 0;
      var shouldSetOnce = traitsToSetOnce.indexOf(trait) >= 0;

      if (shouldIncrement) {
        amplitudeIdentify.add(trait, traits[trait]);
      }

      if (shouldSetOnce) {
        amplitudeIdentify.setOnce(trait, traits[trait]);
      }

      if (!shouldIncrement && !shouldSetOnce) {
        amplitudeIdentify.set(trait, traits[trait]);
      }
    }
    window.amplitude.identify(amplitudeIdentify);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} event
   */

  Amplitude.prototype.track = logEvent;

  function logEvent(track, dontSetRevenue) {
    this.setDeviceIdFromAnonymousId(track);

    var props = track.properties();
    var options = track.options(this.name);
    var event = track.event();
    // map query params from context url if opted in
    var mapQueryParams = this.options.mapQueryParams;
    var query = track.proxy('context.page.search');
    if (!is.empty(mapQueryParams)) {
      var params = {};
      var type;
      // since we accept any arbitrary property name and we dont have conditional UI components
      // in the app where we can limit users to only add a single mapping, so excuse the temporary jank
      each(function(value, key) {
        // add query params to either `user_properties` or `event_properties`
        type = value;
        if (type === 'user_properties') {
          params[key] = query;
        } else {
          props[key] = query;
        }
      }, mapQueryParams);

      if (type === 'user_properties')
        window.amplitude.getInstance().setUserProperties(params);
    }

    // Append extra fields to event_props
    each(function(prop, field) {
      props[prop] = track.proxy(field);
    }, this.options.appendFieldsToEventProps);

    // track the event
    if (options.groups) {
      window.amplitude
        .getInstance()
        .logEventWithGroups(event, props, options.groups);
    } else {
      window.amplitude.getInstance().logEvent(event, props);
    }

    // Ideally, user's will track revenue using an Order Completed event.
    // However, we have previously setRevenue for any event given it had a revenue property.
    // We need to keep this behavior around for backwards compatibility.
    if (track.revenue() && !dontSetRevenue)
      this.setRevenue(mapRevenueAttributes(track));
  }

  Amplitude.prototype.orderCompleted = function(track) {
    this.setDeviceIdFromAnonymousId(track);

    var products = track.products();
    var clonedTrack = track.json();
    var trackRevenuePerProduct = this.options.trackRevenuePerProduct;
    var revenueType = track.proxy('properties.revenueType');
    var revenue = track.revenue();
    var trackProductsOnce = this.options.trackProductsOnce;

    if (trackProductsOnce) {
      var allProducts = [];
      // products is object
      var productKeys = Object.keys(products);
      for (var index = 0; index < productKeys.length; index++) {
        var eachProduct = new Track({ properties: products[index] });
        allProducts.push(mapProductAttributes(eachProduct));
      }
      clonedTrack.properties.products = allProducts;
      logEvent.call(this, new Track(clonedTrack), trackRevenuePerProduct);
      return;
    }
    // Our Order Completed event however uses a products array for product level tracking.
    // We need to remove this before logging the event and then use it to track revenue.
    delete clonedTrack.properties.products;

    // There are two ways to track revenue with Amplitude:
    // 1) Log a single Revenue event for all products in the order.
    // 2) Log a Revenue event for each product in the order.
    // If the user has chosen the second option, we pass a dontSetRevenue flag to logEvent.
    logEvent.call(this, new Track(clonedTrack), trackRevenuePerProduct);

    // Loop through products array.
    each(
      function(product) {
        var price = product.price;
        var quantity = product.quantity;
        clonedTrack.properties = product;
        clonedTrack.event = 'Product Purchased';
        // Price and quantity are both required by Amplitude:
        // https://amplitude.zendesk.com/hc/en-us/articles/115001361248#tracking-revenue
        // Price could potentially be 0 so handle that edge case.
        if (trackRevenuePerProduct && price != null && quantity) {
          // Add revenueType if exists, to be able to override.
          if (revenueType) {
            clonedTrack.properties.revenueType = revenueType;
          }
          if (revenue) {
            clonedTrack.properties.revenue = revenue;
          }
          this.setRevenue(mapRevenueAttributes(new Track(clonedTrack)));
        }
        logEvent.call(this, new Track(clonedTrack), trackRevenuePerProduct);
      }.bind(this),
      products
    );
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Amplitude.prototype.group = function(group) {
    this.setDeviceIdFromAnonymousId(group);

    var groupType = group.traits()[this.options.groupTypeTrait];
    var groupValue = group.traits()[this.options.groupValueTrait];
    if (groupType && groupValue) {
      window.amplitude.getInstance().setGroup(groupType, groupValue);
    } else {
      var groupId = group.groupId();
      if (groupId) {
        window.amplitude.getInstance().setGroup('[Segment] Group', groupId);
      }
    }
  };

  /**
   * Set domain name to root domain in Amplitude.
   *
   * @api private
   * @param {string} href
   */

  Amplitude.prototype.setDomain = function(href) {
    var domain = topDomain(href);
    window.amplitude.setDomain(domain);
  };

  /**
   * If enabled by settings, set the device ID from the Segment anonymous ID.
   *
   * This logic cannot be performed at initialization time, because customers may
   * want to modify anonymous IDs between initializing Segment and sending their
   * first event.
   *
   * @api private
   * @param {Fadade} facade to get anonymousId from.
   */
  Amplitude.prototype.setDeviceIdFromAnonymousId = function(facade) {
    if (this.options.preferAnonymousIdForDeviceId) {
      this.setDeviceId(facade.anonymousId());
    }
  };

  /**
   * Override device ID in Amplitude.
   *
   * @api private
   * @param {string} deviceId
   */

  Amplitude.prototype.setDeviceId = function(deviceId) {
    if (deviceId) window.amplitude.getInstance().setDeviceId(deviceId);
  };

  Amplitude.prototype.setRevenue = function(properties) {
    var price = properties.price;
    var productId = properties.productId;
    var revenueType = properties.revenueType;
    var quantity = properties.quantity;
    var eventProps = properties.eventProps;
    var revenue = properties.revenue;

    if (this.options.useLogRevenueV2) {
      // This is to support backwards compatibility with a legacy revenue tracking strategy.
      // Using a properly formatted Order Completed event is the recommended strategy now.
      // If it is properly formatted, this voodoo will not happen.
      if (!price) {
        price = revenue;
        quantity = 1;
      }

      var ampRevenue = new window.amplitude.Revenue()
        .setPrice(price)
        .setQuantity(quantity)
        .setEventProperties(eventProps);

      if (revenueType) ampRevenue.setRevenueType(revenueType);

      if (productId) ampRevenue.setProductId(productId);

      window.amplitude.getInstance().logRevenueV2(ampRevenue);
    } else {
      window.amplitude
        .getInstance()
        .logRevenue(revenue || price * quantity, quantity, productId);
    }
  };

  // equivalent of sending includeReferrer=true in the amplitude config object when we initialize
  Amplitude.prototype.sendReferrer = function() {
    var identify = new window.amplitude.Identify();

    var referrer = this.getReferrer();
    if (!referrer || referrer.length === 0) return;

    identify.setOnce('initial_referrer', referrer);
    identify.set('referrer', referrer);

    var parts = referrer.split('/');
    if (parts.length >= 3) {
      var referringDomain = parts[2];
      identify.setOnce('initial_referring_domain', referringDomain);
      identify.set('referring_domain', referringDomain);
    }

    window.amplitude.getInstance().identify(identify);
  };

  // wrapper for testing purposes
  Amplitude.prototype.getReferrer = function() {
    return document.referrer;
  };

  function mapRevenueAttributes(track) {
    // Revenue type can be anything such as Refund, Tax, etc.
    // Using mapper here to support future ecomm event => revenue mappings (Order Refund, etc.)
    var mapRevenueType = {
      'order completed': 'Purchase',
      'completed order': 'Purchase',
      'product purchased': 'Purchase'
    };

    return {
      price: track.price(),
      productId: track.productId(),
      revenueType:
        track.proxy('properties.revenueType') ||
        mapRevenueType[track.event().toLowerCase()],
      quantity: track.quantity(),
      eventProps: track.properties(),
      revenue: track.revenue()
    };
  }

  // map product for Order Completed event
  // REF: https://segment.com/docs/destinations/amplitude/#order-completed
  function mapProductAttributes(product) {
    return {
      productId: product.productId(),
      sku: product.sku(),
      name: product.name(),
      price: product.price(),
      quantity: product.quantity(),
      category: product.category()
    };
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":100,"@segment/top-domain":1104,"component-bind":1109,"do-when":1125,"is":1131,"segmentio-facade":1158}],100:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":101,"./statics":102,"@ndhoule/defaults":8,"component-bind":1109,"debug":103,"dup":49,"extend":105,"slug-component":1165}],101:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],102:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":106,"dup":51}],103:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":104,"_process":1149,"dup":43}],104:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":107}],105:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],106:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],107:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],108:[function(require,module,exports){
  var appboyUtil = {
    /**
     * @param {string} userId
     * @param {object} options - integration options.
     * @returns {boolean} true if and only if should call window.appboy.openSession
     */
    shouldOpenSession: function(userId, options) {
      return !!(userId || !options.onlyTrackKnownUsersOnWeb);
    },

    getCustomEndpoint: function(options) {
      var customEndpoint;
      // Setup custom endpoints
      if (options.customEndpoint) {
        var endpoint = options.customEndpoint;
        var regex = new RegExp('^(http|https)://', 'i');
        customEndpoint =
          (regex.test(endpoint) ? endpoint : 'https://' + endpoint) + '/api/v3';
      } else if (options.datacenter === 'eu') {
        customEndpoint = 'https://sdk.fra-01.braze.eu/api/v3';
      }
      return customEndpoint;
    },

    getMajorVersion: function(options) {
      return Math.floor(Number(options.version));
    },
    isMajorVersionTwo: function(options) {
      return appboyUtil.getMajorVersion(options) === 2;
    },
    isMajorVersionThree: function(options) {
      return appboyUtil.getMajorVersion(options) === 3;
    },
    getConfig: function(options) {
      var config = {};
      if (
        appboyUtil.isMajorVersionTwo(options) ||
        appboyUtil.isMajorVersionThree(options)
      ) {
        // https://js.appboycdn.com/web-sdk/3.1/doc/module-appboy.html#.initialize
        config = {
          safariWebsitePushId: options.safariWebsitePushId,
          enableHtmlInAppMessages: options.enableHtmlInAppMessages,
          allowCrawlerActivity: options.allowCrawlerActivity,
          doNotLoadFontAwesome: options.doNotLoadFontAwesome,
          enableLogging: options.enableLogging,
          localization: options.localization,
          minimumIntervalBetweenTriggerActionsInSeconds:
            Number(options.minimumIntervalBetweenTriggerActionsInSeconds) || 30,
          openInAppMessagesInNewTab: options.openInAppMessagesInNewTab,
          openNewsFeedCardsInNewTab: options.openNewsFeedCardsInNewTab,
          requireExplicitInAppMessageDismissal:
            options.requireExplicitInAppMessageDismissal,
          serviceWorkerLocation: options.serviceWorkerLocation,
          sessionTimeoutInSeconds: Number(options.sessionTimeoutInSeconds) || 30
        };
      } else {
        var datacenterMappings = {
          us: 'https://sdk.iad-01.braze.com',
          us02: 'https://sdk.iad-02.braze.com',
          us03: 'https://sdk.iad-03.braze.com',
          eu: 'https://sdk.fra-01.braze.eu'
        };
        if (options.safariWebsitePushId)
          config.safariWebsitePushId = options.safariWebsitePushId;
        if (options.enableHtmlInAppMessages)
          config.enableHtmlInAppMessages = true;

        // Setup custom endpoints
        if (options.customEndpoint) {
          var endpoint = options.customEndpoint;
          var regex = new RegExp('^(http|https)://', 'i');
          config.baseUrl =
            (regex.test(endpoint) ? endpoint : 'https://' + endpoint) + '/api/v3';
        } else {
          config.baseUrl =
            (datacenterMappings[options.datacenter] ||
              'https://sdk.iad-01.braze.com') + '/api/v3';
        }
      }
      var customEndpoint = appboyUtil.getCustomEndpoint(options);
      if (customEndpoint) config.baseUrl = customEndpoint;
      return config;
    }
  };

  module.exports = appboyUtil;

  },{}],109:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var Track = require('segmentio-facade').Track;
  var each = require('@ndhoule/each');
  var del = require('obj-case').del;
  var clone = require('@ndhoule/clone');
  var appboyUtil = require('./appboyUtil');

  /**
   * Expose `Appboy` integration.
   */

  var Appboy = (module.exports = integration('Appboy')
    .global('appboy')
    .option('apiKey', '')
    .option('safariWebsitePushId', '')
    .option('allowCrawlerActivity', false)
    .option('doNotLoadFontAwesome', false)
    .option('enableLogging', false)
    .option('automaticallyDisplayMessages', true)
    .option('localization', 'en')
    .option('minimumIntervalBetweenTriggerActionsInSeconds', 30)
    .option('openInAppMessagesInNewTab', false)
    .option('openNewsFeedCardsInNewTab', false)
    .option('sessionTimeoutInSeconds', 30)
    .option('requireExplicitInAppMessageDismissal', false)
    .option('enableHtmlInAppMessages', false)
    .option('trackAllPages', false)
    .option('trackNamedPages', false)
    .option('customEndpoint', '')
    .option('version', 1)
    .option('logPurchaseWhenRevenuePresent', false)
    .option('onlyTrackKnownUsersOnWeb', false)
    .tag(
      'v1',
      '<script src="https://js.appboycdn.com/web-sdk/1.6/appboy.min.js">'
    )
    .tag(
      'v2',
      '<script src="https://js.appboycdn.com/web-sdk/2.4/appboy.min.js">'
    )
    .tag(
      'v2.7',
      '<script src="https://js.appboycdn.com/web-sdk/2.7/appboy.min.js">'
    )
    .tag(
      'v3.1',
      '<script src="https://js.appboycdn.com/web-sdk/3.1/appboy.min.js">'
    ));

  Appboy.prototype.appboyInitialize = function(userId, options, config) {
    window.appboy.initialize(options.apiKey, config);

    if (options.automaticallyDisplayMessages)
      window.appboy.display.automaticallyShowNewInAppMessages();
    if (userId) window.appboy.changeUser(userId);

    window.appboy.openSession();
  };

  Appboy.prototype.initialize = function() {
    if (appboyUtil.isMajorVersionThree(this.options)) {
      this.initializeV3();
    } else if (appboyUtil.isMajorVersionTwo(this.options)) {
      this.initializeV2();
    } else {
      this.initializeV1();
    }
  };

  Appboy.prototype.initializeV1 = function() {
    var options = this.options;
    var self = this;
    var userId = this.analytics.user().id();

    // stub out function
    /* eslint-disable */
    +(function(a, p, P, b, y) {
      window.appboy = {};
      for (
        var s = 'destroy toggleAppboyLogging setLogger openSession changeUser requestImmediateDataFlush requestFeedRefresh subscribeToFeedUpdates logCardImpressions logCardClick logFeedDisplayed requestInAppMessageRefresh logInAppMessageImpression logInAppMessageClick logInAppMessageButtonClick subscribeToNewInAppMessages removeSubscription removeAllSubscriptions logCustomEvent logPurchase isPushSupported isPushBlocked isPushGranted isPushPermissionGranted registerAppboyPushMessages unregisterAppboyPushMessages submitFeedback ab ab.User ab.User.Genders ab.User.NotificationSubscriptionTypes ab.User.prototype.getUserId ab.User.prototype.setFirstName ab.User.prototype.setLastName ab.User.prototype.setEmail ab.User.prototype.setGender ab.User.prototype.setDateOfBirth ab.User.prototype.setCountry ab.User.prototype.setHomeCity ab.User.prototype.setEmailNotificationSubscriptionType ab.User.prototype.setPushNotificationSubscriptionType ab.User.prototype.setPhoneNumber ab.User.prototype.setAvatarImageUrl ab.User.prototype.setLastKnownLocation ab.User.prototype.setUserAttribute ab.User.prototype.setCustomUserAttribute ab.User.prototype.addToCustomAttributeArray ab.User.prototype.removeFromCustomAttributeArray ab.User.prototype.incrementCustomUserAttribute ab.InAppMessage ab.InAppMessage.SlideFrom ab.InAppMessage.ClickAction ab.InAppMessage.DismissType ab.InAppMessage.OpenTarget ab.InAppMessage.ImageStyle ab.InAppMessage.Orientation ab.InAppMessage.CropType ab.InAppMessage.prototype.subscribeToClickedEvent ab.InAppMessage.prototype.subscribeToDismissedEvent ab.InAppMessage.prototype.removeSubscription ab.InAppMessage.prototype.removeAllSubscriptions ab.InAppMessage.Button ab.InAppMessage.Button.prototype.subscribeToClickedEvent ab.InAppMessage.Button.prototype.removeSubscription ab.InAppMessage.Button.prototype.removeAllSubscriptions ab.SlideUpMessage ab.ModalMessage ab.FullScreenMessage ab.ControlMessage ab.Feed ab.Feed.prototype.getUnreadCardCount ab.Card ab.ClassicCard ab.CaptionedImage ab.Banner ab.WindowUtils display display.automaticallyShowNewInAppMessages display.showInAppMessage display.showFeed display.destroyFeed display.toggleFeed sharedLib'.split(
          ' '
          ),
          i = 0;
        i < s.length;
        i++
      ) {
        for (var k = appboy, l = s[i].split('.'), j = 0; j < l.length - 1; j++)
          k = k[l[j]];
        k[l[j]] = function() {
          console && console.error('The Appboy SDK has not yet been loaded.');
        };
      }
      appboy.initialize = function() {
        console &&
        console.error(
          'Appboy cannot be loaded - this is usually due to strict corporate firewalls or ad blockers.'
        );
      };
      appboy.getUser = function() {
        return new appboy.ab.User();
      };
      appboy.getCachedFeed = function() {
        return new appboy.ab.Feed();
      };
    })(document, 'script', 'link');
    /* eslint-enable */

    // this is used to test this.loaded
    this._shim = window.appboy.initialize;

    this.load('v1', function() {
      if (appboyUtil.shouldOpenSession(userId, options)) {
        self.hasBeenInitialized = true;
        var config = appboyUtil.getConfig(options);
        self.initializeTester(options.apiKey, config);
        self.appboyInitialize(userId, options, config);
      }

      self.ready();
    });
  };

  Appboy.prototype.initializeV2 = function() {
    var options = this.options;
    var userId = this.analytics.user().id();

    /* eslint-disable */
    +(function(a, p, P, b, y) {
      window.appboy = {};
      window.appboyQueue = [];
      for (
        var s = 'initialize destroy getDeviceId toggleAppboyLogging setLogger openSession changeUser requestImmediateDataFlush requestFeedRefresh subscribeToFeedUpdates logCardImpressions logCardClick logFeedDisplayed requestInAppMessageRefresh logInAppMessageImpression logInAppMessageClick logInAppMessageButtonClick logInAppMessageHtmlClick subscribeToNewInAppMessages removeSubscription removeAllSubscriptions logCustomEvent logPurchase isPushSupported isPushBlocked isPushGranted isPushPermissionGranted registerAppboyPushMessages unregisterAppboyPushMessages submitFeedback trackLocation stopWebTracking resumeWebTracking wipeData ab ab.User ab.User.Genders ab.User.NotificationSubscriptionTypes ab.User.prototype.getUserId ab.User.prototype.setFirstName ab.User.prototype.setLastName ab.User.prototype.setEmail ab.User.prototype.setGender ab.User.prototype.setDateOfBirth ab.User.prototype.setCountry ab.User.prototype.setHomeCity ab.User.prototype.setLanguage ab.User.prototype.setEmailNotificationSubscriptionType ab.User.prototype.setPushNotificationSubscriptionType ab.User.prototype.setPhoneNumber ab.User.prototype.setAvatarImageUrl ab.User.prototype.setLastKnownLocation ab.User.prototype.setUserAttribute ab.User.prototype.setCustomUserAttribute ab.User.prototype.addToCustomAttributeArray ab.User.prototype.removeFromCustomAttributeArray ab.User.prototype.incrementCustomUserAttribute ab.User.prototype.addAlias ab.InAppMessage ab.InAppMessage.SlideFrom ab.InAppMessage.ClickAction ab.InAppMessage.DismissType ab.InAppMessage.OpenTarget ab.InAppMessage.ImageStyle ab.InAppMessage.TextAlignment ab.InAppMessage.Orientation ab.InAppMessage.CropType ab.InAppMessage.prototype.subscribeToClickedEvent ab.InAppMessage.prototype.subscribeToDismissedEvent ab.InAppMessage.prototype.removeSubscription ab.InAppMessage.prototype.removeAllSubscriptions ab.InAppMessage.Button ab.InAppMessage.Button.prototype.subscribeToClickedEvent ab.InAppMessage.Button.prototype.removeSubscription ab.InAppMessage.Button.prototype.removeAllSubscriptions ab.SlideUpMessage ab.ModalMessage ab.FullScreenMessage ab.HtmlMessage ab.ControlMessage ab.Feed ab.Feed.prototype.getUnreadCardCount ab.Card ab.ClassicCard ab.CaptionedImage ab.Banner ab.WindowUtils display display.automaticallyShowNewInAppMessages display.showInAppMessage display.showFeed display.destroyFeed display.toggleFeed sharedLib'.split(
          ' '
          ),
          i = 0;
        i < s.length;
        i++
      ) {
        for (
          var m = s[i], k = appboy, l = m.split('.'), j = 0;
          j < l.length - 1;
          j++
        )
          k = k[l[j]];
        k[l[j]] = new Function(
          'return function ' +
          m.replace(/\./g, '_') +
          '(){appboyQueue.push(arguments); return true}'
        )();
      }
      appboy.getUser = function() {
        return new appboy.ab.User();
      };
      appboy.getCachedFeed = function() {
        return new appboy.ab.Feed();
      };
    })(window, document, 'script');
    /* eslint-enable */

    if (appboyUtil.shouldOpenSession(userId, options)) {
      this.hasBeenInitialized = true;
      var config = appboyUtil.getConfig(options);
      this.initializeTester(options.apiKey, config);
      this.appboyInitialize(userId, options, config);
    }

    var versionTag = Number(options.version) === 2.7 ? 'v2.7' : 'v2';
    this.load(versionTag, this.ready);
  };

  Appboy.prototype.initializeV3 = function() {
    var options = this.options;
    var userId = this.analytics.user().id();

    /* eslint-disable */
    +function(a,p,P,b,y){
      a.appboy={};
      a.appboyQueue=[];
      for(var s="DeviceProperties Card Card.prototype.dismissCard Card.prototype.removeAllSubscriptions Card.prototype.removeSubscription Card.prototype.subscribeToClickedEvent Card.prototype.subscribeToDismissedEvent Banner CaptionedImage ClassicCard ControlCard ContentCards ContentCards.prototype.getUnviewedCardCount Feed Feed.prototype.getUnreadCardCount ControlMessage InAppMessage InAppMessage.SlideFrom InAppMessage.ClickAction InAppMessage.DismissType InAppMessage.OpenTarget InAppMessage.ImageStyle InAppMessage.Orientation InAppMessage.TextAlignment InAppMessage.CropType InAppMessage.prototype.closeMessage InAppMessage.prototype.removeAllSubscriptions InAppMessage.prototype.removeSubscription InAppMessage.prototype.subscribeToClickedEvent InAppMessage.prototype.subscribeToDismissedEvent FullScreenMessage ModalMessage HtmlMessage SlideUpMessage User User.Genders User.NotificationSubscriptionTypes User.prototype.addAlias User.prototype.addToCustomAttributeArray User.prototype.getUserId User.prototype.incrementCustomUserAttribute User.prototype.removeFromCustomAttributeArray User.prototype.setAvatarImageUrl User.prototype.setCountry User.prototype.setCustomLocationAttribute User.prototype.setCustomUserAttribute User.prototype.setDateOfBirth User.prototype.setEmail User.prototype.setEmailNotificationSubscriptionType User.prototype.setFirstName User.prototype.setGender User.prototype.setHomeCity User.prototype.setLanguage User.prototype.setLastKnownLocation User.prototype.setLastName User.prototype.setPhoneNumber User.prototype.setPushNotificationSubscriptionType InAppMessageButton InAppMessageButton.prototype.removeAllSubscriptions InAppMessageButton.prototype.removeSubscription InAppMessageButton.prototype.subscribeToClickedEvent display display.automaticallyShowNewInAppMessages display.destroyFeed display.hideContentCards display.showContentCards display.showFeed display.showInAppMessage display.toggleContentCards display.toggleFeed changeUser destroy getDeviceId initialize isPushBlocked isPushGranted isPushPermissionGranted isPushSupported logCardClick logCardDismissal logCardImpressions logContentCardsDisplayed logCustomEvent logFeedDisplayed logInAppMessageButtonClick logInAppMessageClick logInAppMessageHtmlClick logInAppMessageImpression logPurchase openSession registerAppboyPushMessages removeAllSubscriptions removeSubscription requestContentCardsRefresh requestFeedRefresh requestImmediateDataFlush resumeWebTracking setLogger stopWebTracking subscribeToContentCardsUpdates subscribeToFeedUpdates subscribeToInAppMessage subscribeToNewInAppMessages toggleAppboyLogging trackLocation unregisterAppboyPushMessages wipeData".split(" "),i=0;i<s.length;i++){for(var m=s[i],k=a.appboy,l=m.split("."),j=0;j<l.length-1;j++)k=k[l[j]];k[l[j]]=(new Function("return function "+m.replace(/\./g,"_")+"(){window.appboyQueue.push(arguments); return true}"))()}
      window.appboy.getCachedContentCards=function(){return new window.appboy.ContentCards};
      window.appboy.getCachedFeed=function(){return new window.appboy.Feed};
      window.appboy.getUser=function(){return new window.appboy.User};
    }(window,document,'script');
    /* eslint-enable */

    if (appboyUtil.shouldOpenSession(userId, options)) {
      this.hasBeenInitialized = true;
      var config = appboyUtil.getConfig(options);
      this.initializeTester(options.apiKey, config);
      this.appboyInitialize(userId, options, config);
    }

    this.load('v3.1', this.ready);
  };

  /**
   * @returns {boolean} true if integration should handle event.
   */
  Appboy.prototype.shouldHandleEvent = function() {
    return !this.options.onlyTrackKnownUsersOnWeb || this.hasBeenInitialized;
  };

  // This is used to test window.appboy.initialize
  Appboy.prototype.initializeTester = function() {};

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */
  Appboy.prototype.loaded = function() {
    var options = this.options;
    if (Number(options.version) === 2) return window.appboyQueue === null;
    return window.appboy && window.appboy.initialize !== this._shim;
  };

  Appboy.prototype.identify = function(identify) {
    var userId = identify.userId();
    var address = identify.address();
    var avatar = identify.avatar();
    var birthday = identify.birthday();
    var email = identify.email();
    var firstName = identify.firstName();
    var gender = identify.gender();
    var lastName = identify.lastName();
    var phone = identify.phone();
    var traits = clone(identify.traits());

    var options = this.options;

    if (
      this.options.onlyTrackKnownUsersOnWeb &&
      userId &&
      !this.hasBeenInitialized // To avoid calling this more than once.
    ) {
      // Rerun initial initialization.
      this.hasBeenInitialized = true;
      var config = appboyUtil.getConfig(options);
      this.initializeTester(options.apiKey, config);
      this.appboyInitialize(userId, options, config);
    }

    if (this.options.onlyTrackKnownUsersOnWeb && !this.hasBeenInitialized) {
      return;
    }

    if (userId) {
      window.appboy.changeUser(userId);
    }
    if (avatar) {
      window.appboy.getUser().setAvatarImageUrl(avatar);
    }
    if (email) {
      window.appboy.getUser().setEmail(email);
    }
    if (firstName) {
      window.appboy.getUser().setFirstName(firstName);
    }
    if (gender) {
      window.appboy.getUser().setGender(getGender(gender));
    }
    if (lastName) {
      window.appboy.getUser().setLastName(lastName);
    }
    if (phone) {
      window.appboy.getUser().setPhoneNumber(phone);
    }
    if (address) {
      window.appboy.getUser().setCountry(address.country);
      window.appboy.getUser().setHomeCity(address.city);
    }
    if (address) {
      window.appboy.getUser().setCountry(address.country);
      window.appboy.getUser().setHomeCity(address.city);
    }
    if (birthday) {
      window.appboy
        .getUser()
        .setDateOfBirth(
          birthday.getUTCFullYear(),
          birthday.getUTCMonth() + 1,
          birthday.getUTCDate()
        );
    }

    // delete all the standard traits from traits clone so that we can use appboy's setCustomAttribute on non-standard traits
    // also remove all reserved keys so we dont set them as custom attributes, otherwise Appboy rejects the entire event
    // https://www.appboy.com/documentation/Platform_Wide/#reserved-keys
    var reserved = [
      'avatar',
      'address',
      'birthday',
      'email',
      'id',
      'firstName',
      'gender',
      'lastName',
      'phone',
      'facebook',
      'twitter',
      'first_name',
      'last_name',
      'dob',
      'external_id',
      'country',
      'home_city',
      'bio',
      'gender',
      'phone',
      'email_subscribe',
      'push_subscribe'
    ];
    each(function(key) {
      delete traits[key];
    }, reserved);

    // Remove nested hash objects as Braze only supports nested array objects in identify calls
    // https://segment.com/docs/destinations/braze/#identify
    each(function(value, key) {
      if (
        value !== null &&
        typeof value === 'object' &&
        !Array.isArray(value) &&
        !isDate(value)
      ) {
        delete traits[key];
      }
    }, traits);

    each(function(value, key) {
      window.appboy.getUser().setCustomUserAttribute(key, value);
    }, traits);
  };

  /**
   * Group.
   *
   * Sets the group Id for users.
   *
   * @api public
   * @param {Group} group
   */

  Appboy.prototype.group = function(group) {
    if (!this.shouldHandleEvent()) {
      return;
    }
    var userId = group.userId();
    var groupIdKey = 'ab_segment_group_' + group.groupId();

    if (userId) {
      window.appboy.changeUser(userId);
    }
    window.appboy.getUser().setCustomUserAttribute(groupIdKey, true);
  };

  /**
   * Track.
   *
   * https://js.appboycdn.com/web-sdk/latest/doc/module-appboy.html#.logCustomEvent
   *
   * @api public
   * @param {Track} track
   */

  Appboy.prototype.track = function(track) {
    if (!this.shouldHandleEvent()) {
      return;
    }
    var userId = track.userId();
    var eventName = track.event();
    var properties = track.properties();
    // remove reserved keys from custom event properties
    // https://www.appboy.com/documentation/Platform_Wide/#reserved-keys

    if (userId) {
      window.appboy.changeUser(userId);
    }
    if (this.options.logPurchaseWhenRevenuePresent && properties.revenue) {
      // orderCompleted has same functionality of a track event with the property 'revenue'
      this.orderCompleted(track);
    } else {
      // Remove nested objects as Braze doesn't support objects in tracking calls
      // https://segment.com/docs/destinations/braze/#track
      each(function(value, key) {
        if (value != null && typeof value === 'object' && !isDate(value)) {
          delete properties[key];
        }
      }, properties);
      window.appboy.logCustomEvent(eventName, properties);
    }
  };

  /**
   * Page.
   *
   * https://js.appboycdn.com/web-sdk/latest/doc/module-appboy.html#.logCustomEvent
   *
   * @api public
   * @param {Page} page
   */

  Appboy.prototype.page = function(page) {
    if (!this.shouldHandleEvent()) {
      return;
    }
    var settings = this.options;
    if (!settings.trackAllPages && !settings.trackNamedPages) return;
    if (settings.trackNamedPages && !page.name()) return;

    var userId = page.userId();
    var pageEvent = page.track(page.fullName());
    var eventName = pageEvent.event();
    var properties = page.properties();

    if (userId) {
      window.appboy.changeUser(userId);
    }
    window.appboy.logCustomEvent(eventName, properties);
  };

  /**
   * Order Completed.
   *
   * Breaking this out because it requires certain properties that all other events don't.
   *
   * https://js.appboycdn.com/web-sdk/latest/doc/module-appboy.html#.logPurchase
   *
   * @api public
   * @param {Track} track
   */

  Appboy.prototype.orderCompleted = function(track) {
    if (!this.shouldHandleEvent()) {
      return;
    }
    var userId = track.userId();
    var products = track.products();
    var currencyCode = track.currency();
    var purchaseProperties = track.properties();

    if (userId) {
      window.appboy.changeUser(userId);
    }

    // remove reduntant properties
    del(purchaseProperties, 'products');
    del(purchaseProperties, 'currency');

    // we have to make a separate call to appboy for each product
    for (var i = 0; i < products.length; i++) {
      logProduct(products[i], currencyCode, purchaseProperties);
    }
  };

  /**
   * Get Gender.
   *
   * Returns Gender in the way that Appboy understands it.
   *
   * https://js.appboycdn.com/web-sdk/latest/doc/ab.User.html#toc4
   *
   * @api public
   * @param {string} gender
   * @return {string}
   */

  function getGender(gender) {
    if (!gender) return;
    if (typeof gender !== 'string') return;

    var femaleGenders = ['woman', 'female', 'w', 'f'];
    var maleGenders = ['man', 'male', 'm'];
    var otherGenders = ['other', 'o'];

    if (femaleGenders.indexOf(gender.toLowerCase()) > -1)
      return window.appboy.ab.User.Genders.FEMALE;
    if (maleGenders.indexOf(gender.toLowerCase()) > -1)
      return window.appboy.ab.User.Genders.MALE;
    if (otherGenders.indexOf(gender.toLowerCase()) > -1)
      return window.appboy.ab.User.Genders.OTHER;
  }

  /**
   * Logs a Purchase containing a product as described in Braze's documentation:
   * https://js.appboycdn.com/web-sdk/latest/doc/module-appboy.html#.logPurchase
   *
   * @param {Object} product Product from the Order Completed call
   * @param {String} currencyCode Currency code
   * @param {Object} extraProperties Root properties from the track call
   */
  function logProduct(product, currencyCode, extraProperties) {
    var track = new Track({ properties: product });
    var productId = track.productId();
    var price = track.price();
    var quantity = track.quantity();
    var productProperties = track.properties();
    var properties = {};

    del(productProperties, 'productId');
    del(productProperties, 'price');
    del(productProperties, 'quantity');

    for (var productProperty in productProperties) {
      if (!productProperties.hasOwnProperty(productProperty)) {
        continue;
      }

      var value = productProperties[productProperty];
      if (isValidProperty(productProperty, value)) {
        properties[productProperty] = value;
      }
    }

    for (var property in extraProperties) {
      if (!extraProperties.hasOwnProperty(property)) {
        continue;
      }

      var val = extraProperties[property];
      if (
        !productProperties.hasOwnProperty(property) &&
        isValidProperty(property, val)
      ) {
        properties[property] = val;
      }
    }

    window.appboy.logPurchase(
      productId,
      price,
      currencyCode,
      quantity,
      properties
    );
  }

  /**
   * Validates a name and value of a property, following Braze's restrictions:
   *
   * Names are limited to 255 characters in length, cannot begin with a $, and
   * can only contain alphanumeric characters and punctuation. Values can be
   * numeric, boolean, Date objects, or strings 255 characters or shorter.
   *
   * @param {String} name Name of the property.
   * @param {*} value Value of the property.
   *
   * @return {boolean} <code>true</code> if the name and value are valid, <code>false</code> otherwise.
   */
  function isValidProperty(name, value) {
    if (name.length > 255 || name.startsWith('$')) {
      return false;
    }

    if (typeof value === 'number' || typeof value === 'boolean') {
      return true;
    }

    if (isDate(value)) {
      return true;
    }

    if (
      (typeof value === 'string' || value instanceof String) &&
      value.length <= 255
    ) {
      return true;
    }

    return false;
  }

  /**
   * Validate date:
   *
   * @param {*} value Value of the property.
   *
   * @return {boolean} <code>true</code> if the value are valid, <code>false</code> otherwise.
   */
  function isDate(value) {
    return typeof value === 'object' && value instanceof Date;
  }

  },{"./appboyUtil":108,"@ndhoule/clone":7,"@ndhoule/each":10,"@segment/analytics.js-integration":110,"obj-case":1143,"segmentio-facade":1158}],110:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":111,"./statics":112,"@ndhoule/defaults":8,"component-bind":1109,"debug":113,"dup":49,"extend":115,"slug-component":1165}],111:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],112:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":116,"dup":51}],113:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":114,"_process":1149,"dup":43}],114:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":117}],115:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],116:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],117:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],118:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var isObject = require('isobject');
  var load = require('@segment/load-script');

  /**
   * Expose `Appcues` integration.
   */

  var Appcues = integration('Appcues')
    .global('Appcues')
    .option('appcuesId', '');

  /**
   * Initialize.
   *
   * http://appcues.com/docs/
   *
   * @api public
   */

  Appcues.prototype.initialize = function() {
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Appcues.prototype.loaded = function() {
    return isObject(window.Appcues);
  };

  /**
   * Load the Appcues library.
   *
   * @api private
   * @param {Function} callback
   */

  Appcues.prototype.load = function(callback) {
    var id = this.options.appcuesId || 'appcues';
    load('//fast.appcues.com/' + id + '.js', callback);
  };

  /**
   * Page.
   *
   * http://appcues.com/docs#page
   *
   * @api public
   * @param {Page} page
   */

  Appcues.prototype.page = function(page) {
    window.Appcues.page(page.name(), page.properties());
  };

  /**
   * Identify.
   *
   * http://appcues.com/docs#identify
   *
   * @api public
   * @param {Identify} identify
   */

  Appcues.prototype.identify = function(identify) {
    window.Appcues.identify(identify.userId(), identify.traits());
  };

  /**
   * Track.
   *
   * http://appcues.com/docs#track
   *
   * @api public
   * @param {Track} track
   */

  Appcues.prototype.track = function(track) {
    window.Appcues.track(track.event(), track.properties());
  };

  /**
   * Expose plugin.
   */

  // FIXME(ndhoule): Is this still necessary? I believe this API was deprecated
  module.exports = exports = function(analytics) {
    analytics.addIntegration(Appcues);
  };

  exports.Integration = Appcues;

  },{"@segment/analytics.js-integration":119,"@segment/load-script":1093,"isobject":125}],119:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":120,"./statics":121,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],120:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":122,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],121:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":123,"dup":42}],122:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],123:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],124:[function(require,module,exports){
  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  },{}],125:[function(require,module,exports){
  /*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   */

  'use strict';

  var isArray = require('isarray');

  module.exports = function isObject(val) {
    return val != null && typeof val === 'object' && isArray(val) === false;
  };

  },{"isarray":124}],126:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var querystring = require('component-querystring');
  var useHttps = require('use-https');
  var toNoCase = require('to-no-case');

  /**
   * Expose `AppNexus`.
   */

  var AppNexus = (module.exports = integration('AppNexus')
    .tag('http', '<script src="http://ib.adnxs.com/px?{{ vars }}">')
    .tag('https', '<script src="https://secure.adnxs.com/px?{{ vars }}">'));

  /**
   * Loaded.
   *
   * @return {Boolean}
   */

  AppNexus.prototype.loaded = function() {
    return true;
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  AppNexus.prototype.track = function(track) {
    var events = [];
    if (!this.options.events || !this.options.events.length) return;

    // retrieve event mappings that match the current event
    for (var i = 0; i < this.options.events.length; i++) {
      var item = this.options.events[i];
      if (item.value) {
        if (toNoCase(item.key) === toNoCase(track.event()))
          events.push(item.value);
      } else if (toNoCase(item.event) === toNoCase(track.event())) {
        events.push(item);
      }
    }
    var self = this;
    each(function(event) {
      return self.conversion(track, event);
    }, events);
  };

  /**
   * Tracks a conversion.
   *
   * @param {Track} track
   * @param {Object} event
   */

  AppNexus.prototype.conversion = function(track, event) {
    var params = event.parameters || {};
    var revenue = track.revenue() || track.total();

    var vars = {
      t: 1,
      id: event.pixelId,
      seg: event.segmentId,
      order_id: track.orderId(),
      value: (revenue || 0).toFixed(2)
    };

    each(function(value, key) {
      vars[value] = track.proxy('properties.' + key);
    }, params);

    var name = useHttps() ? 'https' : 'http';

    this.load(name, { vars: querystring.stringify(vars) });
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":127,"component-querystring":1118,"to-no-case":1171,"use-https":1180}],127:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":128,"./statics":129,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":130,"dup":40,"slug-component":1165}],128:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":132,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],129:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":133,"dup":42}],130:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":131,"_process":1149,"dup":43}],131:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":134}],132:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],133:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],134:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],135:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Group = require('segmentio-facade').Group;
  var Identify = require('segmentio-facade').Identify;
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Aptrinsic` integration.
   */
  var Aptrinsic = (module.exports = integration('Aptrinsic')
    .global('aptrinsic')
    .option('apiKey', '')
    .option('dataCenter', 'united_states')
    .tag(
      'united_states',
      '<script src="https://web-sdk.aptrinsic.com/api/aptrinsic.js?a={{ apiKey }}">'
    )
    .tag(
      'eu',
      '<script src="https://web-sdk-eu.aptrinsic.com/api/aptrinsic.js?a={{ apiKey }}">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */
  Aptrinsic.prototype.initialize = function() {
    var apiKey = this.options.apiKey;
    window.aptrinsic =
      window.aptrinsic ||
      function() {
        window.aptrinsic.q = window.aptrinsic.q || [];
        window.aptrinsic.q.push(arguments);
      };
    window.aptrinsic.p = apiKey;
    var tagName = this.options.dataCenter === 'eu' ? 'eu' : 'united_states';
    this.load(tagName, this.ready);
  };

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'aptrinsic-segment',
    version: '1.0.0'
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */
  Aptrinsic.prototype.loaded = function() {
    return !!window.aptrinsic;
  };

  /**
   * Identify.
   *
   * @param {Facade} identify
   */
  Aptrinsic.prototype.identify = function(identify) {
    var group = this.analytics.group(); // Current group in segment.analytics
    var identifyGroup = new Group({
      groupId: group.id(),
      traits: group.traits()
    });
    _identify(identify, identifyGroup);
  };

  /**
   * Group.
   *
   * @param {Facade} group
   */
  Aptrinsic.prototype.group = function(group) {
    var user = this.analytics.user(); // Current user in segment.analytics
    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });
    _identify(identify, group);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Facade} track
   */
  Aptrinsic.prototype.track = function(track) {
    window.aptrinsic(
      'event',
      track.event(),
      track.properties(),
      integrationContext
    );
  };

  function _identify(user, group) {
    window.aptrinsic('identify', user, group, integrationContext);
  }

  },{"@segment/analytics.js-integration":136,"segmentio-facade":1158}],136:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":137,"./statics":138,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],137:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":139,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],138:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":140,"dup":42}],139:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],140:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],141:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var isObject = require('isobject');

  /**
   * Expose `Atatus` integration.
   */

  var Atatus = (module.exports = integration('Atatus')
    .global('atatus')
    .option('apiKey', '')
    .option('disableAjaxMonitoring', false)
    .option('disableSpa', false)
    .option('allowedDomains', [])
    .option('enableOffline', false)
    .tag('<script src="//dmc1acwvwny3.cloudfront.net/{{ lib }}.js">'));

  /**
   * Initialize.
   *
   * https://docs.atatus.com/docs/browser-monitoring/customize-agent.html
   *
   * @api public
   */

  Atatus.prototype.initialize = function() {
    var lib = this.options.disableSpa ? 'atatus' : 'atatus-spa';
    var self = this;

    this.load({ lib: lib }, function() {
      var configOptions = {
        disableAjaxMonitoring: self.options.disableAjaxMonitoring,
        disableSPA: self.options.disableSpa
      };

      // Configure Atatus and install default handler to capture uncaught
      // exceptions
      window.atatus.config(self.options.apiKey, configOptions).install();

      // Set allowed domains and enable offline
      if (
        Array.isArray(self.options.allowedDomains) &&
        self.options.allowedDomains.length > 0
      ) {
        window.atatus.setAllowedDomains(self.options.allowedDomains);
      }
      window.atatus.enableOffline(self.options.enableOffline);

      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Atatus.prototype.loaded = function() {
    return isObject(window.atatus);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Atatus.prototype.identify = function(identify) {
    var uid = identify.userId();
    var traits = identify.traits() || {};
    var email = traits.email;
    var name = traits.name;

    if (uid) {
      window.atatus.setUser(uid, email, name);
    }

    window.atatus.setCustomData(traits);
  };

  },{"@segment/analytics.js-integration":142,"isobject":148}],142:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":143,"./statics":144,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],143:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":145,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],144:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":146,"dup":42}],145:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],146:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],147:[function(require,module,exports){
  arguments[4][124][0].apply(exports,arguments)
  },{"dup":124}],148:[function(require,module,exports){
  arguments[4][125][0].apply(exports,arguments)
  },{"dup":125,"isarray":147}],149:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Autosend` integration.
   */

  var Autosend = (module.exports = integration('Autosend')
    .global('_autosend')
    .option('appKey', '')
    .tag(
      '<script id="asnd-tracker" src="https://d2zjxodm1cz8d6.cloudfront.net/js/v1/autosend.js" data-auth-key="{{ appKey }}">'
    ));

  /**
   * Initialize.
   *
   * http://autosend.io/faq/install-autosend-using-javascript/
   *
   * @api public
   */

  Autosend.prototype.initialize = function() {
    window._autosend = window._autosend || [];
    /* eslint-disable */
    (function(){var a,b,c;a=function(f){return function(){window._autosend.push([f].concat(Array.prototype.slice.call(arguments,0))); }; }; b=["identify", "track", "cb"];for (c=0;c<b.length;c++){window._autosend[b[c]]=a(b[c]); } })();
    /* eslint-enable */
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Autosend.prototype.loaded = function() {
    return !!window._autosend;
  };

  /**
   * Identify.
   *
   * http://autosend.io/faq/install-autosend-using-javascript/
   *
   * @api public
   * @param {Identify} identify
   */

  Autosend.prototype.identify = function(identify) {
    var id = identify.userId();
    if (!id) return;

    var traits = identify.traits();
    traits.id = id;
    window._autosend.identify(traits);
  };

  /**
   * Track.
   *
   * http://autosend.io/faq/install-autosend-using-javascript/
   *
   * @api public
   * @param {Track} track
   */

  Autosend.prototype.track = function(track) {
    window._autosend.track(track.event());
  };

  },{"@segment/analytics.js-integration":150}],150:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":151,"./statics":152,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],151:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":153,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],152:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":154,"dup":42}],153:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],154:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],155:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Awesm` integration.
   */

  var Awesm = (module.exports = integration('awe.sm')
    .assumesPageview()
    .global('AWESM')
    .option('apiKey', '')
    .tag(
      '<script src="//widgets.awe.sm/v3/widgets.js?key={{ apiKey }}&async=true">'
    )
    .mapping('events'));

  /**
   * Initialize.
   *
   * http://developers.awe.sm/guides/javascript/
   *
   * @api public
   */

  Awesm.prototype.initialize = function() {
    window.AWESM = { api_key: this.options.apiKey };
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Awesm.prototype.loaded = function() {
    return !!(window.AWESM && window.AWESM._exists);
  };

  /**
   * Track.
   *
   * @api private
   * @param {Track} track
   */

  Awesm.prototype.track = function(track) {
    var user = this.analytics.user();
    var goals = this.events(track.event());
    each(function(goal) {
      window.AWESM.convert(goal, track.cents(), null, user.id());
    }, goals);
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":156}],156:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":157,"./statics":158,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],157:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":159,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],158:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":160,"dup":42}],159:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],160:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],161:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Bing`.
   *
   * https://bingads.microsoft.com/campaign/signup
   */

  var Bing = (module.exports = integration('Bing Ads')
    .global('UET')
    .global('uetq')
    .option('tagId', '')
    .tag('<script src="//bat.bing.com/bat.js">'));

  /**
   * Initialize.
   *
   * Inferred from their snippet:
   * https://gist.github.com/sperand-io/8bef4207e9c66e1aa83b
   *
   * @api public
   */

  Bing.prototype.initialize = function() {
    window.uetq = window.uetq || [];
    var self = this;

    self.load(function() {
      var setup = {
        ti: self.options.tagId,
        q: window.uetq
      };

      window.uetq = new window.UET(setup);
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Bing.prototype.loaded = function() {
    return !!(window.uetq && window.uetq.push !== Array.prototype.push);
  };

  /**
   * Page.
   *
   * @api public
   */

  Bing.prototype.page = function() {
    window.uetq.push('pageLoad');
  };

  /**
   * Track.
   *
   * Send all events then set goals based
   * on them retroactively: http://advertise.bingads.microsoft.com/en-us/uahelp-topic?market=en&project=Bing_Ads&querytype=topic&query=HLP_BA_PROC_UET.htm
   *
   * @api public
   * @param {Track} track
   */

  Bing.prototype.track = function(track) {
    var event = {
      ea: 'track',
      el: track.event()
    };

    if (track.category()) event.ec = track.category();
    if (track.revenue()) event.gv = track.revenue();

    window.uetq.push(event);
  };

  },{"@segment/analytics.js-integration":162}],162:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":163,"./statics":164,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],163:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":165,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],164:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":166,"dup":42}],165:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],166:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],167:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var foldl = require('@ndhoule/foldl');

  /**
   * Expose `Blueshift` integration.
   */

  var Blueshift = (module.exports = integration('Blueshift')
    .global('blueshift')
    .global('_blueshiftid')
    .option('apiKey', '')
    .option('retarget', false)
    .tag('<script src="https://cdn.getblueshift.com/blueshift.js">'));

  /**
   * Initialize.
   *
   * Documentation: http://getblueshift.com/documentation
   *
   * @api public
   */

  Blueshift.prototype.initialize = function() {
    window.blueshift = window.blueshift || [];
    /* eslint-disable */
    window.blueshift.load=function(a){window._blueshiftid=a;var d=function(a){return function(){blueshift.push([a].concat(Array.prototype.slice.call(arguments,0)))}},e=["identify","track","click", "pageload", "capture", "retarget"];for(var f=0;f<e.length;f++)blueshift[e[f]]=d(e[f])};
    /* eslint-enable */
    window.blueshift.load(this.options.apiKey);

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Blueshift.prototype.loaded = function() {
    return !!(window.blueshift && window._blueshiftid);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Blueshift.prototype.page = function(page) {
    if (this.options.retarget) window.blueshift.retarget();

    var properties = page.properties();
    properties._bsft_source = 'segment.com';
    properties.customer_id = this.analytics.user().id();
    properties.anonymousId = this.analytics.user().anonymousId();
    properties.category = page.category();
    properties.name = page.name();

    window.blueshift.pageload(removeBlankAttributes(properties));
  };

  /**
   * Trait Aliases.
   */

  var traitAliases = {
    created: 'created_at',
    firstName: 'firstname',
    lastName: 'lastname'
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Blueshift.prototype.identify = function(identify) {
    if (!identify.userId() && !identify.anonymousId()) {
      return this.debug('user id required');
    }
    var traits = identify.traits(traitAliases);
    traits._bsft_source = 'segment.com';
    traits.customer_id = identify.userId();
    traits.anonymousId = identify.anonymousId();

    window.blueshift.identify(removeBlankAttributes(traits));
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Blueshift.prototype.track = function(track) {
    var properties = track.properties();
    properties._bsft_source = 'segment.com';
    properties.customer_id = this.analytics.user().id();
    properties.anonymousId = this.analytics.user().anonymousId();

    window.blueshift.track(track.event(), removeBlankAttributes(properties));
  };

  /**
   * Alias.
   *
   * @param {Alias} alias
   */

  Blueshift.prototype.alias = function(alias) {
    window.blueshift.track(
      'alias',
      removeBlankAttributes({
        _bsft_source: 'segment.com',
        customer_id: alias.userId(),
        previous_customer_id: alias.previousId(),
        anonymousId: alias.anonymousId()
      })
    );
  };

  /**
   * Filters null/undefined values from an object, returning a new object.
   *
   * @api private
   * @param {Object} obj
   * @return {Object}
   */

  function removeBlankAttributes(obj) {
    return foldl(
      function(r, val, key) {
        var results = r;
        if (val !== null && val !== undefined) results[key] = val;
        return results;
      },
      {},
      obj
    );
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":168}],168:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":169,"./statics":170,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],169:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":171,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],170:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":172,"dup":42}],171:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],172:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],173:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var convertDates = require('@segment/convert-dates');
  var integration = require('@segment/analytics.js-integration');
  var md5 = require('spark-md5').hash;

  /**
   * Expose `Boomtrain` integration.
   */

  var Boomtrain = (module.exports = integration('Boomtrain')
    .global('_bt')
    .option('apiKey', '')
    .tag(
      '<script src="https://cdn.boomtrain.com/analyticstrain/{{ apiKey }}/analyticstrain.min.js"></script>'
    ));

  /**
   * Initialize.
   *
   *
   *
   * @api public
   */

  Boomtrain.prototype.initialize = function() {
    window._bt = window._bt || [];
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Boomtrain.prototype.loaded = function() {
    return !!(window._bt && window._bt.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   *
   *
   * @api public
   * @param {Identify} identify
   */

  Boomtrain.prototype.identify = function(identify) {
    var userId = identify.userId();
    if (!userId) return this.debug('user id required');
    var traits = identify.traits({ createdAt: 'created_at' });
    traits = convertDates(traits, convertDate);
    traits.email = identify.email();
    window._bt.person.set(traits);
  };

  /**
   * Page.
   *
   *
   *
   * @api public
   * @param {Page} page
   */

  Boomtrain.prototype.page = function(page) {
    var properties = page.properties();
    if (!properties.model) properties.model = getModel() || undefined;
    if (!properties.id) properties.id = md5(page.url());
    window._bt.track('viewed', properties);
  };

  /**
   * Track.
   *
   *
   *
   * @api public
   * @param {Track} track
   */

  Boomtrain.prototype.track = function(track) {
    var properties = track.properties();
    window._bt.track(track.event(), properties);
  };

  /**
   * Convert a date to the format Boomtrain supports.
   *
   * @api private
   * @param {Date} date
   * @return {number}
   */

  function convertDate(date) {
    return Math.floor(date.getTime() / 1000);
  }

  /**
   * Get model of page, stored under meta-tag with property "og:type"
   *
   * @api private
   * @param
   * @return {string}
   */

  function getModel() {
    var elements = window.document.getElementsByTagName('meta');
    var data = {};
    var pattern = 'og:';
    var key = 'property';
    for (var i = elements.length - 1; i >= 0; i--) {
      var property = elements[i].getAttribute && elements[i].getAttribute(key);
      if (property && property.match(pattern)) {
        data[property.replace(pattern, '')] = elements[i].getAttribute('content');
      }
    }
    return data.type;
  }

  },{"@segment/analytics.js-integration":174,"@segment/convert-dates":1087,"spark-md5":1166}],174:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":175,"./statics":176,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],175:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":177,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],176:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":178,"dup":42}],177:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],178:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],179:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var Track = require('segmentio-facade').Track;
  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var qs = require('component-querystring');

  /**
   * Expose `Bronto` integration.
   */

  var Bronto = (module.exports = integration('Bronto')
    .global('__bta')
    .option('siteId', '')
    .option('host', '')
    .tag('<script src="//p.bm23.com/bta.js">'));

  /**
   * Initialize.
   *
   * http://app.bronto.com/mail/help/help_view/?k=mail:home:api_tracking:tracking_data_store_js#addingjavascriptconversiontrackingtoyoursite
   * http://bronto.com/product-blog/features/using-conversion-tracking-private-domain#.Ut_Vk2T8KqB
   * http://bronto.com/product-blog/features/javascript-conversion-tracking-setup-and-reporting#.Ut_VhmT8KqB
   *
   * @api public
   */

  Bronto.prototype.initialize = function() {
    var self = this;
    var params = qs.parse(window.location.search);
    if (!params._bta_tid && !params._bta_c) {
      this.debug('missing tracking URL parameters `_bta_tid` and `_bta_c`.');
    }
    this.load(function() {
      var opts = self.options;
      self.bta = new window.__bta(opts.siteId);
      if (opts.host) self.bta.setHost(opts.host);
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Bronto.prototype.loaded = function() {
    return this.bta;
  };

  /**
   * Order Completed.
   *
   * The cookie is used to link the order being processed back to the delivery,
   * message, and contact which makes it a conversion.
   * Passing in just the email ensures that the order itself
   * gets linked to the contact record in Bronto even if the user
   * does not have a tracking cookie.
   *
   * @api private
   * @param {Track} track
   */

  Bronto.prototype.orderCompleted = function(track) {
    var user = this.analytics.user();
    var products = track.products();
    var items = [];
    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });
    var email = identify.email();

    // items
    each(function(product) {
      var track = new Track({ properties: product });
      items.push({
        item_id: track.productId() || track.id() || track.sku(),
        desc: product.description || track.name(),
        quantity: track.quantity(),
        amount: track.price()
      });
    }, products);

    // add conversion
    this.bta.addOrder({
      order_id: track.orderId(),
      email: email,
      // they recommend not putting in a date because it needs to be formatted
      // correctly: YYYY-MM-DDTHH:MM:SS
      items: items
    });
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":180,"component-querystring":1118,"segmentio-facade":1158}],180:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":181,"./statics":182,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":184,"slug-component":1165}],181:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],182:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":183,"dup":51}],183:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],184:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],185:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');

  /**
   * Expose `BugHerd` integration.
   */

  var BugHerd = (module.exports = integration('BugHerd')
    .assumesPageview()
    .global('BugHerdConfig')
    .global('_bugHerd')
    .option('apiKey', '')
    .option('showFeedbackTab', true)
    .tag('<script src="//www.bugherd.com/sidebarv2.js?apikey={{ apiKey }}">'));

  /**
   * Initialize.
   *
   * http://support.bugherd.com/home
   *
   * @api public
   */

  BugHerd.prototype.initialize = function() {
    window.BugHerdConfig = { feedback: { hide: !this.options.showFeedbackTab } };
    var ready = this.ready;
    this.load(function() {
      tick(ready);
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  BugHerd.prototype.loaded = function() {
    return !!window._bugHerd;
  };

  },{"@segment/analytics.js-integration":186,"next-tick":1142}],186:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":187,"./statics":188,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],187:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":189,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],188:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":190,"dup":42}],189:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],190:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],191:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var isObject = require('isobject');
  var extend = require('@ndhoule/extend');

  /**
   * UMD ?
   */

  var umd = typeof window.define === 'function' && window.define.amd;

  /**
   * Source.
   */

  var src = '//d2wy8f7a9ursnm.cloudfront.net/bugsnag-3.min.js';

  /**
   * Expose `Bugsnag` integration.
   */

  var Bugsnag = (module.exports = integration('Bugsnag')
    .global('Bugsnag')
    .option('apiKey', '')
    .option('releaseStage', null)
    .tag('<script src="' + src + '">'));

  /**
   * Initialize.
   *
   * https://bugsnag.com/docs/notifiers/js
   *
   * @api public
   */

  Bugsnag.prototype.initialize = function() {
    var self = this;

    if (umd) {
      window.require([src], function(bsg) {
        var bugsnag = bsg;
        bugsnag.apiKey = self.options.apiKey;
        if (self.options.releaseStage)
          bugsnag.releaseStage = self.options.releaseStage;
        window.Bugsnag = bugsnag;
        self.ready();
      });
      return;
    }

    this.load(function() {
      window.Bugsnag.apiKey = self.options.apiKey;
      if (self.options.releaseStage)
        window.Bugsnag.releaseStage = self.options.releaseStage;
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Bugsnag.prototype.loaded = function() {
    return isObject(window.Bugsnag);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Bugsnag.prototype.identify = function(identify) {
    window.Bugsnag.user = window.Bugsnag.user || {};
    extend(window.Bugsnag.user, identify.traits());
  };

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":192,"isobject":198}],192:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":193,"./statics":194,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],193:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":195,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],194:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":196,"dup":42}],195:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],196:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],197:[function(require,module,exports){
  arguments[4][124][0].apply(exports,arguments)
  },{"dup":124}],198:[function(require,module,exports){
  arguments[4][125][0].apply(exports,arguments)
  },{"dup":125,"isarray":197}],199:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Castle` integration.
   */

  var Castle = (module.exports = integration('Castle')
    .option('publishableKey', '')
    .option('autoPageview', false)
    .option('cookieDomain', false)
    .tag('<script src="//d2t77mnxyo7adj.cloudfront.net/v1/cs.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Castle.prototype.initialize = function() {
    window._castle = window._castle || {};
    window._castle.q = window._castle.q || [];
    window._castle.q.push(['setKey', this.options.publishableKey]);

    if (this.options.cookieDomain) {
      window._castle.q.push(['setCookieDomain', this.options.cookieDomain]);
    }

    if (this.options.autoPageview === false) {
      window._castle.q.push(['autoTrack', this.options.autoPageview]);
    }

    this._identifyFromCache();

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Castle.prototype.loaded = function() {
    return typeof window._castle === 'function';
  };

  /**
   * Identify
   *
   * @api public
   */

  Castle.prototype.identify = function(identify) {
    var traits = identify.traits();
    var castleOptions = identify.options(this.name);
    if (castleOptions && castleOptions.secure) {
      window._castle('secure', castleOptions.secure);
    }
    delete traits.id;
    window._castle('identify', identify.userId(), traits);
  };

  /**
   * Track
   *
   * @api public
   */

  Castle.prototype.page = function(page) {
    if (this.options.autoPageview) return;
    window._castle('page', page.url(), page.title());
  };

  /**
   * Page
   *
   * @api public
   */

  Castle.prototype.track = function(track) {
    window._castle('track', track.event(), track.properties());
  };

  /**
   * Send user information to Castle from cached user
   *
   * @api private
   */

  Castle.prototype._identifyFromCache = function() {
    // See if there is a cached user, and call identify if so
    var user = this.analytics.user();
    if (user.id()) {
      window._castle.q.push(['identify', user.id(), user.traits()]);
    }
  };

  },{"@segment/analytics.js-integration":200}],200:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":201,"./statics":202,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":204,"slug-component":1165}],201:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],202:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":203,"dup":51}],203:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],204:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],205:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Chameleon` integration.
   */

  var Chameleon = (module.exports = integration('Chameleon')
    .readyOnInitialize()
    .readyOnLoad()
    .global('chmln')
    .option('apiKey', null)
    .tag(
      '<script src="https://fast.trychameleon.com/messo/{{apiKey}}/messo.min.js"></script>'
    ));

  /**
   * Initialize Chameleon.
   *
   * @api public
   */

  Chameleon.prototype.initialize = function() {
    /* eslint-disable */
    var that=this;!function(){var c=(window.chmln||(window.chmln={}));if(c.root){return;}c.location=window.location.href.toString();c.accountToken=that.options.apiKey;var names='setup identify alias track set show on off custom help _data'.split(' ');for(var i=0;i<names.length;i++){(function(){var t=c[names[i]+'_a']=[];c[names[i]]=function(){t.push(arguments);};})()}}();
    /* eslint-enable */

    this.ready();
    this.load();
  };

  /**
   * Has the Chameleon library been loaded yet?
   *
   * @api private
   * @return {boolean}
   */

  Chameleon.prototype.loaded = function() {
    return !!window.chmln;
  };

  /**
   * Identify a user.
   *
   * @api public
   * @param {Facade} identify
   */

  Chameleon.prototype.identify = function(identify) {
    var traits = identify.traits();
    delete traits.id;

    window.chmln.identify(identify.userId(), traits);
  };

  /**
   * Associate the current user with a group of users.
   *
   * @api public
   * @param {Facade} group
   */

  Chameleon.prototype.group = function(group) {
    window.chmln.set({ company: group.traits({ id: 'uid' }) });
  };

  /**
   * Track an event.
   *
   * @param {Facade} track
   */

  Chameleon.prototype.track = function(track) {
    window.chmln.track(track.event(), track.properties());
  };

  /**
   * Change the user identifier after we know who they are.
   *
   * @param {Facade} alias
   */

  Chameleon.prototype.alias = function(alias) {
    window.chmln.alias({
      from: alias.previousId() || alias.anonymousId(),
      to: alias.userId()
    });
  };

  },{"@segment/analytics.js-integration":206}],206:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":207,"./statics":208,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],207:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":209,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],208:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":210,"dup":42}],209:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],210:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],211:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var defaults = require('@ndhoule/defaults');
  var integration = require('@segment/analytics.js-integration');
  var onBody = require('on-body');

  /**
   * Expose `Chartbeat` integration.
   */

  var Chartbeat = (module.exports = integration('Chartbeat')
    .global('_sf_async_config')
    .global('_sf_endpt')
    .global('pSUPERFLY')
    .option('domain', '')
    .option('uid', null)
    .option('video', false)
    .option('sendNameAndCategoryAsTitle', false)
    .option('subscriberEngagementKeys', [])

    .tag('<script src="//static.chartbeat.com/js/{{ script }}">'));

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Chartbeat.prototype.loaded = function() {
    return !!window.pSUPERFLY;
  };

  Chartbeat.prototype.initialize = function() {
    this.pageCalledYet = false;
    this._ready = true; // temporarily switch ready to true so that a single page call can fire
  };

  /**
   * Page.
   *
   * http://chartbeat.com/docs/handling_virtual_page_changes/
   *
   * @api public
   * @param {Page} page
   */

  Chartbeat.prototype.page = function(page) {
    this.updateConfig(page);

    // since chartbeat automatically calls a page when it loads, don't load chartbeat script until
    // first Segment page call comes in and configures global config vars using its props
    if (!this.pageCalledYet) {
      this._ready = false; // switch ready to false so that no pages after the first one can fire until _initialize has loaded chartbeat script
      this.pageCalledYet = true;
      this._initialize();
    } else {
      var props = page.properties();
      window.pSUPERFLY.virtualPage(props.path);
    }
  };

  // update chartbeat global config vars
  Chartbeat.prototype.updateConfig = function(page) {
    var category = page.category();
    var author = page.proxy('properties.author');
    var props = page.properties();

    // Chartbeat expects the document.title (props.title) to populate as title
    // This maintains legacy behavior for existing users,
    // defaults new users to the correct behavior,
    // and allows current users to opt-in to the correct behavior.
    // http://support.chartbeat.com/docs/#titles
    var title;
    if (this.options.sendNameAndCategoryAsTitle) {
      title = page.fullName() || props.title;
    } else {
      title = props.title;
    }

    // update general config
    window._sf_async_config = window._sf_async_config || {};

    if (category) window._sf_async_config.sections = category;
    if (author) window._sf_async_config.authors = author;
    if (title) window._sf_async_config.title = title;

    // update subscriber engagement
    var _cbq = (window._cbq = window._cbq || []);

    for (var key in props) {
      if (!props.hasOwnProperty(key)) continue;
      if (this.options.subscriberEngagementKeys.indexOf(key) > -1) {
        _cbq.push([key, props[key]]);
      }
    }
  };

  // sets global vars and loads Chartbeat script
  Chartbeat.prototype._initialize = function() {
    var self = this;
    var script = this.options.video ? 'chartbeat_video.js' : 'chartbeat.js';

    window._sf_async_config.useCanonical = true;
    defaults(window._sf_async_config, {
      domain: this.options.domain,
      uid: this.options.uid
    });

    onBody(function() {
      window._sf_endpt = new Date().getTime();
      // Note: Chartbeat depends on document.body existing so the script does
      // not load until that is confirmed. Otherwise it may trigger errors.
      self.load({ script: script }, self.ready); // switch ready to true for real once the script has loaded
    });
  };

  },{"@ndhoule/defaults":8,"@segment/analytics.js-integration":212,"on-body":1147}],212:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":213,"./statics":214,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":216,"slug-component":1165}],213:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],214:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":215,"dup":51}],215:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],216:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],217:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var useHttps = require('use-https');
  var each = require('@ndhoule/each');
  var is = require('is');

  /**
   * Expose `CleverTap` integration.
   */

  var CleverTap = (module.exports = integration('CleverTap')
    .global('clevertap')
    .option('clevertap_account_id', '')
    .option('region', '')
    .tag('http', '<script src="http://static.clevertap.com/js/a.js">')
    .tag(
      'https',
      '<script src="https://d2r1yp2w7bby2u.cloudfront.net/js/a.js">'
    ));

  /**
   * Initialize.
   *
   * https://support.clevertap.com/docs/website/getting-started.html
   *
   * @api public
   */

  CleverTap.prototype.initialize = function() {
    window.clevertap = {
      event: [],
      profile: [],
      account: [],
      onUserLogin: [],
      notifications: []
    };
    window.clevertap.enablePersonalization = true;
    window.clevertap.account.push({ id: this.options.clevertap_account_id });
    var region = this.options.region;
    if (region && is.string(region)) {
      // the hardcoded value actually returns 'in.' intentionally w the period because it is used for the direct integration
      // and since dealing with mongo is much more painful, we will strip here
      window.clevertap.region = region.replace('.', '');
    }
    var protocol = useHttps() ? 'https' : 'http';
    this.load(protocol, this.ready);
  };

  CleverTap.prototype.loaded = function() {
    return !!window.clevertap && window.clevertap.logout !== 'undefined';
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   *
   * this snippet should be invoked when a user logs out from your website:
      analytics.ready(function() {
        window.clevertap.logout();
      });
   */

  CleverTap.prototype.identify = function(identify) {
    var traitAliases = {
      id: 'Identity',
      name: 'Name',
      email: 'Email',
      phone: 'Phone',
      gender: 'Gender',
      birthday: 'DOB',
      avatar: 'Photo'
    };
    var traits = identify.traits(traitAliases);
    // sdk does not accept objects
    var supportedTraits = {};
    each(function(value, key) {
      if (!is.object(value)) supportedTraits[key] = value;
    }, traits);
    window.clevertap.profile.push({
      Site: supportedTraits
    });
  };

  /**
   * Alias.
   *
   * @api public
   * @param {Facade} alias
   */

  CleverTap.prototype.alias = function(alias) {
    window.clevertap.profile.push({
      Site: { Identity: alias.to() }
    });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} event
   */

  CleverTap.prototype.track = function(track) {
    var props = track.properties();
    // sdk does not accept any objects or arrays
    var supportedProps = {};
    each(function(value, key) {
      if (!is.object(value) && !is.array(value)) supportedProps[key] = value;
    }, props);
    window.clevertap.event.push(track.event(), supportedProps);
  };

  /**
   * Order Completed.
   *
   * Breaking this out because it requires certain properties that all other events don't.
   *
   * https://support.clevertap.com/docs/working-with-events.html#recording-customer-purchases
   *
   * @api public
   * @param {Track} track
   */

  CleverTap.prototype.orderCompleted = function(track) {
    var transaction = track.properties({
      order_id: 'Charged ID',
      products: 'Items'
    });
    transaction.Amount = track.total() || track.properties().revenue;
    window.clevertap.event.push('Charged', transaction);
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":218,"is":1131,"use-https":1180}],218:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":219,"./statics":220,"@ndhoule/defaults":8,"component-bind":1109,"debug":221,"dup":49,"extend":224,"slug-component":1165}],219:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],220:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":223,"dup":51}],221:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":222,"_process":1149,"dup":43}],222:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":225}],223:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],224:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],225:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],226:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var isObject = require('isobject');

  /**
   * Expose `Clicky` integration.
   */

  var Clicky = (module.exports = integration('Clicky')
    .assumesPageview()
    .global('clicky')
    .global('clicky_site_ids')
    .global('clicky_custom')
    .option('siteId', null)
    .tag('<script src="//static.getclicky.com/js"></script>'));

  /**
   * Initialize.
   *
   * http://clicky.com/help/customization
   *
   * @api public
   */

  Clicky.prototype.initialize = function() {
    var user = this.analytics.user();
    window.clicky_site_ids = window.clicky_site_ids || [this.options.siteId];
    this.identify(
      new Identify({
        userId: user.id(),
        traits: user.traits()
      })
    );
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Clicky.prototype.loaded = function() {
    return isObject(window.clicky);
  };

  /**
   * Page.
   *
   * http://clicky.com/help/customization#/help/custom/manual
   *
   * @api public
   * @param {Page} page
   */

  Clicky.prototype.page = function(page) {
    var properties = page.properties();
    var name = page.fullName();
    window.clicky.log(properties.path, name || properties.title);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} [id]
   */

  Clicky.prototype.identify = function(identify) {
    window.clicky_custom = window.clicky_custom || {};
    window.clicky_custom.session = window.clicky_custom.session || {};
    var traits = identify.traits();

    var username = identify.username();
    var email = identify.email();
    var name = identify.name();

    if (username || email || name) traits.username = username || email || name;

    extend(window.clicky_custom.session, traits);
  };

  /**
   * Track.
   *
   * http://clicky.com/help/customization#/help/custom/manual
   *
   * @api public
   * @param {Track} event
   */

  Clicky.prototype.track = function(track) {
    window.clicky.goal(track.event(), track.revenue());
  };

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":227,"isobject":233,"segmentio-facade":1158}],227:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":228,"./statics":229,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],228:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":230,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],229:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":231,"dup":42}],230:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],231:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],232:[function(require,module,exports){
  arguments[4][124][0].apply(exports,arguments)
  },{"dup":124}],233:[function(require,module,exports){
  arguments[4][125][0].apply(exports,arguments)
  },{"dup":125,"isarray":232}],234:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var useHttps = require('use-https');
  var trample = require('@segment/trample');

  /**
   * Expose `Comscore` integration.
   */

  var Comscore = (module.exports = integration('comScore')
    .global('_comscore')
    .global('COMSCORE')
    .option('c1', '2')
    .option('c2', '')
    .option('comscorekw', '')
    .option('consentFlag', '')
    .tag('https', '<script src="https://sb.scorecardresearch.com/cs/{{ c2 }}/beacon.js">')
    .tag('http', '<script src="https://sb.scorecardresearch.com/cs/{{ c2 }}/beacon.js">'));

  /**
   * Initialize.
   *
   * @api public
   *
   * Does not load script until `page` is called to capture the params on
   * that initial `page` and pass it in on the inferred native comScore.
   */

  Comscore.prototype.initialize = function() {
    this.pageCalledYet = false;
    this._ready = true; // temporarily switch ready to true so single page call can fire
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Comscore.prototype.loaded = function() {
    return !!window.COMSCORE;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Object} page
   */

  Comscore.prototype.page = function(page) {
    this.comScoreParams = this.mapComscoreParams(page);

    if (!this.pageCalledYet) {
      this._ready = false;
      this.pageCalledYet = true;
      this._initialize();
    } else {
      window.COMSCORE.beacon(this.comScoreParams);
    }
  };

  Comscore.prototype._initialize = function() {
    window._comscore = window._comscore || [];

    if (Object.keys(this.comScoreParams).length > 0) {
      window._comscore.push(this.comScoreParams);
    }

    var tagName = useHttps() ? 'https' : 'http';
    this.load(tagName, this.ready);
  };

  Comscore.prototype.mapComscoreParams = function(page) {
    var beaconParamMap = this.options.beaconParamMap;
    var properties = page.properties();
    var flatProperties = trample(page.properties());
    var flatContext = trample(page.context());
    var consentValue;

    var comScoreParams = {};

    Object.keys(beaconParamMap).forEach(function(property) {
      if (property in properties) {
        var key = beaconParamMap[property];
        var value = properties[property];
        comScoreParams[key] = value;
      }
    });

    if (this.options.consentFlag) {
      if (flatProperties.hasOwnProperty(this.options.consentFlag)) {
        consentValue = page.proxy('properties.' + this.options.consentFlag)
      } else if (flatContext.hasOwnProperty(this.options.consentFlag)) {
        consentValue = page.proxy('context.' + this.options.consentFlag)
      }
      if (
        consentValue !== undefined &&
        !(
          String(consentValue).match(/^1(-|Y|N){3}/g) &&
          String(consentValue).split('')[2] === '-'
        )
      ) {
        if (
          String(consentValue) === 'true' ||
          String(consentValue) === '1' ||
          (String(consentValue).match(/^1(-|Y|N){3}/g) &&
            String(consentValue).split('')[2] === 'N')
        ) {
          consentValue = '1';
        } else if (
          String(consentValue) === 'false' ||
          String(consentValue) === '0' ||
          (String(consentValue).match(/^1(-|Y|N){3}/g) &&
            String(consentValue).split('')[2] === 'Y')
        ) {
          consentValue = '0';
        } else {
          consentValue = '';
        }
        comScoreParams.cs_ucfr = consentValue;
      }
    }

    comScoreParams.c1 = this.options.c1;
    comScoreParams.c2 = this.options.c2;
    if (this.options.comscorekw.length) {
      comScoreParams.comscorekw = this.options.comscorekw;
    }

    return comScoreParams;
  };

  },{"@segment/analytics.js-integration":235,"@segment/trample":1105,"use-https":1180}],235:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":236,"./statics":237,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],236:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":238,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],237:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":239,"dup":42}],238:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],239:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],240:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('$CVO');

  /**
   * Expose `Convertro` integration.
   */

  var Convertro = (module.exports = integration('Convertro')
    .global('$CVO')
    .global('__cvo')
    .option('account', '')
    .option('hybridAttributionModel', false)
    .mapping('events')
    .tag('<script src="//d1ivexoxmp59q7.cloudfront.net/{{ account }}/live.js">'));

  /**
   * Initialize.
   */

  Convertro.prototype.initialize = function() {
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Convertro.prototype.loaded = function() {
    return typeof (window.$CVO && window.$CVO.trackEvent) === 'function';
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   */

  Convertro.prototype.identify = function(identify) {
    if (!identify.userId()) return;
    push('trackUser', identify.traits());
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Convertro.prototype.track = function(track) {
    var events = this.events(track.event());
    var revenue = track.revenue();
    var total = track.total();
    each(function(type) {
      push('trackEvent', {
        amount: total || revenue,
        id: track.orderId(),
        type: type
      });
    }, events);
  };

  /**
   * Order Completed & Attribution model
   *   - Convertro has two attribution models
   *   - the first is for when you don't know if clients are new/repeat
   *   - the second is for when you know if a client is new/repeat
   *   - The hybridAttributionModel allows users to
   *   - move between the two attribution models
   *
   *   - option=hybridAttributionModel (true)
   *   - type="sale" && "sale.new"(.repeat=false), when it's a new order.
   *   - type="sale" && "sale.repeat"(.repeat=true), when it's repeat order
   *   - type="sale" (.repeat=null), when you can't figure out if an order is repeat / new
   *
   *   - option=hybridAttributionModel (false)
   *   - type="sale.new"(.repeat=false), when it's a new order.
   *   - type="sale.repeat"(.repeat=true), when it's repeat order.
   *   - type="sale" (.repeat=null), when you can't figure out if an order is repeat / new
   *
   *
   * @api public
   * @param {Track} track
   */

  Convertro.prototype.orderCompleted = function(track) {
    var repeat = track.proxy('properties.repeat');
    var amount = track.total() || track.revenue();
    var id = track.orderId();

    if (typeof repeat === 'boolean') {
      push('trackEvent', {
        id: id,
        type: repeat ? 'sale.repeat' : 'sale.new',
        amount: amount
      });
    }

    if (typeof repeat !== 'boolean' || this.options.hybridAttributionModel) {
      push('trackEvent', {
        id: id,
        type: 'sale',
        amount: amount
      });
    }
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":241,"global-queue":1127}],241:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":242,"./statics":243,"@ndhoule/defaults":8,"component-bind":1109,"debug":244,"dup":49,"extend":247,"slug-component":1165}],242:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],243:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":246,"dup":51}],244:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":245,"_process":1149,"dup":43}],245:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":248}],246:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],247:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],248:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],249:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `CrazyEgg` integration.
   */

  var CrazyEgg = (module.exports = integration('Crazy Egg')
    .assumesPageview()
    .global('CE2')
    .option('accountNumber', '')
    .tag(
      '<script src="//script.crazyegg.com/pages/scripts/{{ path }}.js?{{ cacheBuster }}">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  CrazyEgg.prototype.initialize = function() {
    var number = this.options.accountNumber;
    var path = number.slice(0, 4) + '/' + number.slice(4);
    var cacheBuster = Math.floor(new Date().getTime() / 3600000);
    this.load({ path: path, cacheBuster: cacheBuster }, this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  CrazyEgg.prototype.loaded = function() {
    return !!window.CE2;
  };

  },{"@segment/analytics.js-integration":250}],250:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":251,"./statics":252,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],251:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":253,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],252:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":254,"dup":42}],253:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],254:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],255:[function(require,module,exports){
  'use strict';

  var objCase = require('obj-case');
  var extend = require('@ndhoule/extend');
  var values = require('@ndhoule/values');
  var pick = require('@ndhoule/pick');
  var each = require('@ndhoule/each');
  var md5 = require('md5');
  var isEmail = require('is-email');
  var useHttps = require('use-https');
  var is = require('is');

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Regex to indentify the devices.
   */
  var ipadRegex = /iPad/;
  var mobileRegex = /Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Silk/;

  /**
   * Expose Criteo integration.
   */

  var Criteo = (module.exports = integration('Criteo')
    .option('account', '')
    .option('homeUrl', '')
    .option('supportingUserData', {})
    .option('supportingPageData', {})
    .tag('http', '<script src="http://static.criteo.net/js/ld/ld.js">')
    .tag('https', '<script src="https://static.criteo.net/js/ld/ld.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Criteo.prototype.initialize = function() {
    var account = this.options.account;

    window.criteo_q = window.criteo_q || [];
    window.criteo_q.push({ event: 'setAccount', account: account });
    window.criteo_q.push({ event: 'setSiteType', type: getDeviceType() });

    var protocol = useHttps() ? 'https' : 'http';
    this.load(protocol, this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Criteo.prototype.loaded = function() {
    // what are required properties or functions that you need available on the `window`
    // before the integration marks itself as ready?
    return !!(window.criteo_q && window.criteo_q.push !== Array.prototype.push);
  };

  /**
   * Page
   *
   * @api public
   */

  Criteo.prototype.page = function(page) {
    var homeUrl = this.options.homeUrl;
    var pageName = (page.name() || '').toLowerCase();
    var path = page.path();
    var url = page.url();
    var event = [{ event: 'viewHome' }];
    var payload = [];
    var supportingPageData = this.options.supportingPageData;
    var properties = page.properties(this.options.supportingPageData);
    var extraData = pick(values(supportingPageData), properties);

    if (!is.empty(extraData)) {
      window.criteo_q.push(extend(extraData, { event: 'setData' }));
    }

    if (url === homeUrl || pageName === 'home' || path === '/') {
      payload = event.concat(this.setExtraData(page));
      window.criteo_q.push.apply(window.criteo_q, payload);
    }
  };

  Criteo.prototype.track = function(track) {
    var eventMappings = this.options.eventMappings || {};
    var event = track.event();
    var eventTypeMappings = {
      viewItem: 'productViewed',
      viewList: 'productListViewed',
      viewBasket: 'cartViewed',
      trackTransaction: 'orderCompleted'
    };
    var eventType = eventMappings[event];

    if (eventTypeMappings[eventType]) {
      return this[eventTypeMappings[eventType]](track);
    }
  };

  /**
   * Product Viewed
   *
   * @api public
   */

  Criteo.prototype.productViewed = function(track) {
    var productId = track.productId() || '';

    // Handling this separately so that it will not break for non-string productId
    // This will also get rid of string productId with only space(s) in it.
    if (typeof productId === 'string') {
      productId = productId.trim();
    }

    if (!productId) {
      // productId is madatory
      return;
    }

    var event = [{ event: 'viewItem', item: productId }];
    var payload = [];

    payload = event.concat(this.setExtraData());

    window.criteo_q.push.apply(window.criteo_q, payload);
  };

  /**
   * Product List Viewed
   *
   * @api public
   */

  Criteo.prototype.productListViewed = function(track) {
    var products = track.products() || [];
    var productIds = [];

    each(function(product) {
      var id = objCase.find(product, 'productId');
      if (id) productIds.push(id);
    }, products);

    var event = [{ event: 'viewList', item: productIds }];
    var payload = [];

    payload = event.concat(this.setExtraData());

    window.criteo_q.push.apply(window.criteo_q, payload);
  };

  /**
   * Cart Viewed
   *
   * @api public
   */

  Criteo.prototype.cartViewed = function(track) {
    var products = getProductMetadata(track);
    var event = [{ event: 'viewBasket', item: products }];
    var payload = [];

    payload = event.concat(this.setExtraData());

    window.criteo_q.push.apply(window.criteo_q, payload);
  };

  /**
   * Order Completed
   *
   * @api public
   */

  Criteo.prototype.orderCompleted = function(track) {
    var orderId = objCase.find(track.properties(), 'orderId');
    var products = getProductMetadata(track);
    var event = [
      {
        event: 'trackTransaction',
        id: orderId || '',
        item: products
      }
    ];
    var payload = [];

    payload = event.concat(this.setExtraData());

    window.criteo_q.push.apply(window.criteo_q, payload);
  };

  /**
   * Add extra data to each tag payload.
   * Extra data is defined as an integration setting.
   *
   */

  Criteo.prototype.setExtraData = function() {
    var ret = [];
    var extraData = {};

    // Add userId if available as customer_id while email is not passed in traits.
    var userId = this.analytics.user().id();

    // Check cached traits for any that have been defined as extraData params.
    var traits = this.analytics.user().traits();

    // Criteo has a special tag for emails.
    // They also require all emails get passed as md5 hashes.
    if (traits.email) {
      ret.push({ event: 'setHashedEmail', email: md5(traits.email) });
      delete traits.email;
    } else if (userId && !isEmail(userId)) {
      // Criteo does NOT want emails passed as customer_id.
      // Also if email is specified this shouldn't be tracked
      ret.push({ event: 'setCustomerId', id: userId });
    }

    // Add supporting user data.
    var supportingUserData = this.options.supportingUserData;

    each(function(value, key) {
      var trait = objCase.find(traits, key);

      if (trait) extraData[value] = trait;
    }, supportingUserData);

    if (!is.empty(extraData)) {
      // { event: "setData", ui_membership: "free", ui_age: "30"}
      ret.push(extend(extraData, { event: 'setData' }));
    }

    return ret;
  };

  /**
   * Get metadata from events with products array
   *
   * @api private
   */

  function getProductMetadata(track) {
    var products = track.proxy('properties.products') || [];

    products = products.map(function(product) {
      var id = objCase.find(product, 'productId') || '';
      var price = product.price || '';
      var quantity = product.quantity || '';

      return { id: id, price: price, quantity: quantity };
    });

    return products;
  }

  /**
   * Get Device Type
   *
   * @api private
   *
   * REF: https://support.criteo.com/s/article?article=202806931-Managing-your-different-site-types&language=en_US
   */

  function getDeviceType() {
    if (!navigator || !navigator.userAgent) {
      return 'd';
    }
    if (ipadRegex.test(navigator.userAgent)) {
      return 't';
    }
    if (mobileRegex.test(navigator.userAgent)) {
      return 'm';
    }
    return 'd';
  }

  },{"@ndhoule/each":10,"@ndhoule/extend":13,"@ndhoule/pick":18,"@ndhoule/values":20,"@segment/analytics.js-integration":256,"is":1131,"is-email":263,"md5":1137,"obj-case":1143,"use-https":1180}],256:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":257,"./statics":258,"@ndhoule/defaults":8,"component-bind":1109,"debug":259,"dup":49,"extend":262,"slug-component":1165}],257:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],258:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":261,"dup":51}],259:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":260,"_process":1149,"dup":43}],260:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":264}],261:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],262:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],263:[function(require,module,exports){
  'use strict';

  // Email address matcher.
  var matcher = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

  /**
   * Loosely validate an email address.
   *
   * @param {string} string
   * @return {boolean}
   */
  function isEmail(string) {
    return matcher.test(string);
  }

  /*
   * Exports.
   */

  module.exports = isEmail;

  },{}],264:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],265:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var Track = require('segmentio-facade').Track;
  var bind = require('component-bind');
  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var iso = require('@segment/to-iso-string');
  var push = require('global-queue')('_curebitq');
  var throttle = require('throttleit');
  var when = require('do-when');

  /**
   * Expose `Curebit` integration.
   */

  var Curebit = (module.exports = integration('Curebit')
    .global('_curebitq')
    .global('curebit')
    .option('campaigns', {})
    .option('device', '')
    .option('iframeBorder', 0)
    .option('iframeHeight', '480')
    .option('iframeId', 'curebit_integration')
    .option('iframeWidth', '100%')
    .option('insertIntoId', '')
    .option('responsive', true)
    .option('server', 'https://www.curebit.com')
    .option('siteId', '')
    .option('customUrl', '')
    .tag('<script src="{{ src }}">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Curebit.prototype.initialize = function() {
    var url =
      this.options.customUrl ||
      '//d2jjzw81hqbuqv.cloudfront.net/integration/curebit-1.0.min.js';

    push('init', { site_id: this.options.siteId, server: this.options.server });

    this.load({ src: url }, this.ready);

    // throttle the call to `page` since curebit needs to append an iframe
    this.page = throttle(bind(this, this.page), 250);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Curebit.prototype.loaded = function() {
    return !!window.curebit;
  };

  /**
   * Page.
   *
   * Call the `register_affiliate` method of the Curebit API that will load a
   * custom iframe onto the page, only if this page's path is marked as a
   * campaign.
   *
   * http://www.curebit.com/docs/affiliate/registration
   *
   * This is throttled to prevent accidentally drawing the iframe multiple times,
   * from multiple `.page()` calls. The `250` is from the curebit script.
   *
   * @api private
   * @param {String} url
   * @param {String} id
   * @param {Function} fn
   */

  // FIXME: Is this deprecated? Seems unused
  Curebit.prototype.injectIntoId = function(url, id, fn) {
    when(
      function() {
        return document.getElementById(id);
      },
      function() {
        var script = document.createElement('script');
        script.src = url;
        var parent = document.getElementById(id);
        parent.appendChild(script);
        onload(script, fn);
      }
    );
  };

  /**
   * Campaign tags.
   *
   * @api public
   * @param {Page} page
   */

  Curebit.prototype.page = function() {
    var user = this.analytics.user();
    var campaigns = this.options.campaigns;
    var path = window.location.pathname;
    if (!campaigns[path]) return;

    var tags = (campaigns[path] || '').split(',');
    if (!tags.length) return;

    var settings = {
      responsive: this.options.responsive,
      device: this.options.device,
      campaign_tags: tags,
      iframe: {
        width: this.options.iframeWidth,
        height: this.options.iframeHeight,
        id: this.options.iframeId,
        frameborder: this.options.iframeBorder,
        container: this.options.insertIntoId
      }
    };

    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });

    // if we have an email, add any information about the user
    if (identify.email()) {
      settings.affiliate_member = {
        email: identify.email(),
        first_name: identify.firstName(),
        last_name: identify.lastName(),
        customer_id: identify.userId()
      };
    }

    push('register_affiliate', settings);
  };

  /**
   * Order completed.
   *
   * Fire the Curebit `register_purchase` with the order details and items.
   *
   * https://www.curebit.com/docs/ecommerce/custom
   *
   * @api public
   * @param {Track} track
   */

  Curebit.prototype.orderCompleted = function(track) {
    var user = this.analytics.user();
    var orderId = track.orderId();
    var products = track.products();
    var props = track.properties();
    var items = [];
    var identify = new Identify({
      traits: user.traits(),
      userId: user.id()
    });

    each(function(product) {
      var track = new Track({ properties: product });
      items.push({
        product_id: track.productId() || track.id() || track.sku(),
        quantity: track.quantity(),
        image_url: product.image,
        price: track.price(),
        title: track.name(),
        url: product.url
      });
    }, products);

    push('register_purchase', {
      order_date: iso(props.date || new Date()),
      order_number: orderId,
      coupon_code: track.coupon(),
      subtotal: track.total(),
      customer_id: identify.userId(),
      first_name: identify.firstName(),
      last_name: identify.lastName(),
      email: identify.email(),
      items: items
    });
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":266,"@segment/to-iso-string":1103,"component-bind":1109,"do-when":1125,"global-queue":1127,"segmentio-facade":1158,"throttleit":1167}],266:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":267,"./statics":268,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":270,"slug-component":1165}],267:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],268:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":269,"dup":51}],269:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],270:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],271:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var alias = require('@segment/alias');
  var convertDates = require('@segment/convert-dates');
  var integration = require('@segment/analytics.js-integration');

  var MAX_YEAR_SUPPORTED_AS_UNIX = 1970;
  /**
   * Expose `Customerio` integration.
   */

  var Customerio = (module.exports = integration('Customer.io')
    .global('_cio')
    .option('siteId', '')
    .option('datacenter', '')
    .tag(
      'eu-tag',
      '<script id="cio-tracker" src="https://assets.customer.io/assets/track-eu.js" data-site-id="{{ siteId }}">'
    )
    .tag(
      'global-tag',
      '<script id="cio-tracker" src="https://assets.customer.io/assets/track.js" data-site-id="{{ siteId }}">'
    ));

  /**
   * Initialize.
   *
   * http://customer.io/docs/api/javascript.html
   *
   * @api public
   */

  Customerio.prototype.initialize = function() {
    window._cio = window._cio || [];
    /* eslint-disable */
    (function(){var a,b,c; a = function(f){return function(){window._cio.push([f].concat(Array.prototype.slice.call(arguments,0))); }; }; b = ['identify', 'track']; for (c = 0; c < b.length; c++) {window._cio[b[c]] = a(b[c]); } })();
    /* eslint-enable */

    if (this.options.datacenter === 'eu' && this.templates['eu-tag']) {
      this.load('eu-tag', this.ready)
    } else {
      this.load('global-tag', this.ready);
    }
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Customerio.prototype.loaded = function() {
    return !!(window._cio && window._cio.push !== Array.prototype.push);
  };

  /**
   * Page.
   *
   * https://learn.customer.io/api/#apipageview_event
   *
   * @api public
   * @param {Page} page
   */

  Customerio.prototype.page = function(page) {
    var name = page.name() || page.url();
    window._cio.page(name, page.properties());
  };

  /**
   * Identify.
   *
   * http://customer.io/docs/api/javascript.html#section-Identify_customers
   *
   * @api public
   * @param {Identify} identify
   */

  Customerio.prototype.identify = function(identify) {
    if (!identify.userId()) return this.debug('user id required');
    var traits = identify.traits({ createdAt: 'created' });
    traits = alias(traits, { created: 'created_at' });
    traits = convertDates(traits, convertDate);
    window._cio.identify(traits);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Customerio.prototype.group = function(group) {
    var traits = group.traits();
    var user = this.analytics.user();

    traits = alias(traits, function(trait) {
      return 'Group ' + trait;
    });

    this.identify(
      new Identify({
        userId: user.id(),
        traits: traits
      })
    );
  };

  /**
   * Track.
   *
   * http://customer.io/docs/api/javascript.html#section-Track_a_custom_event
   *
   * @api public
   * @param {Track} track
   */

  Customerio.prototype.track = function(track) {
    var properties = track.properties();
    properties = convertDates(properties, convertDate);
    window._cio.track(track.event(), properties);
  };

  /**
   * Convert a date to the format Customer.io supports.
   *
   * @api private
   * @param {Date} date
   * @return {number}
   */

  function convertDate(date) {
    if (date.getFullYear() < MAX_YEAR_SUPPORTED_AS_UNIX) {
      return date.toISOString();
    }
    return Math.floor(date.getTime() / 1000);
  }

  },{"@segment/alias":21,"@segment/analytics.js-integration":272,"@segment/convert-dates":1087,"segmentio-facade":1158}],272:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":273,"./statics":274,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],273:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":275,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],274:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":276,"dup":42}],275:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],276:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],277:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');

  /**
   * Expose Cxense integration.
   */

  var Cxense = (module.exports = integration('Cxense')
    .option('customerPrefix', '')
    .option('siteId', '')
    .option('persistedQueryId', '')
    .option('origin', '')
    .option('setExternalId', false)
    .tag('<script src="//cdn.cxense.com/cx.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Cxense.prototype.initialize = function() {
    // put your initialization logic here
    window.cX = window.cX || {};
    window.cX.callQueue = window.cX.callQueue || [];
    window.cX.callQueue.push(['setSiteId', this.options.siteId]);
    window.cX.callQueue.push([
      'setEventAttributes',
      {
        origin: this.options.customerPrefix + '-' + this.options.origin,
        persistedQueryId: this.options.persistedQueryId
      }
    ]);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Cxense.prototype.loaded = function() {
    return !!(window.cX && window.cX.callQueue.push !== Array.prototype.push);
  };

  /**
   * Page
   *
   * @api public
   */

  Cxense.prototype.page = function(page) {
    var properties = page.properties();

    // These properties are sent in the subsequent page view event.
    // No need to include them as custom parameters.
    delete properties.url;
    delete properties.referrer;

    var payload = {};

    // Cxense attempts to stringify all property values.
    // Arrays of primitive data types works but Objects end up as [object Object].
    // This loop ensures they are not added to the payload.
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        var property = properties[key];

        if (is.object(property)) continue;

        // If the property is an array, check if any elements are objects.
        if (is.array(property) && property.some(is.object)) continue;

        // Finally, we should be able to safely add the prop to the payload.
        payload[key] = property;
      }
    }

    window.cX.callQueue.push(['setCustomParameters', payload]);

    // Add external Id if user has a userId cached from a previous identify event.
    var id = this.analytics.user().id();

    if (id && this.options.setExternalId) {
      window.cX.callQueue.push([
        'addExternalId',
        { id: id, type: this.options.customerPrefix }
      ]);
    }

    // Add lat/long info if passed in the context.
    var latitude = page.proxy('context.location.latitude');
    var longitude = page.proxy('context.location.longitude');

    if (latitude && longitude) {
      window.cX.callQueue.push(['setGeoPosition', latitude, longitude]);
    }

    window.cX.callQueue.push([
      'sendPageViewEvent',
      {
        location: page.url(),
        referrer: page.referrer(),
        useAutoRefreshCheck: false
      }
    ]);
  };

  /**
   * Track
   *
   * @api public
   */

  Cxense.prototype.track = function(track) {
    // send event data
    var properties = track.properties();

    // Cxense requires property values be strings or numbers.
    // Need to sanitize as it will drop events if the payload has other data types.
    var payload = {};
    for (var key in properties) {
      if (properties.hasOwnProperty(key)) {
        var property = properties[key];

        // Numbers and strings are passed as they are.
        // Booleans and dates can be stringified.
        // All other data types are discarded.
        if (is.number(property) || is.string(property)) {
          payload[key] = property;
        } else if (is.bool(property) || is.date(property)) {
          payload[key] = property.toString();
        }
      }
    }
    window.cX.callQueue.push(['sendEvent', track.event(), payload]);
  };

  },{"@segment/analytics.js-integration":278,"is":1131}],278:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":279,"./statics":280,"@ndhoule/defaults":8,"component-bind":1109,"debug":281,"dup":49,"extend":284,"slug-component":1165}],279:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],280:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":283,"dup":51}],281:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":282,"_process":1149,"dup":43}],282:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":285}],283:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],284:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],285:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],286:[function(require,module,exports){
  'use strict';

  /**
   * Module Dependencies
   */

  var integration = require('@segment/analytics.js-integration');
  var each = require('@ndhoule/each');
  var foldl = require('@ndhoule/foldl');
  var qs = require('component-querystring');
  var find = require('obj-case').find;
  var toNoCase = require('to-no-case');

  /**
   * Expose `DoubleClick Floodlight` integration.
   */

  var Floodlight = (module.exports = integration('DoubleClick Floodlight')
    .option('source', '')
    .option('getDoubleClickId', false)
    .option('googleNetworkId', '')
    .option('segmentWriteKey', '')
    .option('useTransactionCounting', false)
    .tag(
      'counter',
      '<iframe src="https://{{ src }}.fls.doubleclick.net/activityi;src={{ src }};type={{ type }};cat={{ cat }};dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord={{ ord }}{{ customVariables }}?">'
    )
    .tag(
      'sales',
      '<iframe src="https://{{ src }}.fls.doubleclick.net/activityi;src={{ src }};type={{ type }};cat={{ cat }};qty={{ qty }};cost={{ cost }};dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;ord={{ ord }}{{ customVariables }}?">'
    )
    .tag(
      'doubleclick id',
      '<img src="//cm.g.doubleclick.net/pixel?google_nid={{ googleNetworkId }}&segment_write_key={{ segmentWriteKey }}&google_hm={{ partnerProvidedId }}"/>'
    ));

  /**
   * Initialize.
   *
   * https://support.google.com/dcm/partner/answer/4293719?hl=en&ref_topic=4241548
   * @api public
   */

  Floodlight.prototype.initialize = function() {
    // In the initialize method:
    // Check if we should load the DoubleClick ID pixel (and only proceed if we haven't already done so).
    if (this.options.getDoubleClickId && this.options.googleNetworkId) {
      // Load the doubleclick pixel.
      this.load('doubleclick id', {
        googleNetworkId: this.options.googleNetworkId,
        segmentWriteKey: this.options.segmentWriteKey,
        // Hosted match table id https://developers.google.com/authorized-buyers/rtb/cookie-guide#match-table
        partnerProvidedId: btoa(this.analytics.user().anonymousId())
      });
    }
    this.ready();
  };

  /**
   * Track
   * Fire Floodlight image tags per Segment event
   *
   * https://support.google.com/dcm/partner/answer/2823425?hl=en&ref_topic=4241548
   * https://support.google.com/dcm/partner/answer/2823363
   * @api public
   * @param {Track}
   */

  Floodlight.prototype.track = function(track) {
    var mappedEvents = [];
    if (!this.options.events || !this.options.events.length) return;

    // retrieve event mappings that match the current event
    for (var i = 0; i < this.options.events.length; i++) {
      var item = this.options.events[i];
      if (item.value) {
        if (toNoCase(item.key) === toNoCase(track.event()))
          mappedEvents.push(item.value);
      } else if (toNoCase(item.event) === toNoCase(track.event())) {
        mappedEvents.push(item);
      }
    }

    var settings = this.options;

    // Must have events mapped and DoubleClick Advertiser ID
    if (!mappedEvents.length || !settings.source) return;
    var properties = track.properties();
    var self = this;

    // Prepare tag params for each mapped Floodlight Activity
    var tags = foldl(
      function(conversions, tag) {
        var type = tag.type || settings.groupTag;
        var event = tag.event;
        var cat = tag.cat || settings.activityTag;

        if (!event || !cat || !type) return conversions;

        // Find matching properties if any
        var matchedVariables = {};
        each(function(variable) {
          var floodlightProp = variable.value;
          var segmentProp = variable.key.match(/{{(.*)}}/) || variable.key;
          if (variable.key.includes('$')) {
            segmentProp = variable.key.split('.$.');
          }

          var segmentPropValue;
          if (Array.isArray(segmentProp) && segmentProp[0] === 'products') {
            segmentProp = segmentProp.pop();
            var productPropArray = [];
            each(function(product) {
              if (product[segmentProp]) {
                productPropArray.push(product[segmentProp]);
              }
            }, track.products());
            segmentPropValue = productPropArray.join(',');
          } else if (Array.isArray(segmentProp)) {
            segmentProp = segmentProp.pop();
            if (segmentProp === 'userId') {
              segmentPropValue = self.analytics.user().id();
            } else {
              segmentPropValue = find(track.json(), segmentProp);
            }
          } else {
            segmentPropValue = properties[segmentProp];
          }

          if (segmentPropValue) {
            matchedVariables[floodlightProp] = segmentPropValue;
          }
        }, tag.customVariable);

        var customVariables = qs.stringify(matchedVariables).replace(/&/g, ';');
        if (tag.customVariable.length) customVariables = ';' + customVariables;

        var tagParams = {
          src: settings.source,
          type: type,
          cat: cat,
          customVariables: customVariables
        };

        // there are two types of tags: counter and sales
        // counter basically are used to increment conversions
        // sales tags are used to collect revenue/cost data
        // ord for counter tags are cachebuster but for sales tag it is whatever you specified in your settings
        // sales tags takes some additional semantic ecommerce params
        if (tag.isSalesTag) {
          tagParams._type = 'sales';
          // you need to enable order ID reporting for sales tag inside dbl click UI if you want this to work properly
          var quantity = 0;
          if (track.products().length) {
            each(function(product) {
              quantity += product.quantity || 0;
            }, track.products());
          } else if (properties.quantity) {
            quantity = properties.quantity;
          }
          if (quantity) tagParams.qty = quantity;
          // overwrite qty param with 1 if customer is using Trasaction Counting mehtod instead of Items Sold method
          if (settings.useTransactionCounting) tagParams.qty = 1;
          // doubleclick wants revenue under this cost param, yes
          if (track.revenue()) tagParams.cost = track.revenue();
          tagParams.ord = track.proxy(tag.ordKey);
        } else {
          tagParams.ord = Math.random() * 10000000000000000000;
        }

        conversions.push(tagParams);

        return conversions;
      },
      [],
      mappedEvents
    );

    // Fire each tag
    each(function(tagParams) {
      if (tagParams._type === 'sales') return self.load('sales', tagParams);
      return self.load('counter', tagParams);
    }, tags);
  };

  /**
   * Page
   * Fire Floodlight image tags per Segment event
   *
   * https://support.google.com/dcm/partner/answer/2823425?hl=en&ref_topic=4241548
   * https://support.google.com/dcm/partner/answer/2823363
   * @api public
   * @param {Page}
   */

  Floodlight.prototype.page = function(page) {
    var name = page.fullName();

    if (name) this.track(page.track(name));
  };

  },{"@ndhoule/each":10,"@ndhoule/foldl":14,"@segment/analytics.js-integration":287,"component-querystring":1118,"obj-case":1143,"to-no-case":1171}],287:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":288,"./statics":289,"@ndhoule/defaults":8,"component-bind":1109,"debug":290,"dup":49,"extend":293,"slug-component":1165}],288:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],289:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":292,"dup":51}],290:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":291,"_process":1149,"dup":43}],291:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":294}],292:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],293:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],294:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],295:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var isObject = require('isobject');
  var push = require('global-queue')('_dcq');
  var each = require('@ndhoule/each');
  var find = require('obj-case').find;

  /**
   * Expose `Drip` integration.
   */

  var Drip = (module.exports = integration('Drip')
    .global('_dc')
    .global('_dcq')
    .global('_dcqi')
    .global('_dcs')
    .option('account', '')
    .tag('<script src="//tag.getdrip.com/{{ account }}.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Drip.prototype.initialize = function() {
    window._dcq = window._dcq || [];
    window._dcs = window._dcs || {};
    window._dcs.account = this.options.account;
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Drip.prototype.loaded = function() {
    return isObject(window._dc);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Drip.prototype.track = function(track) {
    var props = format(track.properties());
    var cents = Math.round(track.revenue() * 100);
    if (cents) props.value = cents;

    // removes redundant data
    delete props.revenue;
    push('track', track.event(), props);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Drip.prototype.identify = function(identify) {
    // minimum required trait to identify a user in Drip
    if (!identify.email()) return;

    push('identify', format(identify.traits()));

    // default can be configured in your UI settings
    var dripCampaignId =
      find(identify.options(this.name), 'campaignId') || this.options.campaignId;

    // you can subscribe users to specific campaigns in Drip
    // https://www.getdrip.com/docs/js-api#subscribe
    if (dripCampaignId)
      push('subscribe', {
        campaign_id: dripCampaignId,
        fields: identify.traits()
      });
  };

  /**
   * Format
   * Replaces spaces with underscores
   *
   * @api public
   * @param {Object} obj
   *
   */

  function format(obj) {
    var ret = {};
    each(function(value, key) {
      var formattedKey = key.replace(/\s/g, '_');
      ret[formattedKey] = value;
    }, obj);

    return ret;
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":296,"global-queue":1127,"isobject":302,"obj-case":1143}],296:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":297,"./statics":298,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":300,"slug-component":1165}],297:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],298:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":299,"dup":51}],299:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],300:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],301:[function(require,module,exports){
  arguments[4][124][0].apply(exports,arguments)
  },{"dup":124}],302:[function(require,module,exports){
  arguments[4][125][0].apply(exports,arguments)
  },{"dup":125,"isarray":301}],303:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');
  var objCase = require('obj-case');
  var each = require('@ndhoule/each');
  var objectKeys = require('@ndhoule/keys');

  /**
   * Expose `Elevio` integration.
   */

  var Elevio = (module.exports = integration('Elevio')
    .option('accountId', '')
    .global('_elev')
    .tag('<script src="//static.elev.io/js/v3.js">'));

  /**
   * Initialize elevio.
   */

  Elevio.prototype.initialize = function() {
    var self = this;
    window._elev = window._elev || {};
    window._elev.account_id = this.options.accountId;
    window._elev.segment = true;
    this.load(function() {
      tick(self.ready);
    });
  };

  /**
   * Has the elevio library been loaded yet?
   *
   * @return {Boolean}
   */

  Elevio.prototype.loaded = function() {
    return !!window._elev;
  };

  /**
   * Identify a user.
   *
   * @param {Facade} identify
   */

  Elevio.prototype.identify = function(identify) {
    var name = identify.name();
    var email = identify.email();
    var plan = identify.proxy('traits.plan');
    var traits = identify.traits();

    var removeTraits = ['id', 'name', 'firstName', 'lastName', 'email'];

    each(function(traitItem) {
      if (traits.hasOwnProperty(traitItem)) {
        objCase.del(traits, traitItem);
      }
    }, removeTraits);

    var user = {};
    user.via = 'segment';
    if (email) user.email = email;
    if (name) user.name = name;
    if (plan) user.plan = [plan];
    if (plan) user.groups = [plan];
    if (objectKeys(traits).length > 0) user.traits = traits;
    window._elev.user = user;
    if (typeof window._elev.setUser === 'function') {
      window._elev.setUser(user);
    }
  };

  },{"@ndhoule/each":10,"@ndhoule/keys":16,"@segment/analytics.js-integration":304,"next-tick":310,"obj-case":1143}],304:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":305,"./statics":306,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":309,"slug-component":1165}],305:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":307,"to-no-case":1171}],306:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":308,"dup":51}],307:[function(require,module,exports){
  (function (process,setImmediate){(function (){
  'use strict';

  var callable, byObserver;

  callable = function (fn) {
    if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
    return fn;
  };

  byObserver = function (Observer) {
    var node = document.createTextNode(''), queue, i = 0;
    new Observer(function () {
      var data;
      if (!queue) return;
      data = queue;
      queue = null;
      if (typeof data === 'function') {
        data();
        return;
      }
      data.forEach(function (fn) { fn(); });
    }).observe(node, { characterData: true });
    return function (fn) {
      callable(fn);
      if (queue) {
        if (typeof queue === 'function') queue = [queue, fn];
        else queue.push(fn);
        return;
      }
      queue = fn;
      node.data = (i = ++i % 2);
    };
  };

  module.exports = (function () {
    // Node.js
    if ((typeof process !== 'undefined') && process &&
        (typeof process.nextTick === 'function')) {
      return process.nextTick;
    }

    // MutationObserver=
    if ((typeof document === 'object') && document) {
      if (typeof MutationObserver === 'function') {
        return byObserver(MutationObserver);
      }
      if (typeof WebKitMutationObserver === 'function') {
        return byObserver(WebKitMutationObserver);
      }
    }

    // W3C Draft
    // http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
    if (typeof setImmediate === 'function') {
      return function (cb) { setImmediate(callable(cb)); };
    }

    // Wide available standard
    if (typeof setTimeout === 'function') {
      return function (cb) { setTimeout(callable(cb), 0); };
    }

    return null;
  }());

  }).call(this)}).call(this,require('_process'),require("timers").setImmediate)
  },{"_process":1149,"timers":1168}],308:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],309:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],310:[function(require,module,exports){
  (function (process,setImmediate){(function (){
  'use strict';

  var ensureCallable = function (fn) {
    if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
    return fn;
  };

  var byObserver = function (Observer) {
    var node = document.createTextNode(''), queue, currentQueue, i = 0;
    new Observer(function () {
      var callback;
      if (!queue) {
        if (!currentQueue) return;
        queue = currentQueue;
      } else if (currentQueue) {
        queue = currentQueue.concat(queue);
      }
      currentQueue = queue;
      queue = null;
      if (typeof currentQueue === 'function') {
        callback = currentQueue;
        currentQueue = null;
        callback();
        return;
      }
      node.data = (i = ++i % 2); // Invoke other batch, to handle leftover callbacks in case of crash
      while (currentQueue) {
        callback = currentQueue.shift();
        if (!currentQueue.length) currentQueue = null;
        callback();
      }
    }).observe(node, { characterData: true });
    return function (fn) {
      ensureCallable(fn);
      if (queue) {
        if (typeof queue === 'function') queue = [queue, fn];
        else queue.push(fn);
        return;
      }
      queue = fn;
      node.data = (i = ++i % 2);
    };
  };

  module.exports = (function () {
    // Node.js
    if ((typeof process === 'object') && process && (typeof process.nextTick === 'function')) {
      return process.nextTick;
    }

    // queueMicrotask
    if (typeof queueMicrotask === "function") {
      return function (cb) { queueMicrotask(ensureCallable(cb)); };
    }

    // MutationObserver
    if ((typeof document === 'object') && document) {
      if (typeof MutationObserver === 'function') return byObserver(MutationObserver);
      if (typeof WebKitMutationObserver === 'function') return byObserver(WebKitMutationObserver);
    }

    // W3C Draft
    // http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
    if (typeof setImmediate === 'function') {
      return function (cb) { setImmediate(ensureCallable(cb)); };
    }

    // Wide available standard
    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {
      return function (cb) { setTimeout(ensureCallable(cb), 0); };
    }

    return null;
  }());

  }).call(this)}).call(this,require('_process'),require("timers").setImmediate)
  },{"_process":1149,"timers":1168}],311:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var push = require('global-queue')('_elqQ');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Eloqua`
   */

  var Eloqua = (module.exports = integration('Eloqua')
    .assumesPageview()
    .global('_elq')
    .global('_elqQ')
    .option('siteId', '')
    .tag('<script src="//img.en25.com/i/elqCfg.min.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Eloqua.prototype.initialize = function() {
    push('elqSetSiteId', this.options.siteId);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Eloqua.prototype.loaded = function() {
    return !!window._elqQ;
  };

  /**
   * Page
   *
   * @api public
   * @param {Page}
   */

  Eloqua.prototype.page = function(page) {
    var props = page.properties();
    push('elqTrackPageView', props.url, props.referrer);
  };

  },{"@segment/analytics.js-integration":312,"global-queue":1127}],312:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":313,"./statics":314,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":315,"dup":40,"slug-component":1165}],313:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":317,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],314:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":318,"dup":42}],315:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":316,"_process":1149,"dup":43}],316:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":319}],317:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],318:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],319:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],320:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `EmailAptitude` integration.
   */

  var EmailAptitude = (module.exports = integration('Email Aptitude')
    .assumesPageview()
    .global('_ea')
    .global('EmailAptitudeTracker')
    .option('accountId', '')
    .tag('<script src="//tracker.emailaptitude.com/ea.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  EmailAptitude.prototype.initialize = function() {
    window._ea = window._ea || {};
    window._ea.accountId = this.options.accountId;
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  EmailAptitude.prototype.loaded = function() {
    return !!window.EmailAptitudeTracker;
  };

  },{"@segment/analytics.js-integration":321}],321:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":322,"./statics":323,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":324,"dup":40,"slug-component":1165}],322:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":326,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],323:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":327,"dup":42}],324:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":325,"_process":1149,"dup":43}],325:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":328}],326:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],327:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],328:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],329:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_errs');

  /**
   * Expose `Errorception` integration.
   */

  var Errorception = (module.exports = integration('Errorception')
    .assumesPageview()
    .global('_errs')
    .option('projectId', '')
    .option('meta', true)
    .tag('<script src="//beacon.errorception.com/{{ projectId }}.js">'));

  /**
   * Initialize.
   *
   * https://github.com/amplitude/Errorception-Javascript
   *
   * @api public
   */

  Errorception.prototype.initialize = function() {
    window._errs = window._errs || [this.options.projectId];

    if (typeof window.onerror === 'function' && window.onerror !== push) {
      var oldOnerror = window.onerror;
      window.onerror = function() {
        oldOnerror.apply(window, arguments);
        push.apply(window, arguments);
      };
    } else {
      window.onerror = push;
    }

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Errorception.prototype.loaded = function() {
    return !!(window._errs && window._errs.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   * http://blog.errorception.com/2012/11/capture-custom-data-with-your-errors.html
   *
   * @api public
   * @param {Object} identify
   */

  Errorception.prototype.identify = function(identify) {
    if (!this.options.meta) return;
    var traits = identify.traits();
    window._errs = window._errs || [];
    window._errs.meta = window._errs.meta || {};
    extend(window._errs.meta, traits);
  };

  },{"@ndhoule/extend":330,"@segment/analytics.js-integration":331,"global-queue":1127}],330:[function(require,module,exports){
  arguments[4][13][0].apply(exports,arguments)
  },{"dup":13}],331:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":332,"./statics":333,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":334,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],332:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":335,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],333:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":336,"dup":42}],334:[function(require,module,exports){
  arguments[4][13][0].apply(exports,arguments)
  },{"dup":13}],335:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],336:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],337:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_aaq');

  /**
   * Expose `Evergage` integration.
   */

  var Evergage = (module.exports = integration('Evergage')
    .assumesPageview()
    .global('_aaq')
    .option('account', '')
    .option('dataset', '')
    .tag(
      '<script src="//cdn.evergage.com/beacon/{{ account }}/{{ dataset }}/scripts/evergage.min.js">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  Evergage.prototype.initialize = function() {
    var account = this.options.account;
    var dataset = this.options.dataset;

    window._aaq = window._aaq || [];
    push('setEvergageAccount', account);
    push('setDataset', dataset);
    push('setUseSiteConfig', true);

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Evergage.prototype.loaded = function() {
    return !!window._aaq;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Evergage.prototype.page = function(page) {
    var props = page.properties();
    var name = page.name();
    if (name) push('namePage', name);

    each(function(value, key) {
      push('setCustomField', key, value, 'page');
    }, props);

    window.Evergage.init(true);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Evergage.prototype.identify = function(identify) {
    var id = identify.userId();
    if (!id) return;

    push('setUser', id);

    var traits = identify.traits({
      email: 'userEmail',
      name: 'userName'
    });

    each(function(value, key) {
      push('setUserField', key, value, 'page');
    }, traits);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Evergage.prototype.group = function(group) {
    var props = group.traits();
    var id = group.groupId();
    if (!id) return;

    push('setCompany', id);
    each(function(value, key) {
      push('setAccountField', key, value, 'page');
    }, props);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Evergage.prototype.track = function(track) {
    push('trackAction', track.event(), track.properties());
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":338,"global-queue":1127}],338:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":339,"./statics":340,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],339:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":341,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],340:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":342,"dup":42}],341:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],342:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],343:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var domify = require('domify');
  var each = require('@ndhoule/each');
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var json = JSON;

  /**
   * Expose `Extole` integration.
   */

  var Extole = (module.exports = integration('Extole')
    .global('extole')
    .option('clientId', '')
    .mapping('events')
    .tag('main', '<script src="//tags.extole.com/{{ clientId }}/core.js">'));

  /**
   * Initialize.
   *
   * @api public
   * @param {Object} page
   */

  Extole.prototype.initialize = function() {
    if (this.loaded()) return this.ready();
    this.load('main', this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Extole.prototype.loaded = function() {
    return !!window.extole;
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Extole.prototype.track = function(track) {
    var user = this.analytics.user();
    var traits = user.traits();
    var userId = user.id();
    var email = traits.email;
    var self = this;

    if (!userId && !email) {
      return this.debug('User must be identified before `#track` calls');
    }

    var event = track.event();
    var extoleEvents = this.events(event);

    if (!extoleEvents.length) {
      return this.debug('No events found for %s', event);
    }

    each(function(extoleEvent) {
      self._registerConversion(
        self._createConversionTag({
          type: extoleEvent,
          params: self._formatConversionParams(
            event,
            email,
            userId,
            track.properties()
          )
        })
      );
    }, extoleEvents);
  };

  /**
   * Register a conversion to Extole.
   *
   * @api private
   * @param {HTMLElement} conversionTag An Extole conversion tag.
   */

  // FIXME: If I understand Extole's lib correctly, this is sometimes async,
  // sometimes sync. Refactor this into more predictable/sane behavior.
  Extole.prototype._registerConversion = function(conversionTag) {
    if (window.extole.main && window.extole.main.fireConversion) {
      return window.extole.main.fireConversion(conversionTag);
    }

    if (window.extole.initializeGo) {
      window.extole.initializeGo().andWhenItsReady(function() {
        window.extole.main.fireConversion(conversionTag);
      });
    }
  };

  /**
   * Formats details from a Segment track event into a data format Extole can
   * accept.
   *
   * @api private
   * @param {string} event
   * @param {string} email
   * @param {string|number} userId
   * @param {Object} properties track.properties().
   * @return {Object}
   */

  Extole.prototype._formatConversionParams = function(
    event,
    email,
    userId,
    props
  ) {
    var properties = props;
    var total;

    if (properties.total) {
      total = properties.total;
      delete properties.total;
      properties['tag:cart_value'] = total;
    }

    return extend(
      {
        'tag:segment_event': event,
        e: email,
        partner_conversion_id: userId
      },
      properties
    );
  };

  /**
   * Create an Extole conversion tag.
   *
   * @param {Object} conversion An Extole conversion object.
   * @return {HTMLElement}
   */

  Extole.prototype._createConversionTag = function(conversion) {
    return domify(
      '<script type="extole/conversion">' +
        json.stringify(conversion) +
        '</script>'
    );
  };

  },{"@ndhoule/each":10,"@ndhoule/extend":13,"@segment/analytics.js-integration":344,"domify":348}],344:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":345,"./statics":346,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],345:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":347,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],346:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":348,"dup":42}],347:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],348:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],349:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_fbq');

  /**
   * Expose `Facebook`
   */

  var Facebook = (module.exports = integration('Facebook Conversion Tracking')
    .global('_fbq')
    .option('currency', 'USD')
    .tag('<script src="//connect.facebook.net/en_US/fbds.js">')
    .mapping('events'));

  /**
   * Initialize Facebook Conversion Tracking
   *
   * https://developers.facebook.com/docs/ads-for-websites/conversion-pixel-code-migration
   *
   * @api public
   */

  Facebook.prototype.initialize = function() {
    window._fbq = window._fbq || [];
    this.load(this.ready);
    window._fbq.loaded = true;
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Facebook.prototype.loaded = function() {
    return !!(window._fbq && window._fbq.loaded);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Facebook.prototype.page = function(page) {
    this.track(page.track(page.fullName()));
  };

  /**
   * Track.
   *
   * https://developers.facebook.com/docs/reference/ads-api/custom-audience-website-faq/#fbpixel
   *
   * @api public
   * @param {Track} track
   */

  Facebook.prototype.track = function(track) {
    var event = track.event();
    var events = this.events(event);
    var revenue = track.revenue() || 0;
    var self = this;

    each(function(event) {
      push('track', event, {
        currency: self.options.currency,
        value: revenue.toFixed(2)
      });
    }, events);
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":350,"global-queue":1127}],350:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":351,"./statics":352,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],351:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":353,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],352:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":354,"dup":42}],353:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],354:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],355:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_fbq');
  var foldl = require('@ndhoule/foldl');
  var Track = require('segmentio-facade').Track;

  /**
   * Expose `FacebookCustomAudiences`.
   */

  var FacebookCustomAudiences = (module.exports = integration(
    'Facebook Custom Audiences'
  )
    .global('_fbds')
    .global('_fbq')
    .option('pixelId', '')
    .option('currency', 'USD')
    .mapping('events')
    .tag('<script src="//connect.facebook.net/en_US/fbds.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  FacebookCustomAudiences.prototype.initialize = function() {
    var pixelId = this.options.pixelId;
    window._fbds = window._fbds || {};
    window._fbds.pixelId = pixelId;
    window._fbq = window._fbq || [];
    window._fbq.push(['track', 'PixelInitialized', {}]);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  FacebookCustomAudiences.prototype.loaded = function() {
    return !!(window._fbq && Array.prototype.push !== window._fbq.push);
  };

  /**
   * Track.
   *
   * https://developers.facebook.com/docs/reference/ads-api/custom-audience-website#tagapi
   *
   * @api public
   * @param {Track} track
   */

  FacebookCustomAudiences.prototype.track = function(track) {
    var event = track.event();
    var properties = track.properties();

    // Track event
    window._fbq.push(['track', event, properties]);
  };

  /**
   * Product list viewed.
   *
   * @api private
   * @param {Track} track category
   */

  FacebookCustomAudiences.prototype.productListViewed = function(track) {
    push('track', 'ViewContent', {
      content_ids: [String(track.category() || '')],
      content_type: 'product_group'
    });
  };

  /**
   * Product viewed.
   *
   * @api private
   * @param {Track} track
   */

  FacebookCustomAudiences.prototype.productViewed = function(track) {
    push('track', 'ViewContent', {
      content_ids: [String(track.productId() || track.id() || track.sku() || '')],
      content_type: 'product',
      content_name: String(track.name()),
      content_category: String(track.category()),
      currency: String(track.currency()),
      value: Number(track.value())
    });
  };

  /**
   * Product added.
   *
   * @api private
   * @param {Track} track
   */

  FacebookCustomAudiences.prototype.productAdded = function(track) {
    push('track', 'AddToCart', {
      content_ids: [String(track.productId() || track.id() || track.sku() || '')],
      content_type: 'product',
      content_name: String(track.name()),
      content_category: String(track.category()),
      currency: String(track.currency()),
      value: Number(track.value())
    });
  };

  /**
   * Order Completed.
   *
   * @api private
   * @param {Track} track
   */

  FacebookCustomAudiences.prototype.orderCompleted = function(track) {
    var contentIds = foldl(
      function(ret, product) {
        var item = new Track({ properties: product });
        var id = item.productId() || item.id() || item.sku() || '';
        ret.push(id);
        return ret;
      },
      [],
      track.products()
    );

    push('track', 'Purchase', {
      content_ids: contentIds,
      content_type: 'product',
      currency: String(track.currency()),
      value: Number(track.value())
    });
  };

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":356,"global-queue":1127,"segmentio-facade":1158}],356:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":357,"./statics":358,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":360,"slug-component":1165}],357:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],358:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":359,"dup":51}],359:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],360:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],361:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var each = require('@ndhoule/each');
  var reject = require('reject');
  var camel = require('to-camel-case');
  var is = require('is');
  var dateformat = require('dateformat');
  var Track = require('segmentio-facade').Track;
  var sha256 = require('js-sha256');

  /**
   * Expose `Facebook Pixel`.
   */

  var FacebookPixel = (module.exports = integration('Facebook Pixel')
    .global('fbq')
    .option('pixelId', '')
    .option('agent', 'seg')
    .option('valueIdentifier', 'value')
    .option('initWithExistingTraits', false)
    .option('traverse', false)
    .option('automaticConfiguration', true)
    .option('whitelistPiiProperties', [])
    .option('blacklistPiiProperties', [])
    .option('standardEventsCustomProperties', [])
    .option('keyForExternalId', '')
    .option('userIdAsExternalId', false)
    .option('limitedDataUse', true)
    .mapping('standardEvents')
    .mapping('legacyEvents')
    .mapping('contentTypes')
    .tag('<script src="//connect.facebook.net/en_US/fbevents.js">'));

  /**
   * FB requires these date fields be formatted in a specific way.
   * The specifications are non iso8601 compliant.
   * https://developers.facebook.com/docs/marketing-api/dynamic-ads-for-travel/audience
   * Therefore, we check if the property is one of these reserved fields.
   * If so, we check if we have converted it to an iso date object already.
   * If we have, we convert it again into Facebook's spec.
   * If we have not, the user has likely passed in a date string that already
   * adheres to FB's docs so we can just pass it through as is.
   */
  var dateFields = [
    'checkinDate',
    'checkoutDate',
    'departingArrivalDate',
    'departingDepartureDate',
    'returningArrivalDate',
    'returningDepartureDate',
    'travelEnd',
    'travelStart'
  ];

  /**
   * FB does not allow sending PII data with events. They provide a list of what they consider PII here:
   * https://developers.facebook.com/docs/facebook-pixel/pixel-with-ads/conversion-tracking
   * We need to check each property key to see if it matches what FB considers to be a PII property and strip it from the payload.
   * User's can override this by manually whitelisting keys they are ok with sending through in their integration settings.
   */
  var defaultPiiProperties = [
    'email',
    'firstName',
    'lastName',
    'gender',
    'city',
    'country',
    'phone',
    'state',
    'zip',
    'birthday'
  ];

  /**
   * Initialize Facebook Pixel.
   *
   * @param {Facade} page
   */

  FacebookPixel.prototype.initialize = function() {
    window._fbq = function() {
      if (window.fbq.callMethod) {
        window.fbq.callMethod.apply(window.fbq, arguments);
      } else {
        window.fbq.queue.push(arguments);
      }
    };

    window.fbq = window.fbq || window._fbq;
    window.fbq.push = window.fbq;
    window.fbq.loaded = true;
    window.fbq.disablePushState = true; // disables automatic pageview tracking
    window.fbq.allowDuplicatePageViews = true; // enables fb
    window.fbq.agent = this.options.agent;
    window.fbq.version = '2.0';
    window.fbq.queue = [];
    this.load(this.ready);
    if (!this.options.automaticConfiguration) {
      window.fbq('set', 'autoConfig', false, this.options.pixelId);
    }
    if (this.options.limitedDataUse) {
      this.validateAndSetDataProcessing(
        this.options.dataProcessingOptions || [['LDU'], 0, 0]
      );
    } else {
      // explicitly not enable Limited Data Use (LDU) mode
      window.fbq('dataProcessingOptions', []);
    }
    if (this.options.initWithExistingTraits) {
      var traits = this.formatTraits(this.analytics);
      window.fbq('init', this.options.pixelId, traits);
    } else {
      window.fbq('init', this.options.pixelId);
    }
  };

  /**
   * Has the Facebook Pixel library been loaded yet?
   *
   * @return {Boolean}
   */

  FacebookPixel.prototype.loaded = function() {
    return !!(window.fbq && window.fbq.callMethod);
  };

  /**
   * Trigger a page view.
   *
   * @param {Facade} identify
   */

  FacebookPixel.prototype.page = function() {
    window.fbq('track', 'PageView');
  };

  /**
   * Track an event.
   *
   * @param {Facade} track
   */

  FacebookPixel.prototype.track = function(track) {
    var self = this;
    var event = track.event();
    var revenue = formatRevenue(track.revenue());
    var payload = this.buildPayload(track);

    // Revenue
    if (track.properties().hasOwnProperty('revenue')) {
      payload.value = formatRevenue(track.revenue());
      // To keep compatible with the old implementation
      // that never added revenue to the payload
      delete payload.revenue;
    }

    var standard = this.standardEvents(event);
    var legacy = this.legacyEvents(event);

    // non-mapped events get sent as "custom events" with full
    // tranformed payload
    if (![].concat(standard, legacy).length) {
      window.fbq('trackSingleCustom', this.options.pixelId, event, payload, {
        eventID: track.proxy('messageId')
      });
      return;
    }

    // standard conversion events, mapped to one of 9 standard events
    // "Purchase" requires a currency parameter;
    // send full transformed payload
    each(function(event) {
      if (event === 'Purchase') payload.currency = track.currency(); // defaults to 'USD'
      window.fbq('trackSingle', self.options.pixelId, event, payload, {
        eventID: track.proxy('messageId')
      });
    }, standard);

    // legacy conversion events — mapped to specific "pixelId"s
    // send only currency and value
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: revenue
        },
        { eventID: track.proxy('messageId') }
      );
    }, legacy);
  };

  /**
   * Product List Viewed.
   *
   * @api private
   * @param {Track} track category
   */

  FacebookPixel.prototype.productListViewed = function(track) {
    var self = this;
    var contentType;
    var contentIds = [];
    var contents = [];
    var products = track.products();
    var customProperties = this.buildPayload(track, true);

    // First, check to see if a products array with productIds has been defined.
    if (Array.isArray(products)) {
      products.forEach(function(product) {
        var track = new Track({ properties: product });
        var productId =
          track.proxy('properties.product_id') || track.productId() || track.id();

        if (productId) {
          contentIds.push(productId);
          contents.push({
            id: productId,
            quantity: track.quantity()
          });
        }
      });
    }

    // If no products have been defined, fallback on legacy behavior.
    // Facebook documents the content_type parameter decision here: https://developers.facebook.com/docs/facebook-pixel/api-reference
    if (contentIds.length) {
      contentType = ['product'];
    } else {
      contentIds.push(track.category() || '');
      contents.push({
        id: track.category() || '',
        quantity: 1
      });
      contentType = ['product_group'];
    }

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'ViewContent',
      merge(
        {
          content_ids: contentIds,
          content_type: this.getContentType(track, contentType),
          contents: contents
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: formatRevenue(track.revenue())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  /**
   * Product viewed.
   *
   * @api private
   * @param {Track} track
   */

  FacebookPixel.prototype.productViewed = function(track) {
    var self = this;
    var useValue = this.options.valueIdentifier === 'value';
    var customProperties = this.buildPayload(track, true);

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'ViewContent',
      merge(
        {
          content_ids: [track.productId() || track.id() || track.sku() || ''],
          content_type: this.getContentType(track, ['product']),
          content_name: track.name() || '',
          content_category: track.category() || '',
          currency: track.currency(),
          value: useValue
            ? formatRevenue(track.value())
            : formatRevenue(track.price()),
          contents: [
            {
              id: track.productId() || track.id() || track.sku() || '',
              quantity: track.quantity(),
              item_price: track.price()
            }
          ]
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: useValue
            ? formatRevenue(track.value())
            : formatRevenue(track.price())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  /**
   * Product added.
   *
   * @api private
   * @param {Track} track
   */

  FacebookPixel.prototype.productAdded = function(track) {
    var self = this;
    var useValue = this.options.valueIdentifier === 'value';
    var customProperties = this.buildPayload(track, true);

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'AddToCart',
      merge(
        {
          content_ids: [track.productId() || track.id() || track.sku() || ''],
          content_type: this.getContentType(track, ['product']),
          content_name: track.name() || '',
          content_category: track.category() || '',
          currency: track.currency(),
          value: useValue
            ? formatRevenue(track.value())
            : formatRevenue(track.price()),
          contents: [
            {
              id: track.productId() || track.id() || track.sku() || '',
              quantity: track.quantity(),
              item_price: track.price()
            }
          ]
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: useValue
            ? formatRevenue(track.value())
            : formatRevenue(track.price())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  /**
   * Order Completed.
   *
   * @api private
   * @param {Track} track
   */

  FacebookPixel.prototype.orderCompleted = function(track) {
    var self = this;
    var products = track.products();
    var customProperties = this.buildPayload(track, true);

    var revenue = formatRevenue(track.revenue());

    // Order completed doesn't have a top-level category spec'd.
    // Let's default to the category of the first product. - @gabriel

    var contentType = this.getContentType(track, ['product']);
    var contentIds = [];
    var contents = [];

    for (var i = 0; i < products.length; i++) {
      var trackItem = new Track({ properties: products[i] });
      var pId = trackItem.productId() || trackItem.id() || trackItem.sku();
      contentIds.push(pId);
      var content = {
        id: pId,
        quantity: trackItem.quantity()
      };
      if (trackItem.price()) {
        content.item_price = trackItem.price();
      }
      contents.push(content);
    }

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'Purchase',
      merge(
        {
          content_ids: contentIds,
          content_type: contentType,
          currency: track.currency(),
          value: revenue,
          contents: contents,
          num_items: contentIds.length
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: formatRevenue(track.revenue())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  FacebookPixel.prototype.productsSearched = function(track) {
    var self = this;
    var customProperties = this.buildPayload(track, true);

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'Search',
      merge(
        {
          search_string: track.proxy('properties.query')
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: formatRevenue(track.revenue())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  FacebookPixel.prototype.checkoutStarted = function(track) {
    var self = this;
    var products = track.products();
    var contentIds = [];
    var contents = [];
    var contentCategory = track.category();
    var customProperties = this.buildPayload(track, true);

    for (var i = 0; i < products.length; i++) {
      var trackItem = new Track({ properties: products[i] });
      var pId = trackItem.productId() || trackItem.id() || trackItem.sku();
      contentIds.push(pId);
      var content = {
        id: pId,
        quantity: trackItem.quantity(),
        item_price: track.price()
      };
      if (trackItem.price()) {
        content.item_price = trackItem.price();
      }
      contents.push(content);
    }

    // If no top-level category was defined use that of the first product. @gabriel
    if (!contentCategory && products[0] && products[0].category) {
      contentCategory = products[0].category;
    }

    window.fbq(
      'trackSingle',
      this.options.pixelId,
      'InitiateCheckout',
      merge(
        {
          content_category: contentCategory,
          content_ids: contentIds,
          content_type: this.getContentType(track, ['product']),
          contents: contents,
          currency: track.currency(),
          num_items: contentIds.length,
          value: formatRevenue(track.revenue())
        },
        customProperties
      ),
      { eventID: track.proxy('messageId') }
    );

    // fall through for mapped legacy conversions
    each(function(event) {
      window.fbq(
        'trackSingle',
        self.options.pixelId,
        event,
        {
          currency: track.currency(),
          value: formatRevenue(track.revenue())
        },
        { eventID: track.proxy('messageId') }
      );
    }, this.legacyEvents(track.event()));
  };

  /**
   * Returns an array of mapped content types for the category,
   * the provided value as an integration option or the default provided value.
   *
   * @param {Facade.Track} track Track payload
   * @param {Array} defaultValue Default array value returned if the previous parameters are not defined.
   *
   * @return Content Type array as defined in:
   * - https://developers.facebook.com/docs/facebook-pixel/reference/#object-properties
   * - https://developers.facebook.com/docs/marketing-api/dynamic-ads-for-real-estate/audience
   */
  FacebookPixel.prototype.getContentType = function(track, defaultValue) {
    // 1- Integration options takes preference over everything
    var options = track.options('Facebook Pixel');
    if (options && options.contentType) {
      return [options.contentType];
    }

    // 2- Defined by category and its mappings
    var category = track.category();
    if (!category) {
      // Get the first product's category
      var products = track.products();
      if (products && products.length) {
        category = products[0].category;
      }
    }

    if (category) {
      var mapped = this.contentTypes(category);
      if (mapped.length) {
        return mapped;
      }
    }

    // 3- The default value
    return defaultValue;
  };

  /**
   * Get Revenue Formatted Correctly for FB.
   *
   * @api private
   * @param {Track} track
   */

  function formatRevenue(revenue) {
    return Number(revenue || 0).toFixed(2);
  }

  /**
   * Get Traits Formatted Correctly for FB.
   *
   * https://developers.facebook.com/docs/facebook-pixel/pixel-with-ads/conversion-tracking#advanced_match
   *
   * @api private
   */
  FacebookPixel.prototype.formatTraits = function formatTraits(analytics) {
    var traits = analytics && analytics.user().traits();
    if (!traits) return {};
    var firstName;
    var lastName;
    // Check for firstName property
    // else check for name
    if (traits.firstName || traits.first_name) {
      firstName = traits.firstName || traits.first_name;
      lastName = traits.lastName || traits.last_name;
    } else {
      var nameArray = (traits.name && traits.name.toLowerCase().split(' ')) || [];
      firstName = nameArray.shift();
      lastName = nameArray.pop();
    }
    var gender;
    if (traits.gender && is.string(traits.gender)) {
      gender = traits.gender.slice(0, 1).toLowerCase();
    }
    var birthday = traits.birthday && dateformat(traits.birthday, 'yyyymmdd');
    var address = traits.address || {};
    var city =
      address.city &&
      address.city
        .split(' ')
        .join('')
        .toLowerCase();
    var state = address.state && address.state.toLowerCase();
    var postalCode = address.postalCode || address.postal_code;
    var external_id; // eslint-disable-line
    if (this.options.keyForExternalId) {
      external_id = traits[this.options.keyForExternalId]; // eslint-disable-line
    }
    if (!external_id && this.options.userIdAsExternalId && analytics) { // eslint-disable-line
      external_id = analytics.user().id() || analytics.user().anonymousId(); // eslint-disable-line
    }
    return reject({
      em: traits.email,
      fn: firstName,
      ln: lastName,
      ph: traits.phone,
      ge: gender,
      db: birthday,
      ct: city,
      st: state,
      zp: postalCode,
      external_id: external_id  // eslint-disable-line
    });
  };

  /**
   * Builds the FB Event payload. It checks for PII fields and custom properties. If the event is Standard Event,
   * only properties defined in the setting are passed to the payload.
   *
   * @param {Facade.Track} track Track event.
   * @param {boolean} isStandardEvent Defines if the track call is a standard event.
   *
   * @return Payload to send deriveded from the track properties.
   */
  FacebookPixel.prototype.buildPayload = function(track, isStandardEvent) {
    var whitelistPiiProperties = this.options.whitelistPiiProperties || [];
    var blacklistPiiProperties = this.options.blacklistPiiProperties || [];
    var standardEventsCustomProperties =
      this.options.standardEventsCustomProperties || [];

    // Transforming the setting in a map for easier lookups.
    var customPiiProperties = {};
    for (var i = 0; i < blacklistPiiProperties.length; i++) {
      var configuration = blacklistPiiProperties[i];
      customPiiProperties[configuration.propertyName] =
        configuration.hashProperty;
    }

    var payload = {};
    var properties = track.properties();

    for (var property in properties) {
      if (!properties.hasOwnProperty(property)) {
        continue;
      }

      // Standard Events only contains custom properties defined in the configuration
      // If the property is not listed there, we just drop it.
      if (
        isStandardEvent &&
        standardEventsCustomProperties.indexOf(property) < 0
      ) {
        continue;
      }

      var value = properties[property];

      // Dates
      if (dateFields.indexOf(camel(property)) >= 0) {
        if (is.date(value)) {
          payload[property] = value.toISOString().split('T')[0];
          continue;
        }
      }

      // Custom PII properties
      if (customPiiProperties.hasOwnProperty(property)) {
        // hash or drop
        if (customPiiProperties[property] && typeof value === 'string') {
          payload[property] = sha256(value);
        }
        continue;
      }

      // Default PII properties
      var isPropertyPii = defaultPiiProperties.indexOf(property) >= 0;
      var isPropertyWhitelisted = whitelistPiiProperties.indexOf(property) >= 0;
      if (!isPropertyPii || isPropertyWhitelisted) {
        payload[property] = value;
      }
    }

    return payload;
  };

  /**
   * Validates that a set of parameters are formatted correctly and passes them to the pixel instance.
   * https://developers.facebook.com/docs/marketing-apis/data-processing-options#reference
   *
   * @param {Array} options
   *
   * @api private
   */
  FacebookPixel.prototype.validateAndSetDataProcessing = function(params) {
    var lenOk = params.length === 3;
    var valOk =
      Array.isArray(params[0]) &&
      typeof params[1] === 'number' &&
      typeof params[2] === 'number';

    // Pass the data processing options if they're valid, otherwise, fallback to geolocation.
    if (lenOk && valOk) {
      window.fbq('dataProcessingOptions', params[0], params[1], params[2]);
    } else {
      window.fbq('dataProcessingOptions', ['LDU'], 0, 0);
    }
  };

  /**
   * Merge two javascript objects. This works similarly to `Object.assign({}, obj1, obj2)`
   * but it's compatible with old browsers. The properties of the first argument takes preference
   * over the other.
   *
   * It does not do fancy stuff, just use it with top level properties.
   *
   * @param {Object} obj1 Object 1
   * @param {Object} obj2 Object 2
   *
   * @return {Object} a new object with all the properties of obj1 and the remainder of obj2.
   */
  function merge(obj1, obj2) {
    var res = {};

    // All properties of obj1
    for (var propObj1 in obj1) {
      if (obj1.hasOwnProperty(propObj1)) {
        res[propObj1] = obj1[propObj1];
      }
    }

    // Extra properties of obj2
    for (var propObj2 in obj2) {
      if (obj2.hasOwnProperty(propObj2) && !res.hasOwnProperty(propObj2)) {
        res[propObj2] = obj2[propObj2];
      }
    }

    return res;
  }

  // Exposed only for testing
  FacebookPixel.merge = merge;

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":362,"dateformat":367,"is":1131,"js-sha256":370,"reject":1150,"segmentio-facade":1158,"to-camel-case":1169}],362:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":363,"./statics":364,"@ndhoule/defaults":8,"component-bind":1109,"debug":365,"dup":49,"extend":369,"slug-component":1165}],363:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],364:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":368,"dup":51}],365:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":366,"_process":1149,"dup":43}],366:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":371}],367:[function(require,module,exports){
  /*
   * Date Format 1.2.3
   * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
   * MIT license
   *
   * Includes enhancements by Scott Trenda <scott.trenda.net>
   * and Kris Kowal <cixar.com/~kris.kowal/>
   *
   * Accepts a date, a mask, or a date and a mask.
   * Returns a formatted version of the given date.
   * The date defaults to the current date/time.
   * The mask defaults to dateFormat.masks.default.
   */

  (function(global) {
    'use strict';

    var dateFormat = (function() {
        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
        var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
        var timezoneClip = /[^-+\dA-Z]/g;

        // Regexes and supporting functions are cached through closure
        return function (date, mask, utc, gmt) {

          // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
          if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
            mask = date;
            date = undefined;
          }

          date = date || new Date;

          if(!(date instanceof Date)) {
            date = new Date(date);
          }

          if (isNaN(date)) {
            throw TypeError('Invalid date');
          }

          mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);

          // Allow setting the utc/gmt argument via the mask
          var maskSlice = mask.slice(0, 4);
          if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
            mask = mask.slice(4);
            utc = true;
            if (maskSlice === 'GMT:') {
              gmt = true;
            }
          }

          var _ = utc ? 'getUTC' : 'get';
          var d = date[_ + 'Date']();
          var D = date[_ + 'Day']();
          var m = date[_ + 'Month']();
          var y = date[_ + 'FullYear']();
          var H = date[_ + 'Hours']();
          var M = date[_ + 'Minutes']();
          var s = date[_ + 'Seconds']();
          var L = date[_ + 'Milliseconds']();
          var o = utc ? 0 : date.getTimezoneOffset();
          var W = getWeek(date);
          var N = getDayOfWeek(date);
          var flags = {
            d:    d,
            dd:   pad(d),
            ddd:  dateFormat.i18n.dayNames[D],
            dddd: dateFormat.i18n.dayNames[D + 7],
            m:    m + 1,
            mm:   pad(m + 1),
            mmm:  dateFormat.i18n.monthNames[m],
            mmmm: dateFormat.i18n.monthNames[m + 12],
            yy:   String(y).slice(2),
            yyyy: y,
            h:    H % 12 || 12,
            hh:   pad(H % 12 || 12),
            H:    H,
            HH:   pad(H),
            M:    M,
            MM:   pad(M),
            s:    s,
            ss:   pad(s),
            l:    pad(L, 3),
            L:    pad(Math.round(L / 10)),
            t:    H < 12 ? 'a'  : 'p',
            tt:   H < 12 ? 'am' : 'pm',
            T:    H < 12 ? 'A'  : 'P',
            TT:   H < 12 ? 'AM' : 'PM',
            Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
            o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
            S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
            W:    W,
            N:    N
          };

          return mask.replace(token, function (match) {
            if (match in flags) {
              return flags[match];
            }
            return match.slice(1, match.length - 1);
          });
        };
      })();

    dateFormat.masks = {
      'default':               'ddd mmm dd yyyy HH:MM:ss',
      'shortDate':             'm/d/yy',
      'mediumDate':            'mmm d, yyyy',
      'longDate':              'mmmm d, yyyy',
      'fullDate':              'dddd, mmmm d, yyyy',
      'shortTime':             'h:MM TT',
      'mediumTime':            'h:MM:ss TT',
      'longTime':              'h:MM:ss TT Z',
      'isoDate':               'yyyy-mm-dd',
      'isoTime':               'HH:MM:ss',
      'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
      'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
      'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
    };

    // Internationalization strings
    dateFormat.i18n = {
      dayNames: [
        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
      ],
      monthNames: [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
      ]
    };

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  /**
   * Get the ISO 8601 week number
   * Based on comments from
   * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
   *
   * @param  {Object} `date`
   * @return {Number}
   */
  function getWeek(date) {
    // Remove time components of date
    var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

    // Change date to Thursday same week
    targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

    // Take January 4th as it is always in week 1 (see ISO 8601)
    var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

    // Change date to Thursday same week
    firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

    // Check if daylight-saving-time-switch occured and correct for it
    var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
    targetThursday.setHours(targetThursday.getHours() - ds);

    // Number of weeks between target Thursday and first Thursday
    var weekDiff = (targetThursday - firstThursday) / (86400000*7);
    return 1 + Math.floor(weekDiff);
  }

  /**
   * Get ISO-8601 numeric representation of the day of the week
   * 1 (for Monday) through 7 (for Sunday)
   *
   * @param  {Object} `date`
   * @return {Number}
   */
  function getDayOfWeek(date) {
    var dow = date.getDay();
    if(dow === 0) {
      dow = 7;
    }
    return dow;
  }

  /**
   * kind-of shortcut
   * @param  {*} val
   * @return {String}
   */
  function kindOf(val) {
    if (val === null) {
      return 'null';
    }

    if (val === undefined) {
      return 'undefined';
    }

    if (typeof val !== 'object') {
      return typeof val;
    }

    if (Array.isArray(val)) {
      return 'array';
    }

    return {}.toString.call(val)
      .slice(8, -1).toLowerCase();
  };



    if (typeof define === 'function' && define.amd) {
      define(function () {
        return dateFormat;
      });
    } else if (typeof exports === 'object') {
      module.exports = dateFormat;
    } else {
      global.dateFormat = dateFormat;
    }
  })(this);

  },{}],368:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],369:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],370:[function(require,module,exports){
  (function (process,global){(function (){
  /**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   */
  /*jslint bitwise: true */
  (function () {
    'use strict';

    var ERROR = 'input is invalid type';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA256_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = global;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
    var AMD = typeof define === 'function' && define.amd;
    var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var EXTRA = [-2147483648, 8388608, 32768, 128];
    var SHIFT = [24, 16, 8, 0];
    var K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];
    var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

    var blocks = [];

    if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }

    if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }

    var createOutputMethod = function (outputType, is224) {
      return function (message) {
        return new Sha256(is224, true).update(message)[outputType]();
      };
    };

    var createMethod = function (is224) {
      var method = createOutputMethod('hex', is224);
      if (NODE_JS) {
        method = nodeWrap(method, is224);
      }
      method.create = function () {
        return new Sha256(is224);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(type, is224);
      }
      return method;
    };

    var nodeWrap = function (method, is224) {
      var crypto = eval("require('crypto')");
      var Buffer = eval("require('buffer').Buffer");
      var algorithm = is224 ? 'sha224' : 'sha256';
      var nodeMethod = function (message) {
        if (typeof message === 'string') {
          return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
        } else {
          if (message === null || message === undefined) {
            throw new Error(ERROR);
          } else if (message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
        }
        if (Array.isArray(message) || ArrayBuffer.isView(message) ||
          message.constructor === Buffer) {
          return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
        } else {
          return method(message);
        }
      };
      return nodeMethod;
    };

    var createHmacOutputMethod = function (outputType, is224) {
      return function (key, message) {
        return new HmacSha256(key, is224, true).update(message)[outputType]();
      };
    };

    var createHmacMethod = function (is224) {
      var method = createHmacOutputMethod('hex', is224);
      method.create = function (key) {
        return new HmacSha256(key, is224);
      };
      method.update = function (key, message) {
        return method.create(key).update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createHmacOutputMethod(type, is224);
      }
      return method;
    };

    function Sha256(is224, sharedMemory) {
      if (sharedMemory) {
        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        this.blocks = blocks;
      } else {
        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      }

      if (is224) {
        this.h0 = 0xc1059ed8;
        this.h1 = 0x367cd507;
        this.h2 = 0x3070dd17;
        this.h3 = 0xf70e5939;
        this.h4 = 0xffc00b31;
        this.h5 = 0x68581511;
        this.h6 = 0x64f98fa7;
        this.h7 = 0xbefa4fa4;
      } else { // 256
        this.h0 = 0x6a09e667;
        this.h1 = 0xbb67ae85;
        this.h2 = 0x3c6ef372;
        this.h3 = 0xa54ff53a;
        this.h4 = 0x510e527f;
        this.h5 = 0x9b05688c;
        this.h6 = 0x1f83d9ab;
        this.h7 = 0x5be0cd19;
      }

      this.block = this.start = this.bytes = this.hBytes = 0;
      this.finalized = this.hashed = false;
      this.first = true;
      this.is224 = is224;
    }

    Sha256.prototype.update = function (message) {
      if (this.finalized) {
        return;
      }
      var notString, type = typeof message;
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw new Error(ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(ERROR);
            }
          }
        } else {
          throw new Error(ERROR);
        }
        notString = true;
      }
      var code, index = 0, i, length = message.length, blocks = this.blocks;

      while (index < length) {
        if (this.hashed) {
          this.hashed = false;
          blocks[0] = this.block;
          blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }

        if (notString) {
          for (i = this.start; index < length && i < 64; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < 64; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }

        this.lastByteIndex = i;
        this.bytes += i - this.start;
        if (i >= 64) {
          this.block = blocks[16];
          this.start = i - 64;
          this.hash();
          this.hashed = true;
        } else {
          this.start = i;
        }
      }
      if (this.bytes > 4294967295) {
        this.hBytes += this.bytes / 4294967296 << 0;
        this.bytes = this.bytes % 4294967296;
      }
      return this;
    };

    Sha256.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex;
      blocks[16] = this.block;
      blocks[i >> 2] |= EXTRA[i & 3];
      this.block = blocks[16];
      if (i >= 56) {
        if (!this.hashed) {
          this.hash();
        }
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }
      blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
      blocks[15] = this.bytes << 3;
      this.hash();
    };

    Sha256.prototype.hash = function () {
      var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
        h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

      for (j = 16; j < 64; ++j) {
        // rightrotate
        t1 = blocks[j - 15];
        s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
        t1 = blocks[j - 2];
        s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
        blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
      }

      bc = b & c;
      for (j = 0; j < 64; j += 4) {
        if (this.first) {
          if (this.is224) {
            ab = 300032;
            t1 = blocks[0] - 1413257819;
            h = t1 - 150054599 << 0;
            d = t1 + 24177077 << 0;
          } else {
            ab = 704751109;
            t1 = blocks[0] - 210244248;
            h = t1 - 1521486534 << 0;
            d = t1 + 143694565 << 0;
          }
          this.first = false;
        } else {
          s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
          s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
          ab = a & b;
          maj = ab ^ (a & c) ^ bc;
          ch = (e & f) ^ (~e & g);
          t1 = h + s1 + ch + K[j] + blocks[j];
          t2 = s0 + maj;
          h = d + t1 << 0;
          d = t1 + t2 << 0;
        }
        s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
        s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
        da = d & a;
        maj = da ^ (d & b) ^ ab;
        ch = (h & e) ^ (~h & f);
        t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
        t2 = s0 + maj;
        g = c + t1 << 0;
        c = t1 + t2 << 0;
        s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
        s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
        cd = c & d;
        maj = cd ^ (c & a) ^ da;
        ch = (g & h) ^ (~g & e);
        t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
        t2 = s0 + maj;
        f = b + t1 << 0;
        b = t1 + t2 << 0;
        s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
        s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
        bc = b & c;
        maj = bc ^ (b & d) ^ cd;
        ch = (f & g) ^ (~f & h);
        t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
        t2 = s0 + maj;
        e = a + t1 << 0;
        a = t1 + t2 << 0;
      }

      this.h0 = this.h0 + a << 0;
      this.h1 = this.h1 + b << 0;
      this.h2 = this.h2 + c << 0;
      this.h3 = this.h3 + d << 0;
      this.h4 = this.h4 + e << 0;
      this.h5 = this.h5 + f << 0;
      this.h6 = this.h6 + g << 0;
      this.h7 = this.h7 + h << 0;
    };

    Sha256.prototype.hex = function () {
      this.finalize();

      var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
        h6 = this.h6, h7 = this.h7;

      var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
        HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
        HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
        HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
        HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
        HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
        HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
        HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
        HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
        HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
        HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
        HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
        HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
        HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
        HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
        HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
        HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
        HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
        HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
        HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
        HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
        HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
        HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
        HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
        HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
        HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
        HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
        HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
      if (!this.is224) {
        hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
          HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
          HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
          HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
      }
      return hex;
    };

    Sha256.prototype.toString = Sha256.prototype.hex;

    Sha256.prototype.digest = function () {
      this.finalize();

      var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
        h6 = this.h6, h7 = this.h7;

      var arr = [
        (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
        (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
        (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
        (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
        (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
        (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
        (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
      ];
      if (!this.is224) {
        arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
      }
      return arr;
    };

    Sha256.prototype.array = Sha256.prototype.digest;

    Sha256.prototype.arrayBuffer = function () {
      this.finalize();

      var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
      var dataView = new DataView(buffer);
      dataView.setUint32(0, this.h0);
      dataView.setUint32(4, this.h1);
      dataView.setUint32(8, this.h2);
      dataView.setUint32(12, this.h3);
      dataView.setUint32(16, this.h4);
      dataView.setUint32(20, this.h5);
      dataView.setUint32(24, this.h6);
      if (!this.is224) {
        dataView.setUint32(28, this.h7);
      }
      return buffer;
    };

    function HmacSha256(key, is224, sharedMemory) {
      var i, type = typeof key;
      if (type === 'string') {
        var bytes = [], length = key.length, index = 0, code;
        for (i = 0; i < length; ++i) {
          code = key.charCodeAt(i);
          if (code < 0x80) {
            bytes[index++] = code;
          } else if (code < 0x800) {
            bytes[index++] = (0xc0 | (code >> 6));
            bytes[index++] = (0x80 | (code & 0x3f));
          } else if (code < 0xd800 || code >= 0xe000) {
            bytes[index++] = (0xe0 | (code >> 12));
            bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
            bytes[index++] = (0x80 | (code & 0x3f));
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
            bytes[index++] = (0xf0 | (code >> 18));
            bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
            bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
            bytes[index++] = (0x80 | (code & 0x3f));
          }
        }
        key = bytes;
      } else {
        if (type === 'object') {
          if (key === null) {
            throw new Error(ERROR);
          } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
            key = new Uint8Array(key);
          } else if (!Array.isArray(key)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
              throw new Error(ERROR);
            }
          }
        } else {
          throw new Error(ERROR);
        }
      }

      if (key.length > 64) {
        key = (new Sha256(is224, true)).update(key).array();
      }

      var oKeyPad = [], iKeyPad = [];
      for (i = 0; i < 64; ++i) {
        var b = key[i] || 0;
        oKeyPad[i] = 0x5c ^ b;
        iKeyPad[i] = 0x36 ^ b;
      }

      Sha256.call(this, is224, sharedMemory);

      this.update(iKeyPad);
      this.oKeyPad = oKeyPad;
      this.inner = true;
      this.sharedMemory = sharedMemory;
    }
    HmacSha256.prototype = new Sha256();

    HmacSha256.prototype.finalize = function () {
      Sha256.prototype.finalize.call(this);
      if (this.inner) {
        this.inner = false;
        var innerHash = this.array();
        Sha256.call(this, this.is224, this.sharedMemory);
        this.update(this.oKeyPad);
        this.update(innerHash);
        Sha256.prototype.finalize.call(this);
      }
    };

    var exports = createMethod();
    exports.sha256 = exports;
    exports.sha224 = createMethod(true);
    exports.sha256.hmac = createHmacMethod();
    exports.sha224.hmac = createHmacMethod(true);

    if (COMMON_JS) {
      module.exports = exports;
    } else {
      root.sha256 = exports.sha256;
      root.sha224 = exports.sha224;
      if (AMD) {
        define(function () {
          return exports;
        });
      }
    }
  })();

  }).call(this)}).call(this,require('_process'),typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{"_process":1149}],371:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],372:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Track = require('segmentio-facade').Track;
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_fxm');

  /**
   * Expose `FoxMetrics` integration.
   */

  var FoxMetrics = (module.exports = integration('FoxMetrics')
    .assumesPageview()
    .global('_fxm')
    .option('appId', '')
    .tag(
      '<script src="//d35tca7vmefkrc.cloudfront.net/scripts/{{ appId }}.js">'
    ));

  /**
   * Initialize.
   *
   * http://foxmetrics.com/documentation/apijavascript
   *
   * @api public
   */

  FoxMetrics.prototype.initialize = function() {
    window._fxm = window._fxm || [];
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  FoxMetrics.prototype.loaded = function() {
    return !!(window._fxm && window._fxm.appId);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  FoxMetrics.prototype.page = function(page) {
    var properties = page.properties();
    var category = page.category();
    var name = page.name();
    // store for later
    // TODO: Why? Document me
    this._category = category;

    push(
      '_fxm.pages.view',
      properties.title,
      name,
      category,
      properties.url,
      properties.referrer
    );
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  FoxMetrics.prototype.identify = function(identify) {
    var id = identify.userId();

    if (!id) return;

    push(
      '_fxm.visitor.profile',
      id,
      identify.firstName(),
      identify.lastName(),
      identify.email(),
      identify.address(),
      // social
      // TODO: Why is this `undefined`? Document
      undefined,
      // partners
      // TODO: Why is this `undefined`? Document
      undefined,
      identify.traits()
    );
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  FoxMetrics.prototype.track = function(track) {
    var props = track.properties();
    var category = this._category || props.category;
    push(track.event(), category, props);
  };

  /**
   * Product viewed.
   *
   * @api private
   * @param {Track} track
   */

  FoxMetrics.prototype.productViewed = function(track) {
    ecommerce('productview', track);
  };

  /**
   * Product Removed.
   *
   * @api private
   * @param {Track} track
   */

  FoxMetrics.prototype.productRemoved = function(track) {
    ecommerce('removecartitem', track);
  };

  /**
   * Product Added.
   *
   * @api private
   * @param {Track} track
   */

  FoxMetrics.prototype.productAdded = function(track) {
    ecommerce('cartitem', track);
  };

  /**
   * Order Completed.
   *
   * @api private
   * @param {Track} track
   */

  FoxMetrics.prototype.orderCompleted = function(track) {
    var orderId = track.orderId();

    // transaction
    push(
      '_fxm.ecommerce.order',
      orderId,
      track.subtotal(),
      track.shipping(),
      track.tax(),
      track.city(),
      track.state(),
      track.zip(),
      track.quantity()
    );

    // items
    each(track.products(), function(product) {
      var track = new Track({ properties: product });
      ecommerce('purchaseitem', track, [
        track.quantity(),
        track.price(),
        orderId
      ]);
    });
  };

  /**
   * Track ecommerce `event` with `track`
   * with optional `arr` to append.
   *
   * @api private
   * @param {string} event
   * @param {Track} track
   * @param {Array} arr
   */

  function ecommerce(event, track, arr) {
    push.apply(
      null,
      [
        '_fxm.ecommerce.' + event,
        track.productId() || track.id() || track.sku(),
        track.name(),
        track.category()
      ].concat(arr || [])
    );
  }

  },{"@segment/analytics.js-integration":373,"component-each":1112,"global-queue":1127,"segmentio-facade":1158}],373:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":374,"./statics":375,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":377,"slug-component":1165}],374:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],375:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":376,"dup":51}],376:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],377:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],378:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var find = require('obj-case').find;
  var reject = require('reject');
  var each = require('@ndhoule/each');
  var Facade = require('segmentio-facade').Track;
  var normalize = require('to-no-case');
  var is = require('is');

  /**
   * Expose `FriendBuy` integration.
   */

  var FriendBuy = (module.exports = integration('FriendBuy')
    .global('friendbuy')
    .option('siteId', '')
    .option('widgets', [])
    .option('siteWideWidgets', [])
    .tag('<script src="//djnf6e5yyirys.cloudfront.net/js/friendbuy.min.js">'));

  /**
   * Initialize.
   *
   * http://developers.friendbuy.com.s3-website-us-east-1.amazonaws.com/#site-identification
   * http://developers.friendbuy.com.s3-website-us-east-1.amazonaws.com/#widget-management
   * @api public
   */

  FriendBuy.prototype.initialize = function() {
    var settings = this.options;
    window.friendbuy = window.friendbuy || [];

    // used to identify your account in our platform so we can properly attribute referral data.
    // You can find your site key in the in Friendbuy web application at Settings > Integration Code.
    window.friendbuy.push(['site', settings.siteId]);

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  FriendBuy.prototype.loaded = function() {
    return window.friendbuy;
  };

  /**
   * Page
   *
   * "Widget Management"
   * http://developers.friendbuy.com.s3-website-us-east-1.amazonaws.com/#widget-management
   *
   * You can map specific `.page()` names to a widget and its respective custom advanced configuration settings
   * since average FB user has multiple unique widgets deployed on specific pages
   *
   * @api public
   */

  FriendBuy.prototype.page = function(page) {
    var widgetSettings = get(this.options.widgets, page.name());

    // Place the widget with `widgetId` into its default location unless widgetSelector defined
    if (widgetSettings.id) {
      var commands = ['widget', widgetSettings.id];

      if (widgetSettings.selector) commands.push(widgetSettings.selector);

      var config = {
        // The display configuration options control how and when a widget is invoked.
        configuration: {
          auto_delay: widgetSettings.autoDelay
            ? parseInt(widgetSettings.autoDelay, 10)
            : null // A value of 0 indicates manual widget invocation which is the default. Waits this many milliseconds after loading to display. Must be null otherwise so that it allows FB UI entered value to override
        }
      };

      // The parameters option is a collection of key-value pairs. These values are added to referral links for the associated widget to facilitate tracking and reporting on referral traffic.
      // The idea is to dynamically set values for defined keys by looking up properties by the provided fields
      var parameters = {};
      each(function(pair) {
        var segmentKey = pair.key;
        var fbKey = pair.value;
        var value = page.proxy('properties.' + segmentKey);
        if (value) return (parameters[fbKey] = value);
      }, widgetSettings.parameters);

      if (!is.empty(parameters)) config.parameters = parameters;

      commands.push(config);

      // Load the widget!
      window.friendbuy.push(commands);
    }

    // Load site wide widgets additional if widget ID is provided
    if (this.options.siteWideWidgets.length) {
      each(function(setting) {
        var widget = setting.value || setting || {};
        var commands = ['widget', widget.id];
        if (widget.selector) commands.push(widget.selector);
        var configs = {
          // The display configuration options control how and when a widget is invoked.
          configuration: {
            auto_delay: widget.autoDelay ? parseInt(widget.autoDelay, 10) : null // A value of 0 indicates manual widget invocation which is the default. Waits this many milliseconds after loading to display. Must be null otherwise so that it allows FB UI entered value to override
          }
        };
        var parameters = {};
        each(function(pair) {
          var segmentKey = pair.key;
          var fbKey = pair.value;
          var value = page.proxy('properties.' + segmentKey);
          if (value) return (parameters[fbKey] = value);
        }, widget.parameters);

        if (!is.empty(parameters)) configs.parameters = parameters;

        commands.push(configs);
        window.friendbuy.push(commands);
      }, this.options.siteWideWidgets);
    }
  };

  /**
   * Identify
   *
   * "Customer Tracking"
   * http://developers.friendbuy.com.s3-website-us-east-1.amazonaws.com/#customer-tracking
   *
   * @api public
   */

  FriendBuy.prototype.identify = function(identify) {
    if (!identify.userId()) return; // required

    var options = identify.options(this.name);
    var customerDetail = reject({
      id: identify.userId(),
      email: identify.email(),
      first_name: identify.firstName(),
      last_name: identify.lastName(),
      stripe_customer_id: find(options, 'stripe_customer_id'),
      chargebee_customer_id: find(options, 'chargebee_customer_id')
    });

    window.friendbuy.push(['track', 'customer', customerDetail]);
  };

  /**
   * Order Completed
   *
   * "Order Tracking"
   * http://developers.friendbuy.com.s3-website-us-east-1.amazonaws.com/#order-tracking
   *
   * @api public
   */

  FriendBuy.prototype.orderCompleted = function(track) {
    if (!track.orderId()) return; // required

    var options = track.options(this.name);
    var orderDetail = reject({
      id: track.orderId(),
      email: track.email(),
      amount: track.revenue(),
      coupon_code: track.proxy('properties.coupon'),
      new_customer: find(options, 'new_customer')
    });

    window.friendbuy.push(['track', 'order', orderDetail]);

    var orderList = [];
    each(function(item) {
      var i = new Facade({ properties: item });

      if (i.sku()) {
        orderList.push(
          reject({
            sku: i.sku(),
            price: i.price(),
            quantity: i.quantity()
          })
        );
      }
    }, track.products());

    window.friendbuy.push(['track', 'products', orderList]);
  };

  /**
   * Find any mapped settings to page `name`.
   *
   * Given something like this:
   *
   * [
   *   { value: { type: 'user', name: 'register' } }
   *   { value: { type: 'user', name: 'invite' } }
   *   { value: { type: 'purchase', name: 'main' } }
   * ]
   *
   * If you do `get(events, 'b')`, it wll give you:
   *
   * { type: 'purchase', name: 'main' }
   *
   * @param {Array} events
   * @param {String} name
   * @return {Object}
   */

  function get(events, name) {
    var ret = {};
    var pageName = normalize(name || '');

    each(function(widget) {
      if (widget.value && pageName === normalize(widget.value.name)) {
        ret = widget.value;
      } else if (pageName === normalize(widget.name)) {
        ret = widget;
      }
    }, events);

    return ret;
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":379,"is":1131,"obj-case":1143,"reject":1150,"segmentio-facade":1158,"to-no-case":388}],379:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":380,"./statics":381,"@ndhoule/defaults":8,"component-bind":1109,"debug":382,"dup":49,"extend":386,"slug-component":1165}],380:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":384}],381:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":385,"dup":51}],382:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":383,"_process":1149,"dup":43}],383:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":387}],384:[function(require,module,exports){

  /**
   * Expose `toNoCase`.
   */

  module.exports = toNoCase;


  /**
   * Test whether a string is camel-case.
   */

  var hasSpace = /\s/;
  var hasSeparator = /[\W_]/;


  /**
   * Remove any starting case from a `string`, like camel or snake, but keep
   * spaces and punctuation that may be important otherwise.
   *
   * @param {String} string
   * @return {String}
   */

  function toNoCase (string) {
    if (hasSpace.test(string)) return string.toLowerCase();
    if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase();
    return uncamelize(string).toLowerCase();
  }


  /**
   * Separator splitter.
   */

  var separatorSplitter = /[\W_]+(.|$)/g;


  /**
   * Un-separate a `string`.
   *
   * @param {String} string
   * @return {String}
   */

  function unseparate (string) {
    return string.replace(separatorSplitter, function (m, next) {
      return next ? ' ' + next : '';
    });
  }


  /**
   * Camelcase splitter.
   */

  var camelSplitter = /(.)([A-Z]+)/g;


  /**
   * Un-camelcase a `string`.
   *
   * @param {String} string
   * @return {String}
   */

  function uncamelize (string) {
    return string.replace(camelSplitter, function (m, previous, uppers) {
      return previous + ' ' + uppers.toLowerCase().split('').join(' ');
    });
  }
  },{}],385:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],386:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],387:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],388:[function(require,module,exports){

  /**
   * Export.
   */

  module.exports = toNoCase

  /**
   * Test whether a string is camel-case.
   */

  var hasSpace = /\s/
  var hasSeparator = /(_|-|\.|:)/
  var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/

  /**
   * Remove any starting case from a `string`, like camel or snake, but keep
   * spaces and punctuation that may be important otherwise.
   *
   * @param {String} string
   * @return {String}
   */

  function toNoCase(string) {
    if (hasSpace.test(string)) return string.toLowerCase()
    if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()
    if (hasCamel.test(string)) return uncamelize(string).toLowerCase()
    return string.toLowerCase()
  }

  /**
   * Separator splitter.
   */

  var separatorSplitter = /[\W_]+(.|$)/g

  /**
   * Un-separate a `string`.
   *
   * @param {String} string
   * @return {String}
   */

  function unseparate(string) {
    return string.replace(separatorSplitter, function (m, next) {
      return next ? ' ' + next : ''
    })
  }

  /**
   * Camelcase splitter.
   */

  var camelSplitter = /(.)([A-Z]+)/g

  /**
   * Un-camelcase a `string`.
   *
   * @param {String} string
   * @return {String}
   */

  function uncamelize(string) {
    return string.replace(camelSplitter, function (m, previous, uppers) {
      return previous + ' ' + uppers.toLowerCase().split('').join(' ')
    })
  }

  },{}],389:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var camel = require('camelcase');
  var foldl = require('@ndhoule/foldl');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `FullStory` integration.
   *
   * https://www.fullstory.com/docs/developer
   */

  var FullStory = (module.exports = integration('FullStory')
    .option('org', '')
    .option('debug', false)
    .option('trackAllPages', false)
    .option('trackNamedPages', false)
    .option('trackCategorizedPages', false)
    .option('trackPagesWithEvents', true)
    .tag(
      '<script async src="https://edge.fullstory.com/s/fs.js" crossorigin="anonymous"></script>'
    ));

  /**
   * The ApiSource string.
   *
   * @type {string}
   */
  var apiSource = 'segment';

  /**
   * Initialize.
   */
  FullStory.prototype.initialize = function() {
    window._fs_debug = this.options.debug;
    window._fs_host = 'fullstory.com';
    window._fs_script = 'edge.fullstory.com/s/fs.js';
    window._fs_org = this.options.org;
    window._fs_namespace = 'FS';

    /* eslint-disable */
    /* istanbul ignore next */
    /* The snippet below differs slightly from the snippet available on fullstory.com because fs.js is already loaded above*/
    (function(m,n,e,t,l,o,g,y){
      if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');} return;}
      g=m[e]=function(a,b,s){g.q?g.q.push([a,b,s]):g._api(a,b,s);};g.q=[];
      g.identify=function(i,v,s){g(l,{uid:i},s);if(v)g(l,v,s)};g.setUserVars=function(v,s){g(l,v,s)};g.event=function(i,v,s){g('event',{n:i,p:v},s)};
      g.anonymize=function(){g.identify(!!0)};
      g.shutdown=function(){g("rec",!1)};g.restart=function(){g("rec",!0)};
      g.log = function(a,b){g("log",[a,b])};
      g.consent=function(a){g("consent",!arguments.length||a)};
      g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};
      g.clearUserCookie=function(){};
      g.setVars=function(n, p){g('setVars',[n,p]);};
      g._w={};y='XMLHttpRequest';g._w[y]=m[y];y='fetch';g._w[y]=m[y];
      if(m[y])m[y]=function(){return g._w[y].apply(this,arguments)};
      g._v="1.3.0";
    })(window,document,window['_fs_namespace'],'script','user');
    /* eslint-enable */

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */
  FullStory.prototype.loaded = function() {
    return !!window.FS;
  };

  /**
   * Identify.  But, use FS.setUserVars if we only have an anonymous id, keeping the
   * user id unbound until we (hopefully) get a login page or similar and another call
   * to identify with more useful contents.  (This because FullStory doesn't like the
   * user id changing once set.)
   *
   * @param {Identify} identify
   */
  FullStory.prototype.identify = function(identify) {
    var traits = identify.traits({ name: 'displayName' });

    var newTraits = foldl(
      function(results, value, key) {
        var rs = results;
        if (key !== 'id') {
          rs[
            key === 'displayName' || key === 'email' ? key : camelCaseField(key)
          ] = value;
        }
        return rs;
      },
      {},
      traits
    );
    if (identify.userId()) {
      window.FS.identify(String(identify.userId()), newTraits, apiSource);
    } else {
      newTraits.segmentAnonymousId_str = String(identify.anonymousId());
      window.FS.setUserVars(newTraits, apiSource);
    }
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  FullStory.prototype.page = function(page) {
    var category = page.category();
    var name = page.fullName();
    var opts = this.options;
    var trackProps = page.track().properties();

    if (name && opts.trackNamedPages) {
      // named pages
      if (opts.trackPagesWithEvents) {
        this.track(page.track(name));
      }

      window.FS.setVars(
        'page',
        Object.assign(trackProps, { pageName: name }),
        apiSource
      );
    } else if (category && opts.trackCategorizedPages) {
      // categorized pages
      if (opts.trackPagesWithEvents) {
        this.track(page.track(category));
      }

      window.FS.setVars(
        'page',
        Object.assign(trackProps, { pageName: category }),
        apiSource
      );
    } else if (opts.trackAllPages) {
      // all pages
      if (opts.trackPagesWithEvents) {
        this.track(page.track());
      }
      window.FS.setVars('page', trackProps, apiSource);
    }
  };

  /**
   * Track. Passes the events directly to FullStory via FS.event API.
   *
   * @param {Track} track
   */
  FullStory.prototype.track = function(track) {
    window.FS.event(track.event(), track.properties(), apiSource);
  };

  /**
   * Camel cases `.`, `-`, `_`, and white space within fieldNames. Leaves type suffix alone.
   *
   * NOTE: Does not fix otherwise malformed fieldNames.
   * FullStory will scrub characters from keys that do not conform to /^[a-zA-Z][a-zA-Z0-9_]*$/.
   *
   * @param {string} fieldName
   */
  function camelCaseField(fieldName) {
    // Do not camel case across type suffixes.
    var parts = fieldName.split('_');
    if (parts.length > 1) {
      var typeSuffix = parts.pop();
      switch (typeSuffix) {
        case 'str':
        case 'int':
        case 'date':
        case 'real':
        case 'bool':
        case 'strs':
        case 'ints':
        case 'dates':
        case 'reals':
        case 'bools':
          return camel(parts.join('_')) + '_' + typeSuffix;
        default: // passthrough
      }
    }

    // No type suffix found. Camel case the whole field name.
    return camel(fieldName);
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":390,"camelcase":396}],390:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":391,"./statics":392,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":393,"dup":40,"slug-component":1165}],391:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":395,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],392:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":397,"dup":42}],393:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":394,"_process":1149,"dup":43}],394:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":398}],395:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],396:[function(require,module,exports){
  'use strict';

  function preserveCamelCase(str) {
    var isLastCharLower = false;

    for (var i = 0; i < str.length; i++) {
      var c = str.charAt(i);

      if (isLastCharLower && (/[a-zA-Z]/).test(c) && c.toUpperCase() === c) {
        str = str.substr(0, i) + '-' + str.substr(i);
        isLastCharLower = false;
        i++;
      } else {
        isLastCharLower = (c.toLowerCase() === c);
      }
    }

    return str;
  }

  module.exports = function () {
    var str = [].map.call(arguments, function (str) {
      return str.trim();
    }).filter(function (str) {
      return str.length;
    }).join('-');

    if (!str.length) {
      return '';
    }

    if (str.length === 1) {
      return str.toLowerCase();
    }

    if (!(/[_.\- ]+/).test(str)) {
      if (str === str.toUpperCase()) {
        return str.toLowerCase();
      }

      if (str[0] !== str[0].toLowerCase()) {
        return str[0].toLowerCase() + str.slice(1);
      }

      return str;
    }

    str = preserveCamelCase(str);

    return str
    .replace(/^[_.\- ]+/, '')
    .toLowerCase()
    .replace(/[_.\- ]+(\w|$)/g, function (m, p1) {
      return p1.toUpperCase();
    });
  };

  },{}],397:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],398:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],399:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_gauges');

  /**
   * Expose `Gauges` integration.
   */

  var Gauges = (module.exports = integration('Gauges')
    .assumesPageview()
    .global('_gauges')
    .option('siteId', '')
    .tag(
      '<script id="gauges-tracker" src="//secure.gaug.es/track.js" data-site-id="{{ siteId }}">'
    ));

  /**
   * Initialize Gauges.
   *
   * http://get.gaug.es/documentation/tracking/
   *
   * @api public
   */

  Gauges.prototype.initialize = function() {
    window._gauges = window._gauges || [];
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Gauges.prototype.loaded = function() {
    return !!(window._gauges && window._gauges.push !== Array.prototype.push);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Gauges.prototype.page = function() {
    push('track');
  };

  },{"@segment/analytics.js-integration":400,"global-queue":1127}],400:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":401,"./statics":402,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],401:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":403,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],402:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":404,"dup":42}],403:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],404:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],405:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var onBody = require('on-body-ready');

  /**
   * Expose `GetSatisfaction` integration.
   */

  var GetSatisfaction = (module.exports = integration('Get Satisfaction')
    .assumesPageview()
    .global('GSFN')
    .option('widgetId', '')
    .tag('<script src="https://loader.engage.gsfn.us/loader.js">'));

  /**
   * Initialize.
   *
   * https://console.getsatisfaction.com/start/101022?signup=true#engage
   *
   * @api public
   */

  GetSatisfaction.prototype.initialize = function() {
    var self = this;
    var widget = this.options.widgetId;
    var div = document.createElement('div');
    var id = (div.id = 'getsat-widget-' + widget);
    onBody(function(body) {
      body.appendChild(div);
    });

    // usually the snippet is sync, so wait for it before initializing the tab
    this.load(function() {
      window.GSFN.loadWidget(widget, { containerId: id });
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  GetSatisfaction.prototype.loaded = function() {
    return !!window.GSFN;
  };

  },{"@segment/analytics.js-integration":406,"on-body-ready":1146}],406:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":407,"./statics":408,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],407:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":409,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],408:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":410,"dup":42}],409:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],410:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],411:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Track = require('segmentio-facade').Track;
  var defaults = require('@ndhoule/defaults');
  var dot = require('obj-case');
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var len = require('object-component').length;
  var push = require('global-queue')('_gaq');
  var reject = require('reject');
  var useHttps = require('use-https');
  var extend = require('extend');
  var user;

  /**
   * Expose plugin.
   */

  module.exports = exports = function(analytics) {
    // eslint-disable-next-line no-use-before-define
    analytics.addIntegration(GA);
    user = analytics.user();
  };

  /**
   * Expose `GA` integration.
   *
   * http://support.google.com/analytics/bin/answer.py?hl=en&answer=2558867
   * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiBasicConfiguration#_gat.GA_Tracker_._setSiteSpeedSampleRate
   */

  var GA = (exports.Integration = integration('Google Analytics')
    .readyOnLoad()
    .global('ga')
    .global('gaplugins')
    .global('_gaq')
    .global('GoogleAnalyticsObject')
    .option('anonymizeIp', false)
    .option('useGoogleAmpClientId', false)
    .option('classic', false)
    .option('contentGroupings', {})
    .option('dimensions', {})
    .option('domain', 'auto')
    .option('doubleClick', false)
    .option('enhancedEcommerce', false)
    .option('enhancedLinkAttribution', false)
    .option('ignoredReferrers', null)
    .option('includeSearch', false)
    .option('setAllMappedProps', true)
    .option('metrics', {})
    .option('nonInteraction', false)
    .option('sendUserId', false)
    .option('siteSpeedSampleRate', 1)
    .option('sampleRate', 100)
    .option('trackCategorizedPages', true)
    .option('trackNamedPages', true)
    .option('trackingId', '')
    .option('optimize', '')
    .option('nameTracker', false)
    .option('resetCustomDimensionsOnPage', [])
    .tag('library', '<script src="//www.google-analytics.com/analytics.js">')
    .tag('double click', '<script src="//stats.g.doubleclick.net/dc.js">')
    .tag('http', '<script src="http://www.google-analytics.com/ga.js">')
    .tag('https', '<script src="https://ssl.google-analytics.com/ga.js">'));

  /**
   * On `construct` swap any config-based methods to the proper implementation.
   */

  GA.on('construct', function(integration) {
    /* eslint-disable */
    if (integration.options.classic) {
      integration.initialize = integration.initializeClassic;
      integration.loaded = integration.loadedClassic;
      integration.page = integration.pageClassic;
      integration.track = integration.trackClassic;
      integration.orderCompleted = integration.completedOrderClassic;
    } else if (integration.options.enhancedEcommerce) {
      integration.productViewed = integration.productViewedEnhanced;
      integration.productClicked = integration.productClickedEnhanced;
      integration.productAdded = integration.productAddedEnhanced;
      integration.productRemoved = integration.productRemovedEnhanced;
      integration.checkoutStarted = integration.checkoutStartedEnhanced;
      integration.checkoutStepViewed = integration.checkoutStepViewedEnhanced;
      integration.checkoutStepCompleted =
        integration.checkoutStepCompletedEnhanced;
      integration.orderUpdated = integration.orderUpdatedEnhanced;
      integration.orderCompleted = integration.orderCompletedEnhanced;
      integration.orderRefunded = integration.orderRefundedEnhanced;
      integration.promotionViewed = integration.promotionViewedEnhanced;
      integration.promotionClicked = integration.promotionClickedEnhanced;
      integration.productListViewed = integration.productListViewedEnhanced;
      integration.productListFiltered = integration.productListFilteredEnhanced;
    }
    /* eslint-enable */
  });

  /**
   * Initialize.
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/advanced
   */

  GA.prototype.initialize = function() {
    this.pageCalled = false;
    var opts = this.options;

    // setup the tracker globals
    window.GoogleAnalyticsObject = 'ga';
    window.ga =
      window.ga ||
      function() {
        window.ga.q = window.ga.q || [];
        window.ga.q.push(arguments);
      };
    window.ga.l = new Date().getTime();

    if (window.location.hostname === 'localhost') opts.domain = 'none';
    var config = {
      // Fall back on default to protect against empty string
      cookieDomain: opts.domain || GA.prototype.defaults.domain,
      siteSpeedSampleRate: opts.siteSpeedSampleRate,
      sampleRate: opts.sampleRate,
      allowLinker: true,
      useAmpClientId: opts.useGoogleAmpClientId
    };

    // set tracker name to avoid collisions with unnamed third party trackers
    if (opts.nameTracker) {
      config.name = 'segmentGATracker';
      this._trackerName = 'segmentGATracker.'; // tracker name must be prepended to all ga method calls with format [name].[method]
    } else {
      this._trackerName = ''; // tracker name must be set even if empty to avoid undefined references when prepending
    }
    window.ga('create', opts.trackingId, config);

    if (opts.optimize) window.ga(this._trackerName + 'require', opts.optimize);

    // display advertising
    if (opts.doubleClick) {
      window.ga(this._trackerName + 'require', 'displayfeatures');
    }

    // https://support.google.com/analytics/answer/2558867?hl=en
    if (opts.enhancedLinkAttribution) {
      window.ga(this._trackerName + 'require', 'linkid', 'linkid.js');
    }

    // send global id
    if (opts.sendUserId && user.id()) {
      window.ga(this._trackerName + 'set', 'userId', user.id());
    }

    // anonymize after initializing, otherwise a warning is shown
    // in google analytics debugger
    if (opts.anonymizeIp)
      window.ga(this._trackerName + 'set', 'anonymizeIp', true);

    // initialize page with `id` appended to user's traits
    // sets `id` as a custom dimension for the lifetime of the tracker object and
    // ensures `id` sent as a custom dimension for all hits on the page
    var userTraits = user.traits();
    if (user.id()) {
      userTraits.id = user.id();
    }

    // custom dimensions & metrics
    var custom = metrics(userTraits, opts);
    if (len(custom)) window.ga(this._trackerName + 'set', custom);

    this.load('library', this.ready);
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  GA.prototype.loaded = function() {
    return !!window.gaplugins;
  };

  /**
   * Page.
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/pages
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/single-page-applications#multiple-hits
   *
   * @api public
   * @param {Page} page
   */

  GA.prototype.page = function(page) {
    var category = page.category();
    var props = page.properties();
    var name = page.fullName();
    var opts = this.options;
    var campaign = page.proxy('context.campaign') || {};
    var pageview = {};
    var pagePath = path(props, this.options);
    var pageTitle = name || props.title;
    var pageReferrer = page.referrer() || '';
    var self = this;
    var track;

    // store for later
    // TODO: Why? Document this better
    this._category = category;

    pageview.page = pagePath;
    pageview.title = pageTitle;
    pageview.location = props.url;

    if (campaign.name) pageview.campaignName = campaign.name;
    if (campaign.source) pageview.campaignSource = campaign.source;
    if (campaign.medium) pageview.campaignMedium = campaign.medium;
    if (campaign.content) pageview.campaignContent = campaign.content;
    if (campaign.term) pageview.campaignKeyword = campaign.term;

    // set
    var payload = {
      page: pagePath,
      title: pageTitle
    };

    // Reset custom dimension which are previously set.
    // Uses the configured dimensions as:
    // opts.dimensions: { "fruit": "dimension1" }
    // opts.resetCustomDimensions: [ "fruit" ]
    // --> resetCustomDimensions: { "dimension1": null }
    var resetCustomDimensions = {};
    for (var i = 0; i < opts.resetCustomDimensionsOnPage.length; i++) {
      var property = opts.resetCustomDimensionsOnPage[i];
      if (opts.dimensions[property]) {
        resetCustomDimensions[opts.dimensions[property]] = null;
      }
    }
    window.ga(self._trackerName + 'set', resetCustomDimensions);

    pageview = extend(
      pageview,
      setCustomDimenionsAndMetrics(props, opts, self._trackerName)
    );

    if (pageReferrer !== document.referrer) payload.referrer = pageReferrer; // allow referrer override if referrer was manually set
    window.ga(this._trackerName + 'set', payload);

    if (this.pageCalled) delete pageview.location;

    // send
    window.ga(this._trackerName + 'send', 'pageview', pageview);

    // categorized pages
    if (category && this.options.trackCategorizedPages) {
      track = page.track(category);
      this.track(track, { nonInteraction: 1 });
    }

    // named pages
    if (name && this.options.trackNamedPages) {
      track = page.track(name);
      this.track(track, { nonInteraction: 1 });
    }

    this.pageCalled = true;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} event
   */

  GA.prototype.identify = function(identify) {
    var opts = this.options;

    if (opts.sendUserId && identify.userId()) {
      window.ga(this._trackerName + 'set', 'userId', identify.userId());
    }

    // Set dimensions
    var custom = metrics(identify.traits(), opts);
    if (len(custom)) window.ga(this._trackerName + 'set', custom);
  };

  /**
   * Track.
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/events
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference
   *
   * @param {Track} event
   */

  GA.prototype.track = function(track, options) {
    var contextOpts = track.options(this.name);
    var interfaceOpts = this.options;
    var opts = defaults(options || {}, contextOpts);
    opts = defaults(opts, interfaceOpts);
    var props = track.properties();
    var campaign = track.proxy('context.campaign') || {};
    var self = this;

    var payload = {
      eventAction: track.event(),
      eventCategory: track.category() || this._category || 'All',
      eventLabel: props.label,
      eventValue: formatValue(props.value || track.revenue()),
      // Allow users to override their nonInteraction integration setting for any single particluar event.
      nonInteraction:
        props.nonInteraction !== undefined
          ? !!props.nonInteraction
          : !!opts.nonInteraction
    };

    if (campaign.name) payload.campaignName = campaign.name;
    if (campaign.source) payload.campaignSource = campaign.source;
    if (campaign.medium) payload.campaignMedium = campaign.medium;
    if (campaign.content) payload.campaignContent = campaign.content;
    if (campaign.term) payload.campaignKeyword = campaign.term;

    payload = extend(
      payload,
      setCustomDimenionsAndMetrics(props, interfaceOpts, self._trackerName)
    );

    window.ga(this._trackerName + 'send', 'event', payload);
  };

  /**
   * Order completed.
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#multicurrency
   *
   * @param {Track} track
   * @api private
   */

  GA.prototype.orderCompleted = function(track) {
    var total = track.total() || track.revenue() || 0;
    var orderId = track.orderId();
    var products = track.products();
    var props = track.properties();
    var self = this;

    // orderId is required.
    if (!orderId) return;

    // require ecommerce
    if (!this.ecommerce) {
      window.ga(this._trackerName + 'require', 'ecommerce');
      this.ecommerce = true;
    }

    // add transaction
    window.ga(this._trackerName + 'ecommerce:addTransaction', {
      affiliation: props.affiliation,
      shipping: track.shipping(),
      revenue: total,
      tax: track.tax(),
      id: orderId,
      currency: track.currency()
    });

    // add products
    each(products, function(product) {
      var productTrack = createProductTrack(track, product);
      window.ga(self._trackerName + 'ecommerce:addItem', {
        category: productTrack.category(),
        quantity: productTrack.quantity(),
        price: productTrack.price(),
        name: productTrack.name(),
        sku: productTrack.sku(),
        id: orderId,
        currency: productTrack.currency()
      });
    });

    // send
    window.ga(this._trackerName + 'ecommerce:send');
  };

  /**
   * Initialize (classic).
   *
   * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiBasicConfiguration
   */

  GA.prototype.initializeClassic = function() {
    var opts = this.options;
    var anonymize = opts.anonymizeIp;
    var domain = opts.domain;
    var enhanced = opts.enhancedLinkAttribution;
    var ignore = opts.ignoredReferrers;
    var sample = opts.siteSpeedSampleRate;

    window._gaq = window._gaq || [];
    push('_setAccount', opts.trackingId);
    push('_setAllowLinker', true);

    if (anonymize) push('_gat._anonymizeIp');
    if (domain) push('_setDomainName', domain);
    if (sample) push('_setSiteSpeedSampleRate', sample);

    if (enhanced) {
      var protocol = document.location.protocol === 'https:' ? 'https:' : 'http:';
      var pluginUrl =
        protocol + '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
      push('_require', 'inpage_linkid', pluginUrl);
    }

    if (ignore) {
      if (!is.array(ignore)) ignore = [ignore];
      each(ignore, function(domain) {
        push('_addIgnoredRef', domain);
      });
    }

    if (this.options.doubleClick) {
      this.load('double click', this.ready);
    } else {
      var name = useHttps() ? 'https' : 'http';
      this.load(name, this.ready);
    }
  };

  /**
   * Loaded? (classic)
   *
   * @return {Boolean}
   */

  GA.prototype.loadedClassic = function() {
    return !!(window._gaq && window._gaq.push !== Array.prototype.push);
  };

  /**
   * Page (classic).
   *
   * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiBasicConfiguration
   *
   * @param {Page} page
   */

  GA.prototype.pageClassic = function(page) {
    var category = page.category();
    var props = page.properties();
    var name = page.fullName();
    var track;

    push('_trackPageview', path(props, this.options));

    // categorized pages
    if (category && this.options.trackCategorizedPages) {
      track = page.track(category);
      this.track(track, { nonInteraction: 1 });
    }

    // named pages
    if (name && this.options.trackNamedPages) {
      track = page.track(name);
      this.track(track, { nonInteraction: 1 });
    }
  };

  /**
   * Track (classic).
   *
   * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEventTracking
   *
   * @param {Track} track
   */

  GA.prototype.trackClassic = function(track, options) {
    var opts = options || track.options(this.name);
    var props = track.properties();
    var revenue = track.revenue();
    var event = track.event();
    var category = this._category || track.category() || 'All';
    var label = props.label;
    var value = formatValue(revenue || props.value);
    var nonInteraction = !!(props.nonInteraction || opts.nonInteraction);
    push('_trackEvent', category, event, label, value, nonInteraction);
  };

  /**
   * Completed order.
   *
   * https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingEcommerce
   * https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingEcommerce#localcurrencies
   *
   * @param {Track} track
   * @api private
   */

  GA.prototype.completedOrderClassic = function(track) {
    var total = track.total() || track.revenue() || 0;
    var orderId = track.orderId();
    var products = track.products() || [];
    var props = track.properties();
    var currency = track.currency();

    // required
    if (!orderId) return;

    // add transaction
    push(
      '_addTrans',
      orderId,
      props.affiliation,
      total,
      track.tax(),
      track.shipping(),
      track.city(),
      track.state(),
      track.country()
    );

    // add items
    each(products, function(product) {
      var track = new Track({ properties: product });
      push(
        '_addItem',
        orderId,
        track.sku(),
        track.name(),
        track.category(),
        track.price(),
        track.quantity()
      );
    });

    // send
    push('_set', 'currencyCode', currency);
    push('_trackTrans');
  };

  /**
   * Return the path based on `properties` and `options`.
   *
   * @param {Object} properties
   * @param {Object} options
   * @return {string|undefined}
   */

  function path(properties, options) {
    if (!properties) return;
    var str = properties.path;
    if (options.includeSearch && properties.search) str += properties.search;
    return str;
  }

  /**
   * Set custom dimensions and metrics
   *
   * @param {Properties} props
   * @param {Options} opts
   * @param {String} trackerName
   * @return {Object}
   */

  function setCustomDimenionsAndMetrics(props, opts, trackerName) {
    var ret = {};
    var custom = metrics(props, opts);
    if (len(custom)) {
      if (opts.setAllMappedProps) {
        window.ga(trackerName + 'set', custom);
      } else {
        // Add custom dimensions / metrics to event payload
        each(custom, function(key, value) {
          ret[key] = value;
        });
        return ret;
      }
    }
  }

  /**
   * Format the value property to Google's liking.
   *
   * @param {Number} value
   * @return {Number}
   */

  function formatValue(value) {
    if (!value || value < 0) return 0;
    return Math.round(value);
  }

  function getProductPosition(item, products) {
    var position = item.properties().position;
    if (
      typeof position !== 'undefined' &&
      !Number.isNaN(Number(position)) &&
      Number(position) > -1
    ) {
      // If position passed and is valid positive number.
      return position;
    }
    return (
      products
        .map(function(x) {
          return x.product_id;
        })
        .indexOf(item.productId()) + 1
    );
  }

  /**
   * Map google's custom dimensions, metrics & content groupings with `obj`.
   *
   * Example:
   *
   *      metrics({ revenue: 1.9 }, { { metrics : { revenue: 'metric8' } });
   *      // => { metric8: 1.9 }
   *
   *      metrics({ revenue: 1.9 }, {});
   *      // => {}
   *
   * @param {Object} obj
   * @param {Object} data
   * @return {Object|null}
   * @api private
   */

  function metrics(obj, data) {
    var dimensions = data.dimensions;
    var metrics = data.metrics;
    var contentGroupings = data.contentGroupings;

    var ret = {};

    each([metrics, dimensions, contentGroupings], function(group) {
      each(group, function(prop, key) {
        var value = dot(obj, prop) || obj[prop];
        if (is.bool(value)) value = value.toString();
        if (value || value === 0) ret[key] = value;
      });
    });

    return ret;
  }

  /**
   * Loads ec.js (unless already loaded)
   *
   * @param {Track} track
   */

  GA.prototype.loadEnhancedEcommerce = function(track) {
    var self = this;

    if (!this.enhancedEcommerceLoaded) {
      window.ga(self._trackerName + 'require', 'ec');
      this.enhancedEcommerceLoaded = true;
    }

    // Ensure we set currency for every hit
    window.ga(self._trackerName + 'set', '&cu', track.currency());
  };

  /**
   * Pushes an event and all previously set EE data to GA.
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.pushEnhancedEcommerce = function(track, opts, trackerName) {
    var self = this;
    // Send a custom non-interaction event to ensure all EE data is pushed.
    // Without doing this we'd need to require page display after setting EE data.
    var args = reject([
      self._trackerName + 'send',
      'event',
      track.category() || 'EnhancedEcommerce',
      track.event() || 'Action not defined',
      track.properties().label,
      extend(
        { nonInteraction: 1 },
        setCustomDimenionsAndMetrics(track.properties(), opts, trackerName)
      )
    ]);

    // Google expects an event level category. This field should be generic and not scoped to product level category: https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-click.
    // These 4 events have a top level `category` field per Segment Ecommerce Spec referencing the product not event.
    // For these events we will default to set the event category to 'EnhancedEcommerce'
    var event = track.event().toLowerCase();
    var eventsWithCategoryFieldProductScoped = [
      'product clicked',
      'product added',
      'product viewed',
      'product removed'
    ];
    if (eventsWithCategoryFieldProductScoped.includes(event)) {
      args[2] = 'EnhancedEcommerce';
    }
    window.ga.apply(window, args);
  };

  /**
   * Started order - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#checkout-steps
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.checkoutStartedEnhanced = function(track) {
    // same as viewed checkout step #1
    this.checkoutStepViewed(track);
  };

  /**
   * Updated order - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#checkout-steps
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.orderUpdatedEnhanced = function(track) {
    // Same event as started order - will override
    this.checkoutStartedEnhanced(track);
  };

  /**
   * Viewed checkout step - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#checkout-steps
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.checkoutStepViewedEnhanced = function(track) {
    var products = track.products();
    var props = track.properties();
    var options = extractCheckoutOptions(track);
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);

    each(products, function(product) {
      var productTrack = createProductTrack(track, product);
      enhancedEcommerceTrackProduct(productTrack, self._trackerName, opts);
    });
    window.ga(self._trackerName + 'ec:setAction', 'checkout', {
      step: props.step || 1,
      option: options || undefined
    });

    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Completed checkout step - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#checkout-options
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.checkoutStepCompletedEnhanced = function(track) {
    var props = track.properties();
    var options = extractCheckoutOptions(track);
    var self = this;

    // Only send an event if we have step and options to update
    if (!props.step) return;

    // Append checkout option if it is set.
    var params = {
      step: props.step || 1,
      option: options || undefined
    };

    this.loadEnhancedEcommerce(track);

    window.ga(self._trackerName + 'ec:setAction', 'checkout_option', params);

    window.ga(self._trackerName + 'send', 'event', 'Checkout', 'Option');
  };

  /**
   * Completed order - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-transactions
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.orderCompletedEnhanced = function(track) {
    var total = track.total() || track.revenue() || 0;
    var orderId = track.orderId();
    var products = track.products();
    var props = track.properties();
    var opts = this.options;
    var self = this;

    // orderId is required.
    if (!orderId) return;

    this.loadEnhancedEcommerce(track);

    each(products, function(product) {
      var productTrack = createProductTrack(track, product);
      enhancedEcommerceTrackProduct(productTrack, self._trackerName, opts);
    });

    window.ga(self._trackerName + 'ec:setAction', 'purchase', {
      id: orderId,
      affiliation: props.affiliation,
      revenue: total,
      tax: track.tax(),
      shipping: track.shipping(),
      coupon: track.coupon()
    });

    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Refunded order - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-refunds
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.orderRefundedEnhanced = function(track) {
    var orderId = track.orderId();
    var products = track.products();
    var self = this;
    var opts = this.options;

    // orderId is required.
    if (!orderId) return;

    this.loadEnhancedEcommerce(track);

    // Without any products it's a full refund
    each(products, function(product) {
      var track = new Track({ properties: product });
      window.ga(self._trackerName + 'ec:addProduct', {
        id: track.productId() || track.id() || track.sku(),
        quantity: track.quantity()
      });
    });

    window.ga(self._trackerName + 'ec:setAction', 'refund', {
      id: orderId
    });

    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Added product - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#add-remove-cart
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productAddedEnhanced = function(track) {
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    enhancedEcommerceProductAction(track, 'add', null, self._trackerName, opts);
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Removed product - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#add-remove-cart
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productRemovedEnhanced = function(track) {
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    enhancedEcommerceProductAction(
      track,
      'remove',
      null,
      self._trackerName,
      opts
    );
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Viewed product details - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-detail-view
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productViewedEnhanced = function(track) {
    var props = track.properties();
    var data = {};
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    // list property is optional
    if (props.list) data.list = props.list;
    enhancedEcommerceProductAction(
      track,
      'detail',
      data,
      self._trackerName,
      opts
    );
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Clicked product - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-actions
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productClickedEnhanced = function(track) {
    var props = track.properties();
    var data = {};
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    // list property is optional
    if (props.list) data.list = props.list;
    enhancedEcommerceProductAction(track, 'click', data, self._trackerName, opts);
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Viewed promotion - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-promo-impressions
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.promotionViewedEnhanced = function(track) {
    var props = track.properties();
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    window.ga(self._trackerName + 'ec:addPromo', {
      id: track.promotionId() || track.id(),
      name: track.name(),
      creative: props.creative,
      position: props.position
    });
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Clicked promotion - Enhanced Ecommerce
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-promo-clicks
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.promotionClickedEnhanced = function(track) {
    var props = track.properties();
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    window.ga(self._trackerName + 'ec:addPromo', {
      id: track.promotionId() || track.id(),
      name: track.name(),
      creative: props.creative,
      position: props.position
    });
    window.ga(self._trackerName + 'ec:setAction', 'promo_click', {});
    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Product List Viewed - Enhanced Ecommerce (Mapped to Product Impression)
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-impression
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productListViewedEnhanced = function(track) {
    var props = track.properties();
    var products = track.products();
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);

    each(products, function(product) {
      // If we don't have an ID/SKU or name, return - GA will reject the impression.
      var item = new Track({ properties: product });
      if (!(item.productId() || item.sku()) && !item.name()) return;
      var impressionObj = {
        id: item.productId() || item.sku(),
        name: item.name(),
        category: item.category() || track.category(),
        list: props.list_id || track.category() || 'products',
        brand: item.properties().brand,
        variant: item.properties().variant,
        price: item.price(),
        position: getProductPosition(item, products)
      };

      impressionObj = extend(impressionObj, metrics(item.properties(), opts));

      for (var prop in impressionObj) {
        if (impressionObj[prop] === undefined) delete impressionObj[prop];
      }
      window.ga(self._trackerName + 'ec:addImpression', impressionObj);
    });

    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Product List Filtered - Enhanced Ecommerce (Mapped to Product Impression)
   *
   * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-impression
   *
   * @api private
   * @param {Track} track
   */

  GA.prototype.productListFilteredEnhanced = function(track) {
    var props = track.properties();
    var products = track.products();
    props.filters = props.filters || [];
    props.sorters = props.sorters || [];
    var filters = props.filters
      .map(function(obj) {
        return obj.type + ':' + obj.value;
      })
      .join();
    var sorts = props.sorts
      .map(function(obj) {
        return obj.type + ':' + obj.value;
      })
      .join();
    var self = this;
    var opts = this.options;

    this.loadEnhancedEcommerce(track);
    each(products, function(product) {
      // If we don't have an ID/SKU or name, return - GA will reject the impression.
      var item = new Track({ properties: product });
      if (!(item.productId() || item.sku()) && !item.name()) return;
      var impressionObj = {
        id: item.productId() || item.sku(),
        name: item.name(),
        category: item.category() || track.category(),
        list: props.list_id || track.category() || 'search results',
        brand: item.properties().brand,
        variant: filters + '::' + sorts,
        price: item.price(),
        position: getProductPosition(item, products)
      };

      impressionObj = extend(impressionObj, metrics(item.properties(), opts));

      for (var prop in impressionObj) {
        if (impressionObj[prop] === undefined) delete impressionObj[prop];
      }
      window.ga(self._trackerName + 'ec:addImpression', impressionObj);
    });

    this.pushEnhancedEcommerce(track, opts, self._trackerName);
  };

  /**
   * Enhanced ecommerce track product.
   *
   * Simple helper so that we don't repeat `ec:addProduct` everywhere.
   *
   * @api private
   * @param {Track} track
   */

  function enhancedEcommerceTrackProduct(track, trackerName, opts) {
    var props = track.properties();
    var product = {
      id: track.productId() || track.id() || track.sku(),
      name: track.name(),
      category: track.category(),
      quantity: track.quantity(),
      price: track.price(),
      brand: props.brand,
      variant: props.variant,
      currency: track.currency()
    };

    // https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-data
    // GA requires an integer but our specs says "Number", so it could be a float.
    if (props.position != null) {
      product.position = Math.round(props.position);
    }

    // append coupon if it set
    // https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-transactions
    var coupon = track.proxy('properties.coupon');
    if (coupon) product.coupon = coupon;

    product = extend(product, metrics(props, opts));
    window.ga(trackerName + 'ec:addProduct', product);
  }

  /**
   * Set `action` on `track` with `data`.
   *
   * @api private
   * @param {Track} track
   * @param {String} action
   * @param {Object} data
   */

  function enhancedEcommerceProductAction(
    track,
    action,
    data,
    trackerName,
    opts
  ) {
    enhancedEcommerceTrackProduct(track, trackerName, opts);
    window.ga(trackerName + 'ec:setAction', action, data || {});
  }

  /**
   * Extracts checkout options.
   *
   * @api private
   * @param {Facade.Track} msg
   * @return {string|null}
   */

  var extractCheckoutOptions = function extractCheckoutOptions(msg) {
    var options = [
      msg.proxy('properties.paymentMethod'),
      msg.proxy('properties.shippingMethod')
    ];

    // Remove all nulls, and join with commas.
    var valid = reject(options);
    return valid.length > 0 ? valid.join(', ') : null;
  };

  /**
   * Creates a track out of product properties.
   *
   * @api private
   * @param {Track} track
   * @param {Object} properties
   * @return {Track}
   */

  function createProductTrack(track, properties) {
    var props = properties || {};
    props.currency = properties.currency || track.currency();
    return new Track({ properties: props });
  }

  },{"@ndhoule/defaults":8,"@segment/analytics.js-integration":412,"component-each":1112,"extend":1126,"global-queue":1127,"is":1131,"obj-case":1143,"object-component":1144,"reject":1150,"segmentio-facade":1158,"use-https":1180}],412:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":413,"./statics":414,"@ndhoule/defaults":8,"component-bind":1109,"debug":415,"dup":49,"extend":417,"slug-component":1165}],413:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],414:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":418,"dup":51}],415:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":416,"_process":1149,"dup":43}],416:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":419}],417:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],418:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],419:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],420:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('dataLayer', { wrap: false });

  /**
   * Expose `GTM`.
   */

  var GTM = (module.exports = integration('Google Tag Manager')
    .global('dataLayer')
    .global('google_tag_manager')
    .option('containerId', '')
    .option('environment', '')
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .tag(
      'no-env',
      '<script src="//www.googletagmanager.com/gtm.js?id={{ containerId }}&l=dataLayer">'
    )
    .tag(
      'with-env',
      '<script src="//www.googletagmanager.com/gtm.js?id={{ containerId }}&l=dataLayer&gtm_preview={{ environment }}">'
    ));

  /**
   * Initialize.
   *
   * https://developers.google.com/tag-manager
   *
   * @api public
   */

  GTM.prototype.initialize = function() {
    push({ 'gtm.start': Number(new Date()), event: 'gtm.js' });

    if (this.options.environment.length) {
      this.load('with-env', this.options, this.ready);
    } else {
      this.load('no-env', this.options, this.ready);
    }
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  GTM.prototype.loaded = function() {
    return !!(window.dataLayer && Array.prototype.push !== window.dataLayer.push);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  GTM.prototype.page = function(page) {
    var category = page.category();
    var name = page.fullName();
    var opts = this.options;

    // all
    if (opts.trackAllPages) {
      this.track(page.track());
    }

    // categorized
    if (category && opts.trackCategorizedPages) {
      this.track(page.track(category));
    }

    // named
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }
  };

  /**
   * Track.
   *
   * https://developers.google.com/tag-manager/devguide#events
   *
   * @api public
   * @param {Track} track
   */

  GTM.prototype.track = function(track) {
    var props = track.properties();
    var userId = this.analytics.user().id();
    var anonymousId = this.analytics.user().anonymousId();
    if (userId) props.userId = userId;
    if (anonymousId) props.segmentAnonymousId = anonymousId;
    props.event = track.event();

    push(props);
  };

  },{"@segment/analytics.js-integration":421,"global-queue":1127}],421:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":422,"./statics":423,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":425,"slug-component":1165}],422:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],423:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":424,"dup":51}],424:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],425:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],426:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var Track = require('segmentio-facade').Track;
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var omit = require('omit');
  var pick = require('pick');

  /**
   * Expose `GoSquared` integration.
   */

  var GoSquared = (module.exports = integration('GoSquared')
    .assumesPageview()
    .global('_gs')
    .option('anonymizeIP', false)
    .option('apiSecret', '')
    .option('cookieDomain', null)
    .option('trackHash', false)
    .option('trackLocal', false)
    .option('trackParams', true)
    .option('useCookies', true)
    .tag('<script src="//d1l6p2sc9645hc.cloudfront.net/tracker.js">'));

  /**
   * Initialize.
   *
   * https://www.gosquared.com/developer/tracker
   * Options: https://www.gosquared.com/developer/tracker/configuration
   *
   * @api public
   */

  GoSquared.prototype.initialize = function() {
    var self = this;
    var options = this.options;
    var user = this.analytics.user();
    push(options.apiSecret);

    each(options, function(name, value) {
      if (name === 'apiSecret') return;
      if (value == null) return;
      push('set', name, value);
    });

    self.identify(
      new Identify({
        traits: user.traits(),
        userId: user.id()
      })
    );

    self.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  GoSquared.prototype.loaded = function() {
    // If the tracker version is set, the library has loaded
    return !!(window._gs && window._gs.v);
  };

  /**
   * Page.
   *
   * https://www.gosquared.com/docs/tracking/api/#pageviews
   *
   * @param {Page} page
   */

  GoSquared.prototype.page = function(page) {
    var props = page.properties();
    var name = page.fullName();
    push('track', props.path, name || props.title);
  };

  /**
   * Identify.
   *
   * https://www.gosquared.com/docs/tracking/identify
   *
   * @param {Identify} identify
   */

  GoSquared.prototype.identify = function(identify) {
    var traits = identify.traits({
      createdAt: 'created_at',
      firstName: 'first_name',
      lastName: 'last_name',
      title: 'company_position',
      industry: 'company_industry'
    });

    // https://www.gosquared.com/docs/tracking/api/#properties
    var specialKeys = [
      'id',
      'email',
      'name',
      'first_name',
      'last_name',
      'username',
      'description',
      'avatar',
      'phone',
      'created_at',
      'company_name',
      'company_size',
      'company_position',
      'company_industry'
    ];

    // Segment allows traits to all be in a flat object
    // GoSquared requires all custom properties to be in a `custom` object,

    // select all special keys
    var props = pick.apply(null, [traits].concat(specialKeys));
    props.custom = omit(specialKeys, traits);

    var id = identify.userId();

    if (id) {
      push('identify', id, props);
    } else {
      push('properties', props);
    }
  };

  /**
   * Track.
   *
   * https://www.gosquared.com/docs/tracking/events
   *
   * @param {Track} track
   */

  GoSquared.prototype.track = function(track) {
    push('event', track.event(), track.properties());
  };

  /**
   * Checked out.
   *
   * https://www.gosquared.com/docs/tracking/ecommerce
   *
   * @api private
   * @param {Track} track
   */

  GoSquared.prototype.orderCompleted = function(track) {
    var products = track.products();
    var items = [];

    each(products, function(product) {
      var track = new Track({ properties: product });
      items.push({
        category: track.category(),
        quantity: track.quantity(),
        price: track.price(),
        name: track.name()
      });
    });

    push(
      'transaction',
      track.orderId(),
      {
        revenue: track.total(),
        track: true
      },
      items
    );
  };

  /**
   * Push to `_gs.q`.
   *
   * @api private
   * @param {...*} args
   */

  function push() {
    window._gs =
      window._gs ||
      function() {
        window._gs.q.push(arguments);
      };
    window._gs.q = window._gs.q || [];
    window._gs.apply(null, arguments);
  }

  },{"@segment/analytics.js-integration":427,"component-each":1112,"omit":1145,"pick":1148,"segmentio-facade":1158}],427:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":428,"./statics":429,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":431,"slug-component":1165}],428:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],429:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":430,"dup":51}],430:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],431:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],432:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var Track = require('segmentio-facade').Track;
  var reject = require('reject');
  var defaults = require('@ndhoule/defaults');
  var extend = require('extend');

  /**
   * Expose `GTAG`.
   *  Purposely using different data-layer name to avoid conflicts
   *  with any other tool.
   */

  var GTAG = (module.exports = integration('Gtag')
    .global('gtagDataLayer')
    .option('awConversionId', '')
    .option('dcFloodLightId', '')
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .option('includeQueryString', false)
    .option('gaWebMeasurementId', '')
    .option('gaWebAppMeasurementId', '')
    .option('gaCustomDimensions', {})
    .option('gaCustomMetrics', {})
    .option('gaContentGroupings', {})
    .option('gaEnhancedEcommerce', false)
    .option('gaAnonymizeIp', false)
    .option('gaCookieDomain', 'auto')
    .option('gaEnhancedLinkAttribution', false)
    .option('gaOptimizeContainerId', '')
    .option('gaSampleRate', 100)
    .option('gaSendUserId', false)
    .option('gaUseAmpClientId', false)
    .option('gaSiteSpeedSampleRate', 1)
    .option('gaSetAllMappedProps', false)
    .tag(
      '<script src="//www.googletagmanager.com/gtag/js?id={{ accountId }}&l=gtagDataLayer">'
    ));

  GTAG.on('construct', function(Integration) {
    /* eslint-disable */
    if (Integration.options.gaEnhancedEcommerce) {
        Integration.productListViewed = Integration.productListViewedEnhanced;
        Integration.productClicked = Integration.productClickedEnhanced;
        Integration.productViewed = Integration.productViewedEnhanced;
        Integration.productAdded = Integration.productAddedEnhanced;
        Integration.productRemoved = Integration.productRemovedEnhanced;
        Integration.promotionViewed = Integration.promotionViewedEnhanced;
        Integration.promotionClicked = Integration.promotionClickedEnhanced;
        Integration.checkoutStarted = Integration.checkoutStartedEnhanced;
        Integration.orderRefunded = Integration.orderRefundedEnhanced;
        Integration.orderCompleted = Integration.orderCompletedEnhanced;
        Integration.checkoutStepViewed = Integration.checkoutStepViewedEnhanced;
        Integration.checkoutStepCompleted =
          Integration.checkoutStepCompletedEnhanced;
        Integration.orderUpdated = Integration.orderUpdatedEnhanced;

        // Additional event on top og GA destination
        Integration.productAddedToWishlist = Integration.productAddedToWishlistEnhanced;
        Integration.productShared = Integration.productSharedEnhanced;
        Integration.productsSearched = Integration.productsSearchedEnhanced;

        // This mapping is for events which are not supported by segment and will
        // be tracked by track method.
        Integration.customEventsMapping = {
          login: Integration.loggedInEnhanced,
          sign_up: Integration.signedUpEnhanced,
          exception: Integration.exceptionOccuredEnhanced,
          timing_complete: Integration.timingCompletedEnhanced,
          generate_lead: Integration.leadGeneratedEnhanced,
          set_checkout_option: Integration.setCheckoutOptionEnhanced
        };
      }
      /* eslint-enable */
  });

  /**
   * Initialize.
   *
   * https://developers.google.com/gtagjs
   *
   * @api public
   */

  GTAG.prototype.initialize = function() {
    window.gtagDataLayer = window.gtagDataLayer || [];
    window.gtag = function() {
      window.gtagDataLayer.push(arguments);
    };
    // This line is in all of the gtag examples but not well documented. Seems like a requirement when loading the tag.
    // Best I could find:
    // https://stackoverflow.com/questions/59256532/what-is-the-js-gtags-js-command
    window.gtag('js', new Date());

    var config = [];
    var that = this;
    var gaWebMeasurementId = this.options.gaWebMeasurementId;
    var gaWebAppMeasurementId = this.options.gaWebAppMeasurementId;
    var awConversionId = this.options.awConversionId;
    var dcFloodLightId = this.options.dcFloodLightId;
    var accountId =
      gaWebMeasurementId ||
      gaWebAppMeasurementId ||
      awConversionId ||
      dcFloodLightId;
    if (gaWebMeasurementId || gaWebAppMeasurementId) {
      var gaSetting = {};

      // set custom dimension and metrics if present
      // To Set persistent values we need to use set instead of config
      // https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values
      var customMap = merge(
        this.options.gaCustomDimensions || {},
        this.options.gaCustomMetrics || {}
      );

      // The dimension and metric mappings are stored as objects where the key is the
      // event field and the value is the dimension or metric so we swap them!
      // e.g.; { 'properties.age': 'dimension1' }
      //
      var customMapSwap = {};
      for (var field in customMap) {
        if (customMap.hasOwnProperty(field)) {
          customMapSwap[customMap[field]] = field;
        }
      }

      gaSetting.custom_map = customMapSwap;

      // https://developers.google.com/analytics/devguides/collection/gtagjs/ip-anonymization
      if (this.options.gaAnonymizeIp) {
        gaSetting.anonymize_ip = true;
      }

      // https://developers.google.com/analytics/devguides/collection/gtagjs/cookies-user-id
      if (this.options.gaCookieDomain) {
        gaSetting.cookie_domain = this.options.gaCookieDomain;
      }

      // https://developers.google.com/analytics/devguides/collection/gtagjs/enhanced-link-attribution
      if (this.options.gaEnhancedLinkAttribution) {
        gaSetting.link_attribution = true;
      }

      // https://support.google.com/optimize/answer/9183119?hl=en
      if (this.options.gaOptimizeContainerId) {
        gaSetting.optimize_id = this.options.gaOptimizeContainerId;
      }

      // https://support.google.com/analytics/thread/7741119?hl=en
      if (this.options.gaSampleRate) {
        gaSetting.sample_rate = this.options.gaSampleRate;
      }

      if (this.options.gaSiteSpeedSampleRate) {
        gaSetting.site_speed_sample_rate = this.options.gaSiteSpeedSampleRate;
      }

      if (this.options.gaUseAmpClientId) {
        gaSetting.use_amp_client_id = true;
      }

      var userId = this.analytics.user().id();

      // https://support.google.com/analytics/thread/7741119?hl=en
      if (this.options.gaSendUserId && userId) {
        gaSetting.user_id = userId;
      }

      if (gaWebMeasurementId) {
        config.push(['config', gaWebMeasurementId, gaSetting]);
      }

      if (gaWebAppMeasurementId) {
        config.push(['config', gaWebAppMeasurementId, gaSetting]);
      }
    }

    if (awConversionId) {
      config.push(['config', awConversionId, {}]);
    }

    if (dcFloodLightId) {
      config.push(['config', dcFloodLightId, {}]);
    }

    if (!accountId) {
      return;
    }

    this.load({ accountId: accountId }, function() {
      // Default routing.
      for (var i = 0; i < config.length; i++) {
        window.gtag(config[i][0], config[i][1], config[i][2]);
      }
      that.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  GTAG.prototype.loaded = function() {
    return !!(
      window.gtagDataLayer && Array.prototype.push !== window.gtagDataLayer.push
    );
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} event
   */

  GTAG.prototype.identify = function(identify) {
    var userId = identify.userId();
    var opts = this.options;
    if (!userId || !opts.gaSendUserId) {
      return;
    }
    if (opts.gaWebMeasurementId) {
      window.gtag('config', opts.gaWebMeasurementId, {
        user_id: userId
      });
    }
    if (opts.gaWebAppMeasurementId) {
      window.gtag('config', opts.gaWebAppMeasurementId, {
        user_id: userId
      });
    }

    setContentGroups(identify.traits(), opts);
    setCustomDimensionsAndMetrics(identify.traits(), opts);
  };

  /**
   * Track
   *
   * @api public
   * @param {Track} track
   */

  GTAG.prototype.track = function(track, params) {
    var event = track.event() || '';
    if (
      this.customEventsMapping &&
      typeof this.customEventsMapping[event] === 'function'
    ) {
      this.customEventsMapping[event](track);
      return;
    }
    var contextOpts = track.options(this.name);
    var opts = defaults(params || {}, contextOpts);
    var props = track.properties();
    props.event = event;

    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    props.non_interaction =
      props.nonInteraction !== undefined
        ? !!props.nonInteraction
        : !!opts.nonInteraction;

    delete props.nonInteraction;

    window.gtag('event', props.event, props);
  };

  /**
   * Page
   *
   * @api public
   * @param {Page} page
   */

  GTAG.prototype.page = function(page) {
    setContentGroups(page.properties(), this.options);
    setCustomDimensionsAndMetrics(page.properties(), this.options);
    this.trackPageViewEvent(page, this.options);
  };

  /**
   * Product List Viewed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productListViewedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('view_item_list', {
      items: getFormattedProductList(track)
    });
  };

  /**
   * Product Clicked - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productClickedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('select_content', {
      content_type: 'product',
      items: [getFormattedProduct(track)]
    });
  };

  /**
   * Product Viewed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productViewedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('view_item', {
      items: [getFormattedProduct(track)]
    });
  };

  /**
   * Product Added - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productAddedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('add_to_cart', {
      items: [getFormattedProduct(track)]
    });
  };

  /**
   * Product Removed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productRemovedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('remove_from_cart', {
      items: [getFormattedProduct(track)]
    });
  };

  /**
   * Promotion Viewed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.promotionViewedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('view_promotion', {
      promotions: [getFormattedPromotion(track)]
    });
  };

  /**
   * Promotion Clicked - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.promotionClickedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('select_content', {
      promotions: [getFormattedPromotion(track)]
    });
  };

  /**
   * Checkout Started - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.checkoutStartedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    var coupon = track.coupon();

    trackEnhancedEvent('begin_checkout', {
      value: track.total() || track.revenue() || 0,
      currency: track.currency(),
      items: getFormattedProductList(track),
      coupon: coupon
    });
  };

  /**
   * Order Updated - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.orderUpdatedEnhanced = function(track) {
    // Same event as started order - will override
    this.checkoutStartedEnhanced(track);
  };

  /**
   * Checkout Step Viewed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.checkoutStepViewedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('checkout_progress', extractCheckoutOptions(track));
  };

  /**
   * Checkout Step Completed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.checkoutStepCompletedEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('checkout_progress', extractCheckoutOptions(track));
  };

  /**
   * Set Checkout Options - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.setCheckoutOptionEnhanced = function(track) {
    var props = track.properties();
    var options = reject([track.paymentMethod(), track.shippingMethod()]);

    trackEnhancedEvent('set_checkout_option', {
      value: track.value() || 0,
      checkout_step: props.step || 1,
      checkout_option: options.length ? options.join(', ') : null
    });
  };

  /**
   * Order Refunded - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.orderRefundedEnhanced = function(track) {
    var products = track.products();

    var eventData = {
      transaction_id: track.orderId()
    };
    if (products.length) {
      eventData.value = track.total() || track.revenue() || 0;
      eventData.currency = track.currency();
      eventData.tax = track.tax();
      eventData.shipping = track.shipping();
      eventData.affiliation = track.properties().affiliation;
      eventData.items = getFormattedProductList(track);
    }

    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('refund', eventData);
  };

  /**
   * Order Completed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.orderCompletedEnhanced = function(track) {
    var total = track.total() || track.revenue() || 0;
    var orderId = track.orderId();
    var props = track.properties();

    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('purchase', {
      transaction_id: orderId,
      affiliation: props.affiliation,
      value: total,
      currency: track.currency(),
      tax: track.tax(),
      shipping: track.shipping(),
      items: getFormattedProductList(track)
    });
  };

  /**
   * Product Added to Wishlist - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productAddedToWishlistEnhanced = function(track) {
    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('add_to_wishlist', {
      value: track.price(),
      currency: track.currency(),
      items: [getFormattedProduct(track)]
    });
  };

  /**
   * Product Shared - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productSharedEnhanced = function(track) {
    var id = track.productId() || track.id() || track.sku();
    var props = track.properties();
    if (!id) {
      return;
    }

    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('share', {
      method: props.share_via,
      content_type: track.category(),
      content_id: id
    });
  };

  /**
   * Product Searched - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.productsSearchedEnhanced = function(track) {
    var searchQuery = track.proxy('properties.query');

    if (!searchQuery) {
      return;
    }

    setContentGroups(track.properties(), this.options);
    setCustomDimensionsAndMetrics(track.properties(), this.options);

    trackEnhancedEvent('search', {
      search_term: searchQuery
    });
  };

  /**
   * User Logged In - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.loggedInEnhanced = function(track) {
    var props = track.properties();
    trackEnhancedEvent('login', { method: props.method });
  };

  /**
   * User signed Up - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.signedUpEnhanced = function(track) {
    var props = track.properties();
    trackEnhancedEvent('sign_up', { method: props.method });
  };

  /**
   * Lead Generated - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.leadGeneratedEnhanced = function(track) {
    trackEnhancedEvent('generate_lead', {
      transaction_id: track.id(),
      value: track.price(),
      currency: track.currency()
    });
  };

  /**
   * Exception - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.exceptionOccuredEnhanced = function(track) {
    var props = track.properties();
    trackEnhancedEvent('exception', {
      description: props.description,
      fatal: props.fatal
    });
  };

  /**
   * Timing Completed - Enhanced Ecommerce
   *
   * @param {Track} track
   */

  GTAG.prototype.timingCompletedEnhanced = function(track) {
    trackEnhancedEvent('timing_complete', {
      name: track.name(),
      value: track.value()
    });
  };

  /**
   * Track page view event.
   *
   * @api private
   * @param { Page } page
   * @param  opt
   */

  GTAG.prototype.trackPageViewEvent = function(page, options) {
    var name = page.fullName();
    var category = page.category();
    var props = page.properties();
    var campaign = page.proxy('context.campaign');
    var track;

    if (campaign && options.gaWebMeasurementId) {
      window.gtag('config', options.gaWebMeasurementId, {
        campaign: reject({
          name: campaign.name,
          source: campaign.source,
          medium: campaign.medium,
          content: campaign.content,
          keyword: campaign.term
        })
      });
    }

    if (campaign && options.gaWebAppMeasurementId) {
      window.gtag('config', options.gaWebAppMeasurementId, {
        campaign: reject({
          name: campaign.name,
          source: campaign.source,
          medium: campaign.medium,
          content: campaign.content,
          keyword: campaign.term
        })
      });
    }

    var nonInteraction = !!(options && options.nonInteraction);
    var str = props.path;
    if (options.includeQueryString && props.search) {
      str += props.search;
    }

    window.gtag('event', 'page_view', {
      page_title: name || props.title,
      page_location: props.url,
      page_path: str,
      non_interaction: nonInteraction
    });

    if (name && options.trackNamedPages) {
      track = page.track(name);
      this.track(track, { nonInteraction: 1 });
    }
    if (category && options.trackCategorizedPages) {
      track = page.track(category);
      this.track(track, { nonInteraction: 1 });
    }
  };

  /**
   * Track enhanced events.
   *
   * @api private
   * @param eventName
   * @param payload
   */
  function trackEnhancedEvent(eventName, payload) {
    window.gtag(
      'event',
      eventName,
      extend(payload, {
        non_interaction: true
      })
    );
  }

  /**
   * Set custom dimensions and metrics.
   *
   * @api private
   * @param {Object} props
   * @param {Object} options
   */

  function setCustomDimensionsAndMetrics(props, options) {
    if (options.gaSetAllMappedProps) {
      // Set custom dimension and metrics if present
      // https://developers.google.com/analytics/devguides/collection/gtagjs/custom-dims-mets
      var customMap = merge(
        options.gaCustomDimensions || {},
        options.gaCustomMetrics || {}
      );
      var customMapValues = {};
      for (var field in customMap) {
        if (customMap.hasOwnProperty(field)) {
          customMapValues[customMap[field]] = props[field];
        }
      }
      if (options.gaWebMeasurementId) {
        window.gtag('config', options.gaWebMeasurementId, {
          custom_map: reject(customMapValues)
        });
      }
      if (options.gaWebAppMeasurementId) {
        window.gtag('config', options.gaWebAppMeasurementId, {
          custom_map: reject(customMapValues)
        });
      }
    }
  }

  /**
   * Set the content groups for an event.
   * https://support.google.com/analytics/answer/7475939?hl=en#code
   *
   * @api private
   * @param {Object} props
   * @param {Object} opts
   */
  function setContentGroups(props, opts) {
    if (opts.gaContentGroupings && Object.keys(opts.gaContentGroupings).length) {
      var contentGroupValues = {};
      for (var field in opts.gaContentGroupings) {
        if (opts.gaContentGroupings.hasOwnProperty(field)) {
          contentGroupValues[opts.gaContentGroupings[field]] = props[field];
        }
      }

      if (opts.gaWebMeasurementId) {
        window.gtag(
          'config',
          opts.gaWebMeasurementId,
          reject(contentGroupValues)
        );
      }
      if (opts.gaWebAppMeasurementId) {
        window.gtag(
          'config',
          opts.gaWebAppMeasurementId,
          reject(contentGroupValues)
        );
      }
    }
  }

  /**
   * Enhanced ecommerce format data for checkout.
   *
   * @api private
   * @param {Track} track
   */
  function extractCheckoutOptions(track) {
    var props = track.properties();
    var total = track.total() || track.revenue() || 0;
    var coupon = track.coupon();
    var options = reject([track.paymentMethod(), track.shippingMethod()]);

    return {
      currency: track.currency(),
      value: total,
      items: getFormattedProductList(track),
      coupon: coupon,
      checkout_step: props.step || 1,
      checkout_option: options.length ? options.join(', ') : null
    };
  }

  /**
   * Enhanced ecommerce format data for promotion.
   *
   *
   * @api private
   * @param {Track} track
   */

  function getFormattedPromotion(track) {
    var props = track.properties();
    return {
      id: track.promotionId() || track.id(),
      name: track.name(),
      creative: props.creative,
      position: props.position
    };
  }

  /**
   * Enhanced ecommerce format data for product.
   *
   *
   * @api private
   * @param {Track} track
   */

  function getFormattedProduct(track) {
    var props = track.properties();
    var product = {
      id: track.productId() || track.id() || track.sku(),
      name: track.name(),
      category: track.category(),
      quantity: track.quantity(),
      price: track.price(),
      brand: props.brand,
      variant: props.variant,
      currency: track.currency()
    };

    // https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-data
    // GA requires an integer but our specs says "Number", so it could be a float.
    if (props.position != null) {
      product.position = Math.round(props.position);
    }

    // append coupon if it set
    // https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-transactions
    var coupon = track.coupon();
    if (coupon) product.coupon = coupon;

    return product;
  }

  function getFormattedProductList(track) {
    var productList = [];
    var products = track.products();
    var props = track.properties();

    for (var i = 0; i < products.length; i++) {
      var product = new Track({ properties: products[i] });
      var productId = product.id() || product.productId() || product.sku();
      if (productId) {
        productList.push({
          id: productId,
          name: product.name(),
          category: product.category() || track.category(),
          list_name: props.list_id || track.category() || 'products',
          brand: product.properties().brand,
          variant: product.properties().variant,
          quantity: product.quantity(),
          price: product.price(),
          list_position: getProductPosition(product, products)
        });
      }
    }
    return productList;
  }

  function getProductPosition(item, products) {
    var position = item.properties().position;
    if (
      typeof position !== 'undefined' &&
      !Number.isNaN(Number(position)) &&
      Number(position) > -1
    ) {
      // If position passed and is valid positive number.
      return Number(position);
    }
    var productIds = products
      .map(function(x) {
        return x.product_id;
      })
      .filter(Boolean);
    if (productIds.length === 0) {
      productIds = products.map(function(x) {
        return x.sku;
      });
      return productIds.indexOf(item.sku()) + 1;
    }
    return productIds.indexOf(item.productId()) + 1;
  }

  /**
   * Merge two javascript objects. This works similarly to `Object.assign({}, obj1, obj2)`
   * but it's compatible with old browsers. The properties of the first argument takes preference
   * over the other.
   *
   * It does not do fancy stuff, just use it with top level properties.
   *
   * @param {Object} obj1 Object 1
   * @param {Object} obj2 Object 2
   *
   * @return {Object} a new object with all the properties of obj1 and the remainder of obj2.
   */
  function merge(obj1, obj2) {
    var res = {};

    // All properties of obj1
    for (var propObj1 in obj1) {
      if (obj1.hasOwnProperty(propObj1)) {
        res[propObj1] = obj1[propObj1];
      }
    }

    // Extra properties of obj2
    for (var propObj2 in obj2) {
      if (obj2.hasOwnProperty(propObj2) && !res.hasOwnProperty(propObj2)) {
        res[propObj2] = obj2[propObj2];
      }
    }

    return res;
  }

  // Exposed only for testing
  GTAG.merge = merge;

  },{"@ndhoule/defaults":8,"@segment/analytics.js-integration":433,"extend":1126,"reject":1150,"segmentio-facade":1158}],433:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":434,"./statics":435,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":436,"slug-component":1165}],434:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],435:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":437,"dup":51}],436:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],437:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],438:[function(require,module,exports){
  'use strict';

  /* global JSON */
  /* eslint no-restricted-globals: [0] */

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var each = require('component-each');
  var is = require('is');
  var extend = require('@ndhoule/extend');
  var toISOString = require('@segment/to-iso-string');
  var toString = Object.prototype.toString; // in case this method has been overridden by the user

  /**
   * Expose `Heap` integration.
   */

  var Heap = (module.exports = integration('Heap')
    .global('heap')
    .option('appId', '')
    .tag('<script src="//cdn.heapanalytics.com/js/heap-{{ appId }}.js">'));

  /**
   * Initialize.
   *
   * https://heapanalytics.com/docs/installation#web
   *
   * @api public
   */

  Heap.prototype.initialize = function() {
    window.heap = window.heap || [];
    window.heap.load = function(appid, config) {
      window.heap.appid = appid;
      window.heap.config = config;

      var methodFactory = function(type) {
        return function() {
          window.heap.push(
            [type].concat(Array.prototype.slice.call(arguments, 0))
          );
        };
      };

      var heapMethods = [
        'addEventProperties',
        'addUserProperties',
        'clearEventProperties',
        'identify',
        'removeEventProperty',
        'setEventProperties',
        'track',
        'unsetEventProperty',
        'resetIdentity'
      ];
      each(heapMethods, function(method) {
        window.heap[method] = methodFactory(method);
      });
    };

    window.heap.load(this.options.appId);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Heap.prototype.loaded = function() {
    return !!(window.heap && window.heap.appid);
  };

  /**
   * Identify.
   *
   * https://heapanalytics.com/docs#identify
   *
   * @api public
   * @param {Identify} identify
   */

  Heap.prototype.identify = function(identify) {
    var traits = identify.traits({ email: '_email' });
    var id = identify.userId();
    if (id) window.heap.identify(id);
    window.heap.addUserProperties(clean(traits));
  };

  /**
   * Track.
   *
   * https://heapanalytics.com/docs#track
   *
   * @api public
   * @param {Track} track
   */

  Heap.prototype.track = function(track) {
    window.heap.track(track.event(), clean(track.properties()));
  };

  /**
   * Clean all nested objects and arrays.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function clean(obj) {
    var ret = {};

    for (var k in obj) {
      if (obj.hasOwnProperty(k)) {
        var value = obj[k];
        // Heap's natively library will drop null and undefined properties anyway
        // so no need to send these
        // also prevents uncaught errors since we call .toString() on non objects
        if (value === null || value === undefined) continue;

        // date
        if (is.date(value)) {
          ret[k] = toISOString(value);
          continue;
        }

        // leave boolean as is
        if (is.bool(value)) {
          ret[k] = value;
          continue;
        }

        // leave  numbers as is
        if (is.number(value)) {
          ret[k] = value;
          continue;
        }

        // arrays of objects (eg. `products` array)
        if (toString.call(value) === '[object Array]') {
          ret = extend(ret, trample(k, value));
          continue;
        }

        // non objects
        if (toString.call(value) !== '[object Object]') {
          ret[k] = value.toString();
          continue;
        }

        ret = extend(ret, trample(k, value));
      }
    }
    // json
    // must flatten including the name of the original trait/property
    function trample(key, value) {
      var nestedObj = {};
      nestedObj[key] = value;
      var flattenedObj = flatten(nestedObj, { safe: true });

      // stringify arrays inside nested object to be consistent with top level behavior of arrays
      for (var k in flattenedObj) {
        if (is.array(flattenedObj[k]))
          flattenedObj[k] = JSON.stringify(flattenedObj[k]);
      }

      return flattenedObj;
    }

    return ret;
  }

  /**
   * Flatten nested objects
   * taken from https://www.npmjs.com/package/flat
   * @param {Object} obj
   * @return {Object} obj
   * @api public
   */

  function flatten(target, opts) {
    var options = opts || {};

    var delimiter = options.delimiter || '.';
    var maxDepth = options.maxDepth;
    var currentDepth = 1;
    var output = {};

    function step(object, prev) {
      Object.keys(object).forEach(function(key) {
        var value = object[key];
        var isarray = options.safe && Array.isArray(value);
        var type = Object.prototype.toString.call(value);
        var isobject = type === '[object Object]' || type === '[object Array]';

        var newKey = prev ? prev + delimiter + key : key;

        if (!options.maxDepth) {
          maxDepth = currentDepth + 1;
        }

        if (
          !isarray &&
          isobject &&
          Object.keys(value).length &&
          currentDepth < maxDepth
        ) {
          ++currentDepth;
          return step(value, newKey);
        }

        output[newKey] = value;
      });
    }

    step(target);

    return output;
  }

  /**
   * Polyfill Object.keys
   * // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
   * Note: Had to do this because for some reason, the above will not work properly without using Object.keys
   */

  if (!Object.keys) {
    Object.keys = function(o) {
      if (o !== Object(o)) {
        throw new TypeError('Object.keys called on a non-object');
      }
      var k = [];
      var p;
      for (p in o) if (Object.prototype.hasOwnProperty.call(o, p)) k.push(p);
      return k;
    };
  }

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":439,"@segment/to-iso-string":1103,"component-each":1112,"is":1131}],439:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":440,"./statics":441,"@ndhoule/defaults":8,"component-bind":1109,"debug":442,"dup":49,"extend":444,"slug-component":1165}],440:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],441:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":445,"dup":51}],442:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":443,"_process":1149,"dup":43}],443:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":446}],444:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],445:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],446:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],447:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var each = require('@ndhoule/each');

  /**
   * Expose `Hindsight`
   *
   */

  var Hindsight = (module.exports = integration('Hindsight')
    .global('RB')
    .option('pixel_code', '')
    .option('customTrackingDomain', '')
    .option('enableCookieSync', true)
    .tag('<script src="https://{{ host }}/assets/{{ lib }}.js">'));

  /**
   * Initialize
   */

  Hindsight.prototype.initialize = function() {
    window.RB = {};
    window.RB.disablePushState = true;
    window.RB.queue = [];
    window.RB.track =
      window.RB.track ||
      function() {
        window.RB.queue.push(Array.prototype.slice.call(arguments));
      };
    window.RB.source = this.options.pixel_code;

    var hasCustomDomain = !!this.options.customTrackingDomain;
    var enableCookieSync = this.options.enableCookieSync;
    var scriptHost = hasCustomDomain
      ? this.options.customTrackingDomain
      : 'getrockerbox.com';
    var scriptLib = hasCustomDomain && enableCookieSync ? 'wxyz.rb' : 'wxyz.v2';
    var tagParams = {
      host: scriptHost,
      lib: scriptLib
    };

    this.load(tagParams, this.ready);
  };

  /**
   * Loaded
   */

  Hindsight.prototype.loaded = function() {
    return !!window.RB && !!window.RB.loaded;
  };

  /**
   * Page
   */

  Hindsight.prototype.page = function(page) {
    window.RB.track('view', format(page.properties()));
  };

  /**
   * Track
   */

  Hindsight.prototype.track = function(track) {
    window.RB.track(track.event(), format(track.properties()));
  };

  /**
   * Identify
   */

  Hindsight.prototype.identify = function(identify) {
    window.RB.track('identify', identify.traits());
  };

  /**
   * Stringify all object values
   * @param {Object} props
   * @return {Object} ret
   */

  function format(props) {
    var ret = {};
    each(function(value, key) {
      ret[key] = is.object(value) ? window.JSON.stringify(value) : value;
      return ret[key];
    }, props);

    return ret;
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":448,"is":1131}],448:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":449,"./statics":450,"@ndhoule/defaults":8,"component-bind":1109,"debug":451,"dup":49,"extend":454,"slug-component":1165}],449:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],450:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":453,"dup":51}],451:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":452,"_process":1149,"dup":43}],452:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":455}],453:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],454:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],455:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],456:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `HitTail` integration.
   */

  var HitTail = (module.exports = integration('HitTail')
    .assumesPageview()
    .global('htk')
    .option('siteId', '')
    .tag('<script src="//{{ siteId }}.hittail.com/mlt.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  HitTail.prototype.initialize = function() {
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  HitTail.prototype.loaded = function() {
    return isFunction(window.htk);
  };

  /**
   * Check if it is a function
   */

  function isFunction(functionToCheck) {
    var getType = {};
    return (
      functionToCheck &&
      getType.toString.call(functionToCheck) === '[object Function]'
    );
  }

  },{"@segment/analytics.js-integration":457}],457:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":458,"./statics":459,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],458:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":460,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],459:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":461,"dup":42}],460:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],461:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],462:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');

  /**
   * Expose `HotJar` integration
   */

  var Hotjar = (module.exports = integration('Hotjar')
    .option('hjid', null)
    .option('hjPlaceholderPolyfill', true));

  /**
   * Initialize HotJar
   */

  Hotjar.prototype.initialize = function() {
    // Make sure our metadata inputs are valid, putting out a console error and aborting if not.
    function areOptionsValid(options) {
      var validators = {
        isHjidValid:
          is.number(options.hjid) && !is.nan(options.hjid) && options.hjid !== 0, // Make sure that HJID is a number (and isn't NaN)
        isPlaceholderPolyfillValid: is.bool(options.hjPlaceholderPolyfill) // Make sure we received a boolean.
      };

      for (var validator in validators) {
        if (!validators[validator]) {
          console.warn(
            'Hotjar Integration - ' + validator + ' returned false, not loading.'
          );
          return false;
        }
      }

      return true;
    }

    // Convert from string to number.
    this.options.hjid = Number(this.options.hjid);
    if (!areOptionsValid(this.options)) return;

    window._hjSelf = this;

    // Load HotJar snippet - for some reason, trying to load in .tag() was unsuccessful - directly loading script here.

    /* eslint-disable no-param-reassign */
    (function(h, o, t, j, a, r) {
      h.hj =
        h.hj ||
        function() {
          (h.hj.q = h.hj.q || []).push(arguments);
        };
      h._hjSettings = {
        hjid: h._hjSelf.options.hjid,
        hjsv: 6,
        hjPlaceholderPolyfill: h._hjSelf.options.hjPlaceholderPolyfill
      };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script');
      r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r);
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
    /* eslint-enable no-param-reassign */

    this.ready();
  };

  Hotjar.prototype.identify = function(identify) {
    if (!identify.userId()) {
      return this.debug('user id is required');
    }

    var traits = identify.traits();
    delete traits.id;

    window.hj('identify', identify.userId(), traits);
  };

  },{"@segment/analytics.js-integration":463,"is":1131}],463:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":464,"./statics":465,"@ndhoule/defaults":8,"component-bind":1109,"debug":466,"dup":49,"extend":469,"slug-component":1165}],464:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],465:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":468,"dup":51}],466:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":467,"_process":1149,"dup":43}],467:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":470}],468:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],469:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],470:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],471:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var convert = require('@segment/convert-dates');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_hsq');
  var each = require('@ndhoule/each');

  /**
   * Expose `HubSpot` integration.
   */

  var HubSpot = (module.exports = integration('HubSpot')
    .assumesPageview()
    .global('_hsq')
    .global('hbspt')
    .option('portalId', null)
    .option('loadFormsSdk', false)
    .option('enableEuropeanDataCenter', false)
    .tag(
      'global-tag',
      '<script id="hs-analytics" src="https://js.hs-analytics.net/analytics/{{ cacheBuster }}/{{ portalId }}.js">'
    )
    .tag(
      'eu-tag',
      '<script id="hs-analytics" src="https://js-eu1.hs-analytics.net/analytics/{{ cacheBuster }}/{{ portalId }}.js">'
    )
    .tag('forms', '<script src="//js.hsforms.net/forms/shell.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  HubSpot.prototype.initialize = function() {
    window._hsq = window._hsq || [];
    var cacheBuster = Math.ceil(new Date() / 300000) * 300000;
    var shouldLoadLeadForms = this.options.loadFormsSdk;
    var self = this;
    var tagName = this.options.enableEuropeanDataCenter ? 'eu-tag' : 'global-tag';
    if (shouldLoadLeadForms) {
      this.load('forms', function() {
        self.load(tagName, { cacheBuster: cacheBuster }, self.ready);
      });
    } else {
      this.load(tagName, { cacheBuster: cacheBuster }, this.ready);
    }
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  HubSpot.prototype.loaded = function() {
    var libLoaded = !!(window._hsq && window._hsq.push !== Array.prototype.push);
    // Due to limitations with our testing framework, we cannot test more than a single script loading configuration.
    // Therefore, we are ignoring this conditional in code coverage.
    /* istanbul ignore if */
    if (!this.options.loadFormsSdk) {
      return libLoaded;
    }
    return libLoaded && !!(window.hbspt && window.hbspt.forms);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  HubSpot.prototype.page = function() {
    push('trackPageView');
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  HubSpot.prototype.identify = function(identify) {
    // use newer version of Identify to have access to `companyName`
    var newIdentify = new Identify({
      traits: identify.traits(),
      userId: identify.userId()
    });

    if (!newIdentify.email()) {
      return;
    }

    var traits = newIdentify.traits({
      firstName: 'firstname',
      lastName: 'lastname'
    });
    traits = convertDates(traits);
    traits = formatTraits(traits);

    if (newIdentify.companyName() !== undefined) {
      traits.company = newIdentify.companyName();
    }

    push('identify', traits);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  HubSpot.prototype.track = function(track) {
    // Hubspot expects properties.id to be the name of the .track() event
    // Ref: http://developers.hubspot.com/docs/methods/enterprise_events/javascript_api
    var props = convertDates(track.properties({ id: '_id', revenue: 'value' }));
    props.id = track.event();

    push('trackEvent', track.event(), props);
  };

  /**
   * Convert all the dates in the HubSpot properties to millisecond times
   *
   * @api private
   * @param {Object} properties
   */

  function convertDates(properties) {
    return convert(properties, function(date) {
      return date.getTime();
    });
  }

  /**
   * lowercase & snakecase any trait with uppercase letters or spaces
   * Hubspot cannot accept uppercases or spaces
   *
   * @api private
   * @param {Object} traits
   * @return {Object} ret
   */

  function formatTraits(traits) {
    var ret = {};
    each(function(value, key) {
      // Using split/join due to IE 11 failing to properly support regex in str.replace()
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace
      var k = key
        .toLowerCase()
        .split(' ')
        .join('_') // spaces
        .split('.')
        .join('_') // Periods
        .split('\n')
        .join('_') // new lines
        .split('\v')
        .join('_') // Vertical tabs
        .split('\t')
        .join('_') // Regular tabs
        .split('\f')
        .join('_') // form feeds
        .split('\r')
        .join('_'); // Carriage returns
      ret[k] = value;
    }, traits);

    return ret;
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":472,"@segment/convert-dates":1087,"global-queue":1127,"segmentio-facade":1158}],472:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":473,"./statics":474,"@ndhoule/defaults":8,"component-bind":1109,"debug":475,"dup":49,"extend":477,"slug-component":1165}],473:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],474:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":478,"dup":51}],475:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":476,"_process":1149,"dup":43}],476:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":479}],477:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],478:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],479:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],480:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Improvely` integration.
   */

  var Improvely = (module.exports = integration('Improvely')
    .assumesPageview()
    .global('_improvely')
    .global('improvely')
    .option('domain', '')
    .option('projectId', null)
    .tag('<script src="//{{ domain }}.iljmp.com/improvely.js">'));

  /**
   * Initialize.
   *
   * http://www.improvely.com/docs/landing-page-code
   *
   * @api public
   */

  Improvely.prototype.initialize = function() {
    // Shim out the Improvely library/globals.
    window._improvely = [];
    /* eslint-disable */
    window.improvely = { init: function(e, t){ window._improvely.push(["init", e, t]); }, goal: function(e){ window._improvely.push(["goal", e]); }, label: function(e){ window._improvely.push(["label", e]); }};
    /* eslint-enable */

    var domain = this.options.domain;
    var id = this.options.projectId;
    window.improvely.init(domain, id);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Improvely.prototype.loaded = function() {
    return !!(window.improvely && window.improvely.identify);
  };

  /**
   * Identify.
   *
   * http://www.improvely.com/docs/labeling-visitors
   *
   * @api public
   * @param {Identify} identify
   */

  Improvely.prototype.identify = function(identify) {
    var id = identify.userId();
    if (id) window.improvely.label(id);
  };

  /**
   * Track.
   *
   * http://www.improvely.com/docs/conversion-code
   *
   * @api public
   * @param {Track} track
   */

  Improvely.prototype.track = function(track) {
    var props = track.properties({ revenue: 'amount' });
    props.type = track.event();
    window.improvely.goal(props);
  };

  },{"@segment/analytics.js-integration":481}],481:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":482,"./statics":483,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],482:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":484,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],483:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":485,"dup":42}],484:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],485:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],486:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('__insp');

  /**
   * Expose `Inspectlet` integration.
   */

  var Inspectlet = (module.exports = integration('Inspectlet')
    .assumesPageview()
    .global('__insp')
    .global('__insp_')
    .option('wid', '')
    .tag('<script src="//cdn.inspectlet.com/inspectlet.js">'));

  /**
   * Initialize.
   *
   * https://www.inspectlet.com/dashboard/embedcode/1492461759/initial
   *
   * @api public
   */

  Inspectlet.prototype.initialize = function() {
    push('wid', this.options.wid);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Inspectlet.prototype.loaded = function() {
    return !!(window.__insp_ && window.__insp);
  };

  /**
   * Identify.
   *
   * http://www.inspectlet.com/docs#tagging
   *
   * @api public
   * @param {Identify} identify
   */

  Inspectlet.prototype.identify = function(identify) {
    var traits = identify.traits({ id: 'userid' });
    var email = identify.email();
    if (email) push('identify', email);
    push('tagSession', traits);
  };

  /**
   * Track.
   *
   * http://www.inspectlet.com/docs/tags
   *
   * @api public
   * @param {Track} track
   */

  Inspectlet.prototype.track = function(track) {
    push('tagSession', track.event(), track.properties());
  };

  /**
   * Page.
   *
   * http://www.inspectlet.com/docs/tags
   *
   * @api public
   * @param {Track} track
   */

  Inspectlet.prototype.page = function() {
    push('virtualPage');
  };

  },{"@segment/analytics.js-integration":487,"global-queue":1127}],487:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":488,"./statics":489,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],488:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":490,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],489:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":491,"dup":42}],490:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],491:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],492:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var convertDates = require('@segment/convert-dates');
  var defaults = require('@ndhoule/defaults');
  var del = require('obj-case').del;
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var extend = require('@ndhoule/extend');
  var clone = require('@ndhoule/clone');
  var each = require('@ndhoule/each');
  var pick = require('@ndhoule/pick');

  /**
   * Expose `Intercom` integration.
   */

  var Intercom = (module.exports = integration('Intercom')
    .global('Intercom')
    .option('activator', '#IntercomDefaultWidget')
    .option('appId', '')
    .option('richLinkProperties', [])
    .tag('<script src="https://widget.intercom.io/widget/{{ appId }}">'));

  /**
   * Initialize.
   *
   * http://docs.intercom.io/
   * http://docs.intercom.io/#IntercomJS
   *
   * @api public
   */

  Intercom.prototype.initialize = function() {
    // Shim out the Intercom library.
    window.Intercom = function() {
      window.Intercom.q.push(arguments);
    };
    window.Intercom.q = [];

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Intercom.prototype.loaded = function() {
    return typeof window.Intercom === 'function';
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Intercom.prototype.page = function(page) {
    var integrationSettings = page.options(this.name);
    this.bootOrUpdate({}, integrationSettings);
  };

  /**
   * Identify.
   *
   * http://docs.intercom.io/#IntercomJS
   *
   * @api public
   * @param {Identify} identify
   */

  Intercom.prototype.identify = function(identify) {
    var traits = identify.traits({ userId: 'user_id' });
    var integrationSettings = identify.options(this.name);
    var companyCreated = identify.companyCreated();
    var created = identify.created();
    var name = identify.name();
    var id = identify.userId();
    var group = this.analytics.group();
    var settings = this.options;

    if (!id && !identify.email()) {
      return;
    }

    // intercom requires `company` to be an object. default it with group traits
    // so that we guarantee an `id` is there, since they require it
    if (traits.company !== null && !is.object(traits.company)) {
      delete traits.company;
    }

    if (traits.company) {
      defaults(traits.company, group.traits());
    }

    // name
    if (name) traits.name = name;

    // handle dates
    if (created) {
      del(traits, 'created');
      del(traits, 'createdAt');
      traits.created_at = created;
    }

    if (companyCreated) {
      del(traits.company, 'created');
      del(traits.company, 'createdAt');
      traits.company.created_at = companyCreated;
    }

    // convert dates
    traits = convertDates(traits, formatDate);

    // format nested custom traits
    traits = formatNestedCustomTraits(traits, settings);

    // handle options
    if (integrationSettings.userHash)
      traits.user_hash = integrationSettings.userHash;
    if (integrationSettings.user_hash)
      traits.user_hash = integrationSettings.user_hash;

    this.bootOrUpdate(traits, integrationSettings);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Intercom.prototype.group = function(group) {
    var settings = this.options;
    // using .traits here since group.properties() doesn't take alias object
    var props = group.traits({
      createdAt: 'created',
      created: 'created_at',
      monthlySpend: 'monthly_spend'
    });
    props = convertDates(props, formatDate);
    var id = group.groupId();
    if (id) props.id = id;
    var integrationSettings = group.options(this.name);

    // format nested custom traits
    props = formatNestedCustomTraits(props, settings);

    var traits = extend(
      { company: props },
      hideDefaultLauncher(integrationSettings)
    );

    api('update', traits);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Intercom.prototype.track = function(track) {
    var settings = this.options;
    var props = track.properties();
    var revenue = track.revenue();
    var revenueData;
    if (revenue) {
      revenueData = {
        // Intercom requests value in cents
        price: {
          amount: revenue * 100,
          currency: track.currency() // fallsback on 'USD'
        }
      };
    }

    // format Nested custom traits
    props = formatNestedCustomTraits(props, settings);

    props = extend(props, revenueData);
    del(props, 'revenue');
    del(props, 'currency');

    api('trackEvent', track.event(), props);
  };

  /**
   * Boots or updates, as appropriate.
   *
   * @api private
   * @param {Object} options
   */

  Intercom.prototype.bootOrUpdate = function(opts, integrationSettings) {
    var options = opts || {};
    var method = this.booted === true ? 'update' : 'boot';
    var activator = this.options.activator;
    options.app_id = this.options.appId;

    // Intercom, will force the widget to appear if the selector is
    // #IntercomDefaultWidget so no need to check inbox, just need to check that
    // the selector isn't #IntercomDefaultWidget.
    if (activator !== '#IntercomDefaultWidget') {
      options.widget = { activator: activator };
    }
    // Check for selective showing of messenger option
    options = extend(options, hideDefaultLauncher(integrationSettings));

    api(method, options);
    this.booted = true;
  };

  /**
   * Format a date to Intercom's liking.
   *
   * @api private
   * @param {Date} date
   * @return {number}
   */

  function formatDate(date) {
    return Math.floor(date / 1000);
  }

  /**
   * Flatten selectively based on your settings. You can either stringify, flatten, or drop the properties.
   * Intercom rejects nested objects so you must choose a method.
   *
   * @param {Object} obj
   * @param {Object} settings
   * @return {Object} ret
   * @api private
   */

  function formatNestedCustomTraits(obj, settings) {
    var richLinkProperties = settings.richLinkProperties;
    var basicIntercomTraits = [
      'companies',
      'company',
      'created_at',
      'created',
      'custom_attributes',
      'company_id',
      'id',
      'name',
      'monthly_spend',
      'plan',
      'remote_created_at',
      'remove',
      'user_id',
      'email'
    ];

    // add rich link object to semantic traits so that it's not altered by the default method and
    // is passed to intercom as a nested object: https://developers.intercom.com/reference#event-metadata-types
    var semanticTraits = basicIntercomTraits.concat(richLinkProperties);

    // clone traits so we don't modify the original object
    var customTraits = clone(obj);

    // filter out semanticTraits so that we only format custom nested traits
    each(function(trait) {
      del(customTraits, trait);
    }, semanticTraits);

    // create object without custom traits to merge with formatted custom traits in the end
    var standardTraits = pick(semanticTraits, obj);

    // drop any arrays or objects
    var supportedTraits = {};
    each(function(value, key) {
      if (!is.object(value) && !is.array(value)) supportedTraits[key] = value;
    }, customTraits);

    // combine all the traits
    return extend(supportedTraits, standardTraits);
  }

  /**
   * Push a call onto the Intercom queue.
   *
   * @api private
   */

  function api() {
    window.Intercom.apply(window.Intercom, arguments);
  }

  /**
   * Selectively hide messenger
   * https://docs.intercom.io/configure-intercom-for-your-product-or-site/customize-the-intercom-messenger/customize-the-intercom-messenger-technical#show-the-intercom-messenger-to-selected-users-for-web-
   * @param {Object} options
   * @return {Object} ret
   * @api private
   */

  function hideDefaultLauncher(options) {
    var ret = {};
    var setting = options.hideDefaultLauncher;
    if (setting === undefined || typeof setting !== 'boolean') return ret;
    ret.hide_default_launcher = setting;
    return ret;
  }

  },{"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/each":10,"@ndhoule/extend":13,"@ndhoule/pick":18,"@segment/analytics.js-integration":493,"@segment/convert-dates":1087,"is":1131,"obj-case":1143}],493:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":494,"./statics":495,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],494:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":496,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],495:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":497,"dup":42}],496:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],497:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],498:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var clone = require('@ndhoule/clone');

  /**
   * Expose `Keen IO` integration.
   */

  var Keen = (module.exports = integration('Keen IO')
    .global('KeenSegment')
    .option('ipAddon', false)
    .option('projectId', '')
    .option('readKey', '')
    .option('referrerAddon', false)
    .option('trackAllPages', false)
    .option('trackCategorizedPages', true)
    .option('trackNamedPages', true)
    .option('uaAddon', false)
    .option('urlAddon', false)
    .option('writeKey', '')
    .tag(
      '<script src="//d26b395fwzu5fz.cloudfront.net/3.4.0/{{ lib }}.min.js">'
    ));

  /**
   * Initialize.
   *
   * https://keen.io/docs/
   *
   * @api public
   */

  Keen.prototype.initialize = function() {
    var lib = this.options.readKey ? 'keen' : 'keen-tracker';
    var options = this.options;
    var previousKeen = window.Keen || null;
    var self = this;

    // Skip this step if keen-js@3.4.0 is already available
    if (!window.Keen || window.Keen.version !== '3.4.0') {
      // Force-undefine `Keen` (saved as `previousKeen`)
      window.Keen = undefined;
      /**
       * Shim out the Keen client library.
       *
       * To update the library, grab the most up-to-date embed code from Keen's
       * JS library readme (https://github.com/keen/keen-js) and remove any of the
       * script loading/appending business. Next, update the script tag above with
       * the new client library URL.
       */
      /* eslint-disable */
      !(function(a,b){if(void 0===b[a]){b["_"+a]={},b[a]=function(c){b["_"+a].clients=b["_"+a].clients||{},b["_"+a].clients[c.projectId]=this,this._config=c},b[a].ready=function(c){b["_"+a].ready=b["_"+a].ready||[],b["_"+a].ready.push(c)};for(var c=["addEvent","setGlobalProperties","trackExternalLink","on"],d=0;d<c.length;d++){var e=c[d],f=function(a){return function(){return this["_"+a]=this["_"+a]||[],this["_"+a].push(arguments),this}};b[a].prototype[e]=f(e)}}})("Keen",window);
      /* eslint-enable */
      // keen-js@3.4.0 will be installed once `.load()` is called
    }

    // Define a safe namespace (stub)
    window.KeenSegment = window.Keen;

    // Define client (stub)
    this.client = new window.KeenSegment({
      projectId: options.projectId,
      readKey: options.readKey,
      writeKey: options.writeKey
    });

    this.load({ lib: lib }, function() {
      // Redefine safe namespace with full library
      window.KeenSegment = window.Keen;
      // Restore original `Keen`
      if (previousKeen) {
        window.Keen = previousKeen;
        previousKeen = undefined;
      }
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Keen.prototype.loaded = function() {
    return !!(window.KeenSegment && window.KeenSegment.prototype.configure);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Keen.prototype.page = function(page) {
    var category = page.category();
    var name = page.fullName();
    var opts = this.options;

    // all pages
    if (opts.trackAllPages) {
      this.track(page.track());
    }

    // named pages
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }

    // categorized pages
    if (category && opts.trackCategorizedPages) {
      this.track(page.track(category));
    }
  };

  /**
   * Identify.
   *
   * TODO: migrate from old `userId` to simpler `id`
   * https://keen.io/docs/data-collection/data-enrichment/#add-ons
   *
   * Set up the Keen addons object. These must be specifically
   * enabled by the settings in order to include the plugins, or else
   * Keen will reject the request.
   *
   * @api public
   * @param {Identify} identify
   */

  Keen.prototype.identify = function(identify) {
    var traits = identify.traits();
    var id = identify.userId();
    var user = {};
    if (id) user.userId = id;
    if (traits) user.traits = traits;
    var props = { user: user };
    props = this.addons(props, identify);
    this.client.setGlobalProperties(function() {
      // Clone the props so the Keen Client can't manipulate the ref
      return clone(props);
    });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Keen.prototype.track = function(track) {
    var props = track.properties();
    props = this.addons(props, track);
    this.client.addEvent(track.event(), props);
  };

  /**
   * Attach addons to `obj` with `msg`.
   *
   * @api private
   * @param {Object} obj
   * @param {Facade} msg
   */

  Keen.prototype.addons = function(properties, msg) {
    var obj = properties;
    var options = this.options;
    var addons = [];

    if (options.ipAddon) {
      addons.push({
        name: 'keen:ip_to_geo',
        input: { ip: 'ip_address' },
        output: 'ip_geo_info'
      });
      obj.ip_address = '${keen.ip}';
    }

    if (options.uaAddon) {
      addons.push({
        name: 'keen:ua_parser',
        input: { ua_string: 'user_agent' },
        output: 'parsed_user_agent'
      });
      obj.user_agent = '${keen.user_agent}';
    }

    if (options.urlAddon) {
      addons.push({
        name: 'keen:url_parser',
        input: { url: 'page_url' },
        output: 'parsed_page_url'
      });
      obj.page_url = document.location.href;
    }

    if (options.referrerAddon) {
      addons.push({
        name: 'keen:referrer_parser',
        input: {
          referrer_url: 'referrer_url',
          page_url: 'page_url'
        },
        output: 'referrer_info'
      });
      obj.referrer_url = document.referrer;
      obj.page_url = document.location.href;
    }

    obj.keen = {
      timestamp: msg.timestamp(),
      addons: addons
    };

    return obj;
  };

  },{"@ndhoule/clone":7,"@segment/analytics.js-integration":499}],499:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":500,"./statics":501,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],500:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":502,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],501:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":503,"dup":42}],502:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],503:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],504:[function(require,module,exports){
  'use strict';

  /**
   * Module Dependencies
   */

  var integration = require('@segment/analytics.js-integration');
  var reject = require('reject');
  var each = require('@ndhoule/each');
  var remove = require('obj-case').del;
  var extend = require('@ndhoule/extend');
  var keys = require('@ndhoule/keys');
  var trample = require('@segment/trample');

  /**
   * Expose `Kenshoo Infinity` integration.
   */

  var KenshooInfinity = (module.exports = integration('Kenshoo Infinity')
    .option('subdomain', '')
    .option('cid', '')
    .mapping('events')
    .tag(
      '<script src="https://services.xg4ken.com/js/kenshoo.js?cid={{ cid }}">'
    ));

  /**
   * Initialize Kenshoo Infinity
   */

  KenshooInfinity.prototype.initialize = function() {
    this.load({ cid: this.options.cid }, this.ready);
  };

  /**
   * Has the Kenshoo Infinity library been loaded yet?
   * @return {Boolean}
   */

  KenshooInfinity.prototype.loaded = function() {
    return !!(window.kenshoo && window.kenshoo.trackConversion);
  };

  /**
   * Track
   * Fire Kenshoo Inifity Tags per Segment event
   * https://www.dropbox.com/s/u5iuf0m0ty2bnbx/Kenshoo%20-%20Infinity%20Tag%20-%20Implementation%20Guide.pdf?dl=0
   * https://paper.dropbox.com/doc/Kenshoo-Infinity-Tag-A.js-Spec-tRjoYxHNnF8QoCVsD6FN3
   * @param {Facade} track
   * @api public
   */

  KenshooInfinity.prototype.track = function(track) {
    var conversionType = this.events(track.event()); // returns an array
    if (!conversionType.length) return;

    var subdomain = this.options.subdomain;
    var cid = this.options.cid;
    var revenue = track.revenue() || '0';
    var orderId = track.orderId();
    var promoCode = track.options(this.name).promoCode;
    var currency = track.currency();

    // Get custom properties only after removing semantic properties
    var customProperties = track.properties();
    remove(customProperties, 'conversionType');
    remove(customProperties, 'revenue');
    remove(customProperties, 'currency');
    remove(customProperties, 'orderId');
    remove(customProperties, 'promoCode');
    // flatten all compound objects with underscores and then format
    customProperties = format(trample(customProperties, { delimiter: '_' }));

    var params = reject({
      conversionType: limitChars(conversionType, 100) || 'conv',
      revenue: revenue,
      currency: currency, // defaults to 'USD'
      orderId: limitChars(orderId, 64),
      promoCode: limitChars(promoCode, 1024)
    });

    params = extend(params, customProperties);
    // All string values must be encoded
    var encodedParams = {};
    each(function(value, key) {
      encodedParams[key] = encodeURIComponent(value);
    }, params);

    window.kenshoo.trackConversion(subdomain, cid, encodedParams);
  };

  /**
   * Char Limit
   *
   * @param {String} string
   * @param {Number} limit
   * @return {String} ret
   * @api private
   */

  function limitChars(string, limit) {
    if (!string) return string;
    // In case it is a number
    var ret = string.toString();
    return ret.substring(0, limit);
  }

  /**
   * Format Custom Properties
   *
   * @param {Object} properties
   * @return {Object} ret
   * @api private
   */

  function format(properties) {
    var ret = {};
    // Sort keys alphabetically and take the first 15
    var sortedKeys = keys(properties)
      .sort()
      .slice(0, 15);
    each(function(key) {
      // Replace all whitespace with underscores
      var formattedKey = key.replace(/\s/g, '_');
      // Remove all non-alphnumeric/underscores
      formattedKey = formattedKey.replace(/\W/g, '');
      formattedKey = limitChars(formattedKey, 100);
      ret[formattedKey] = limitChars(properties[key], 1024);
    }, sortedKeys);

    return ret;
  }

  },{"@ndhoule/each":10,"@ndhoule/extend":13,"@ndhoule/keys":16,"@segment/analytics.js-integration":505,"@segment/trample":1105,"obj-case":1143,"reject":1150}],505:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":506,"./statics":507,"@ndhoule/defaults":8,"component-bind":1109,"debug":508,"dup":49,"extend":511,"slug-component":1165}],506:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],507:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":510,"dup":51}],508:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":509,"_process":1149,"dup":43}],509:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":512}],510:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],511:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],512:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],513:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var includes = require('@ndhoule/includes');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');

  /**
   * Expose `Kenshoo` integration.
   */

  var Kenshoo = (module.exports = integration('Kenshoo')
    .global('k_trackevent')
    .option('cid', '')
    .option('events', [])
    .option('subdomain', '')
    .tag(
      '<script src="//{{ subdomain }}.xg4ken.com/media/getpx.php?cid={{ cid }}">'
    ));

  /**
   * Initialize.
   *
   * See https://gist.github.com/justinboyle/7875832
   *
   * @api public
   */

  Kenshoo.prototype.initialize = function() {
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Kenshoo.prototype.loaded = function() {
    return is.fn(window.k_trackevent);
  };

  /**
   * Track.
   *
   * FIXME: Only tracks events if they are listed in the events array option.
   * We've asked for docs a few times but no go :/
   *
   * https://github.com/jorgegorka/the_tracker/blob/master/lib/the_tracker/trackers/kenshoo.rb
   *
   * @api public
   * @param {Track} event
   */

  Kenshoo.prototype.track = function(track) {
    var events = this.options.events;
    var event = track.event();
    var revenue = track.revenue() || 0;
    if (!includes(event, events)) return;

    var params = [
      'id=' + this.options.cid,
      'type=conv',
      'val=' + revenue,
      'orderId=' + track.orderId(),
      'promoCode=' + track.coupon(),
      'valueCurrency=' + track.currency(),

      // Live tracking fields.
      // FIXME: Ignored for now (until we get documentation).
      'GCID=',
      'kw=',
      'product='
    ];

    window.k_trackevent(params, this.options.subdomain);
  };

  },{"@ndhoule/includes":15,"@segment/analytics.js-integration":514,"is":1131}],514:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":515,"./statics":516,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],515:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":517,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],516:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":518,"dup":42}],517:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],518:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],519:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var push = require('global-queue')('_kmq');
  var extend = require('@ndhoule/extend');
  var del = require('obj-case').del;

  /**
   * Expose `KISSmetrics` integration.
   */

  var KISSmetrics = (module.exports = integration('KISSmetrics')
    .global('KM')
    .global('_kmil')
    .global('_kmq')
    .option('apiKey', '')
    .option('prefixProperties', true)
    .option('trackCategorizedPages', true)
    .option('trackNamedPages', true)
    .tag(
      'library',
      '<script src="//scripts.kissmetrics.com/{{ apiKey }}.2.js">'
    ));

  /**
   * Check if browser is mobile, for kissmetrics.
   *
   * http://support.kissmetrics.com/how-tos/browser-detection.html#mobile-vs-non-mobile
   */

  exports.isMobile =
    navigator.userAgent.match(/Android/i) ||
    navigator.userAgent.match(/BlackBerry/i) ||
    navigator.userAgent.match(/IEMobile/i) ||
    navigator.userAgent.match(/Opera Mini/i) ||
    navigator.userAgent.match(/iPad/i) ||
    navigator.userAgent.match(/iPhone|iPod/i);

  /**
   * Initialize.
   *
   * http://support.kissmetrics.com/apis/javascript
   */

  KISSmetrics.prototype.initialize = function() {
    window._kmq = window._kmq || [];
    if (exports.isMobile) push('set', { 'Mobile Session': 'Yes' });
    this.load('library', this.ready);
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  KISSmetrics.prototype.loaded = function() {
    return is.object(window.KM);
  };

  /**
   * Page.
   *
   * @param {Page} page
   */

  KISSmetrics.prototype.page = function(page) {
    if (!window.KM_SKIP_PAGE_VIEW) {
      push('record', 'Page View', {
        'Viewed URL': page.url(),
        Referrer: page.referrer() || 'Direct'
      });
    }
    this.trackPage(page);
  };

  /**
   * Track page.
   *
   * @param {Page} page
   */

  KISSmetrics.prototype.trackPage = function(page) {
    var category = page.category();
    var name = page.fullName();
    var opts = this.options;

    var e;
    // categorized pages
    if (opts.trackCategorizedPages && category) {
      e = page.category();
    }
    // named pages
    if (opts.trackNamedPages && name) {
      e = page.name();
    }
    if (!e) {
      return;
    }

    var event = 'Viewed ' + e + ' Page';
    var properties = prefix('Page', page.properties());
    push('record', event, properties);
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   */

  KISSmetrics.prototype.identify = function(identify) {
    var traits = clean(identify.traits());
    var id = identify.userId();
    if (id) push('identify', id);
    if (traits) push('set', traits);
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  KISSmetrics.prototype.track = function(track) {
    var mapping = { revenue: 'Billing Amount' };
    var event = track.event();
    var properties = clean(track.properties(mapping));
    var revenue = track.revenue();
    if (revenue) {
      // legacy: client side integration used to only send 'Billing Amount', but
      // our server side sent both 'revenue' and 'Billing Amount'. From the docs,
      // http://support.kissmetrics.com/tools/revenue-report.html, ther is no
      // reason to send it as 'Billing Amount', but we don't want to break reports
      // so we send it as 'revenue' and 'Billing Amount' for consistency across
      // platforms.
      properties.revenue = revenue;
    }
    if (this.options.prefixProperties) properties = prefix(event, properties);
    push('record', event, properties);
  };

  /**
   * Alias.
   *
   * @param {Alias} to
   */

  KISSmetrics.prototype.alias = function(alias) {
    push('alias', alias.to(), alias.from());
  };

  /**
   * Group.
   *
   * @param {Group} to
   */

  KISSmetrics.prototype.group = function(group) {
    push('set', prefix('Group', group.traits()));
  };

  /**
   * Completed order.
   *
   * @param {Track} track
   * @api private
   */

  KISSmetrics.prototype.completedOrder = function(track) {
    var opts = this.options;
    var event = track.event();
    var products = track.products();
    var timestamp = toUnixTimestamp(track.timestamp() || new Date());
    var properties = track.properties();
    // since we send product data separately and KM doesn't serialize it anyway (shows up as '[object Object]')
    // we're going to delete the property
    del(properties, 'products');
    if (opts.prefixProperties) properties = prefix(event, properties);

    // transaction
    push('record', event, properties);

    // items
    window._kmq.push(function() {
      each(products, function(product, i) {
        var item = product;
        if (opts) item = prefix(event, item);
        item._t = timestamp + i;
        item._d = 1;
        window.KM.set(item);
      });
    });
  };

  /**
   * Prefix properties with the event name.
   *
   * @param {String} event
   * @param {Object} properties
   * @return {Object} prefixed
   * @api private
   */

  function prefix(event, properties) {
    var prefixed = {};
    each(properties, function(key, val) {
      if (key === 'Billing Amount') {
        prefixed[key] = val;
      } else if (key === 'revenue') {
        prefixed[event + ' - ' + key] = val;
        prefixed['Billing Amount'] = val;
      } else {
        prefixed[event + ' - ' + key] = val;
      }
    });
    return prefixed;
  }

  function toUnixTimestamp(date) {
    var d = new Date(date);
    return Math.floor(d.getTime() / 1000);
  }

  /**
   * Clean all nested objects and arrays.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function clean(obj) {
    var ret = {};

    for (var k in obj) {
      if (obj.hasOwnProperty(k)) {
        var value = obj[k];
        if (value === null || typeof value === 'undefined') continue;

        // convert date to unix
        if (is.date(value)) {
          ret[k] = toUnixTimestamp(value);
          continue;
        }

        // leave boolean as is
        if (is.bool(value)) {
          ret[k] = value;
          continue;
        }

        // leave  numbers as is
        if (is.number(value)) {
          ret[k] = value;
          continue;
        }

        // convert non objects to strings
        if (value.toString() !== '[object Object]') {
          ret[k] = value.toString();
          continue;
        }

        // json
        // must flatten including the name of the original trait/property
        var nestedObj = {};
        nestedObj[k] = value;
        var flattenedObj = flatten(nestedObj, { safe: true });

        // stringify arrays inside nested object to be consistent with top level behavior of arrays
        for (var key in flattenedObj) {
          if (is.array(flattenedObj[key])) {
            flattenedObj[key] = flattenedObj[key].toString();
          }
        }

        ret = extend(ret, flattenedObj);
        delete ret[k];
      }
    }
    return ret;
  }

  /**
   * Flatten nested objects
   * taken from https://www.npmjs.com/package/flat
   * @param {Object} obj
   * @return {Object} obj
   * @api public
   */

  function flatten(target, options) {
    var opts = options || {};

    var delimiter = opts.delimiter || '.';
    var maxDepth = opts.maxDepth;
    var currentDepth = 1;
    var output = {};

    //   for (var key in p) {
    //   if (p.hasOwnProperty(key)) {
    //     alert(key + " -> " + p[key]);
    //   }
    // }

    function step(object, prev) {
      for (var key in object) {
        if (object.hasOwnProperty(key)) {
          var value = object[key];
          var isarray = opts.safe && is.array(value);
          var type = Object.prototype.toString.call(value);
          var isobject = type === '[object Object]' || type === '[object Array]';
          var arr = [];

          var newKey = prev ? prev + delimiter + key : key;

          if (!opts.maxDepth) {
            maxDepth = currentDepth + 1;
          }

          for (var keys in value) {
            if (value.hasOwnProperty(keys)) {
              arr.push(keys);
            }
          }

          if (!isarray && isobject && arr.length && currentDepth < maxDepth) {
            ++currentDepth;
            return step(value, newKey);
          }

          output[newKey] = value;
        }
      }
    }

    step(target);

    return output;
  }

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":520,"component-each":1112,"global-queue":1127,"is":1131,"obj-case":1143}],520:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":521,"./statics":522,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],521:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":523,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],522:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":524,"dup":42}],523:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],524:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],525:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_learnq');
  var tick = require('next-tick');
  var Track = require('segmentio-facade').Track;
  var foldl = require('@ndhoule/foldl');
  var remove = require('obj-case').del;
  var extend = require('@ndhoule/extend');

  /**
   * Expose `Klaviyo` integration.
   */

  var Klaviyo = (module.exports = integration('Klaviyo')
    .assumesPageview()
    .global('_learnq')
    .option('apiKey', '')
    .option('enforceEmail', false)
    .tag('<script src="//static.klaviyo.com/onsite/js/klaviyo.js">'));

  /**
   * Initialize.
   *
   * https://www.klaviyo.com/docs/getting-started
   *
   * @api public
   */

  Klaviyo.prototype.initialize = function() {
    var self = this;
    push('account', this.options.apiKey);
    this.load(function() {
      tick(self.ready);
    });
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {Boolean}
   */

  Klaviyo.prototype.loaded = function() {
    return !!(window._learnq && window._learnq.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Klaviyo.prototype.identify = function(identify) {
    // TODO: should map/alias the rest of the reserved props
    var traitAliases = {
      email: '$email',
      id: '$id',
      firstName: '$first_name',
      lastName: '$last_name',
      phone: '$phone_number',
      title: '$title',
      exchangeId: '$exchange_id'
    };

    var traits = identify.traits(traitAliases);

    // If there is not a user ID, email address, or an exchange ID, noop
    //
    // NOTE: An exchange ID is an encrypted identifier that Klaviyo
    //       consumes server-side. It is considered a valid identifier.
    if (!identify.userId() && !identify.email() && !traits.$exchange_id) return;

    // don't add $id or id if email only option is enforced to prevent some edge case dupe profile issues with Klaviyo API
    if (this.options.enforceEmail) {
      remove(traits, 'id');
      remove(traits, '$id');
    }

    // if you enforce email but you don't send email, noop
    if (this.options.enforceEmail && !traits.$email) return;
    push('identify', traits);
  };

  /**
   * Group.
   *
   * @param {Group} group
   */

  Klaviyo.prototype.group = function(group) {
    var props = group.properties();
    if (!props.name) return;
    push('identify', { $organization: props.name });
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  Klaviyo.prototype.track = function(track) {
    push(
      'track',
      track.event(),
      track.properties({
        revenue: '$value'
      })
    );
  };

  /**
   * Completed Order
   *
   * http://learn.klaviyo.com/12887-Ecommerce:-Other-Integrations/product-activity-integrating-a-custom-ecommerce-cart-or-platform
   * @param {Track} track
   */

  Klaviyo.prototype.orderCompleted = function(track) {
    var products = formatProducts(track.products());
    // Their docs for client side tells users to send these properties slightly
    // different than server side, although they don't have to be.
    var payload = {
      $event_id: track.orderId(),
      $value: track.revenue(),
      Categories: products.categories,
      ItemNames: products.names,
      Items: products.items
    };

    var whitelist = [
      '$event_id',
      '$value',
      'orderId',
      'order_id',
      'categories',
      'itemNames',
      'items',
      'revenue',
      'total',
      'products'
    ];
    // strip standard props and leave custom props only
    var topLevelCustomProps = filter(track, whitelist);

    payload = extend(payload, topLevelCustomProps);

    push('track', track.event(), payload);

    // Formulate payload per product to send
    var productProperties = formatItems(track);

    // Send a separate event for each product
    for (var x = 0; x < productProperties.length; x++) {
      push('track', 'Ordered Product', productProperties[x]);
    }
  };

  /**
   * Return only custom properties
   *
   * @param {Object, Array} facade, list
   * @return {Object}
   * @api private
   */

  function filter(facade, list) {
    var ret = facade.properties();
    for (var x = 0; x < list.length; x++) {
      remove(ret, list[x]);
    }
    return ret;
  }

  /**
   * Format payload for each product.
   *
   * @param {Track} track
   * @return {Array}
   * @api private
   */

  function formatItems(track) {
    return foldl(
      function(payloads, props) {
        var product = new Track({ properties: props });
        var itemWhitelist = [
          '$event_id',
          '$value',
          'name',
          'product categories',
          'category',
          'id',
          'productId',
          'product_id',
          'sku',
          'quantity',
          'price',
          'productUrl',
          'imageUrl'
        ];

        // filter standard item props so we can merge custom props later
        var itemCustomProps = filter(product, itemWhitelist);

        var item = reject({
          $value: product.price(),
          Name: product.name(),
          Quantity: product.quantity(),
          ProductCategories: [product.category()],
          ProductURL: product.proxy('properties.productUrl'),
          ImageURL: product.proxy('properties.imageUrl'),
          SKU: product.sku()
        });

        // ensure unique $event_id is associated with each Ordered Product event by combining Order Completed
        //  order_id and product's productId or SKU
        var identifier = product.productId() || product.id() || product.sku();
        item.$event_id = track.orderId() + '_' + identifier;

        item = extend(item, itemCustomProps);
        payloads.push(item);

        return payloads;
      },
      [],
      track.products()
    );
  }

  /**
   * Format products array.
   *
   * @param {Array} track
   * @return {Array}
   * @api private
   */

  function formatProducts(products) {
    return foldl(
      function(payloads, props) {
        var product = new Track({ properties: props });
        var whitelist = [
          'id',
          'product_id',
          'productId',
          'sku',
          'name',
          'quantity',
          'itemPrice',
          'price',
          'rowTotal',
          'categories',
          'category',
          'productUrl',
          'imageUrl'
        ];
        // filter standard traits to merge custom props later
        var customProps = filter(product, whitelist);

        var item = reject({
          id: product.productId() || product.id(),
          SKU: product.sku(),
          Name: product.name(),
          Quantity: product.quantity(),
          ItemPrice: product.price(),
          RowTotal: product.price(),
          Categories: [product.category()],
          ProductURL: product.proxy('properties.productUrl'),
          ImageURL: product.proxy('properties.imageUrl')
        });
        item = extend(item, customProps);
        payloads.items.push(item);
        payloads.categories.push(product.category());
        payloads.names.push(product.name());

        return payloads;
      },
      { categories: [], names: [], items: [] },
      products
    );
  }

  /**
   * Return a copy of an object, less an  `undefined` values.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function reject(obj) {
    return foldl(
      function(res, val, key) {
        var result = res;
        if (val !== undefined) {
          result[key] = val;
        }
        return result;
      },
      {},
      obj
    );
  }

  },{"@ndhoule/extend":13,"@ndhoule/foldl":14,"@segment/analytics.js-integration":526,"global-queue":1127,"next-tick":1142,"obj-case":1143,"segmentio-facade":1158}],526:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":527,"./statics":528,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":530,"slug-component":1165}],527:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],528:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":529,"dup":51}],529:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],530:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],531:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `aginkedIn Insight Tag` integration.
   */

  var Linkedin = (module.exports = integration('LinkedIn Insight Tag')
    .option('partnerId', '')
    .tag(
      '<script src="https://snap.licdn.com/li.lms-analytics/insight.min.js"></script>'
    ));

  Linkedin.prototype.initialize = function() {
    // We require a Partner ID to run this integration.
    if (!this.options.partnerId) return;

    window._linkedin_data_partner_id = this.options.partnerId;

    this.load(this.ready);
  };

  Linkedin.prototype.loaded = function() {
    return window._linkedin_data_partner_id;
  };

  },{"@segment/analytics.js-integration":532}],532:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":533,"./statics":534,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":535,"dup":40,"slug-component":1165}],533:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":537,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],534:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":538,"dup":42}],535:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":536,"_process":1149,"dup":43}],536:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":539}],537:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],538:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],539:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],540:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var clone = require('component-clone');
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');
  var when = require('do-when');

  /**
   * Expose `LiveChat` integration.
   */

  var LiveChat = (module.exports = integration('LiveChat')
    .assumesPageview()
    .global('LC_API')
    .global('__lc')
    .global('__lc_inited')
    .option('group', 0)
    .option('license', '')
    .option('listen', false)
    .tag('<script src="//cdn.livechatinc.com/tracking.js">'));

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'livechat',
    version: '1.0.0'
  };

  /**
   * Initialize.
   *
   * http://www.livechatinc.com/api/javascript-api
   *
   * @api public
   */

  LiveChat.prototype.initialize = function() {
    var self = this;
    var user = this.analytics.user();
    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });

    window.__lc = clone(this.options);
    window.__lc.visitor = {
      name: identify.name(),
      email: identify.email()
    };
    // listen is not an option we need from clone
    delete window.__lc.listen;

    this.load(function() {
      when(
        function() {
          return self.loaded();
        },
        function() {
          if (self.options.listen) self.attachListeners();
          tick(self.ready);
        }
      );
    });
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  LiveChat.prototype.loaded = function() {
    return !!window.LC_API;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  LiveChat.prototype.identify = function(identify) {
    var traits = identify.traits({ userId: 'User ID' });
    window.LC_API.set_custom_variables(convert(traits));
  };

  /**
   * Listen for chat events.
   *
   * @api private
   */

  LiveChat.prototype.attachListeners = function() {
    var self = this;
    window.LC_API = window.LC_API || {};

    window.LC_API.on_chat_started = function(data) {
      self.analytics.track(
        'Live Chat Conversation Started',
        { agentName: data.agent_name },
        { context: { integration: integrationContext } }
      );
    };

    window.LC_API.on_message = function(data) {
      if (data.user_type === 'visitor') {
        self.analytics.track(
          'Live Chat Message Sent',
          {},
          { context: { integration: integrationContext } }
        );
      } else {
        self.analytics.track(
          'Live Chat Message Received',
          { agentName: data.agent_name, agentUsername: data.agent_login },
          { context: { integration: integrationContext } }
        );
      }
    };

    window.LC_API.on_chat_ended = function() {
      self.analytics.track('Live Chat Conversation Ended');
    };
  };

  /**
   * Convert a traits object into the format LiveChat requires.
   *
   * @param {Object} traits
   * @return {Array}
   */

  function convert(traits) {
    var arr = [];
    each(traits, function(key, value) {
      arr.push({ name: key, value: value });
    });
    return arr;
  }

  },{"@segment/analytics.js-integration":541,"component-clone":1110,"component-each":1112,"do-when":1125,"next-tick":1142,"segmentio-facade":1158}],541:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":542,"./statics":543,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":544,"dup":40,"slug-component":1165}],542:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":547,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],543:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":548,"dup":42}],544:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":545,"_process":1149,"dup":43}],545:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":546}],546:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],547:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],548:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],549:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var each = require('component-each');

  /**
   * HOP.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Expose `Localytics`
   */

  var Localytics = (module.exports = integration('Localytics')
    .assumesPageview()
    .global('LocalyticsGlobal')
    .option('appKey', '')
    .option('namespace', null)
    .option('polling', null)
    .option('appVersion', null)
    .option('networkCarrier', null)
    .option('uploadTimeout', null)
    .option('sessionTimeoutSeconds', null)
    .option('storage', null)
    .option('logger', null)
    .option('trackAllPages', false)
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .option('dimensions', {})
    .tag('localytics', '<script src="//web.localytics.com/v3/localytics.js">'));

  /**
   * Initialize
   *
   * http://www.localytics.com/docs/sdks-integration-guides/web/
   *
   * @api public
   */

  Localytics.prototype.initialize = function() {
    var self = this;

    window.LocalyticsGlobal = 'll';
    window.ll =
      window.ll ||
      function() {
        window.ll.q = window.ll.q || [];
        window.ll.q.push(arguments);
      };
    window.ll.t = +new Date();
    window.ll('init', self.options.appKey, {});

    this.load('localytics', this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Localytics.prototype.loaded = function() {
    // FIXME: This will always return true because we init LocalyticsGlobal to a
    // truthy value in #initialize
    return !!window.LocalyticsGlobal;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Localytics.prototype.identify = function(identify) {
    var id = identify.userId();
    var email = identify.email();
    var name = identify.name();
    var firstName = identify.firstName();
    var lastName = identify.lastName();

    if (id) window.ll('setCustomerId', id);
    if (name) window.ll('setCustomerName', name);
    if (email) window.ll('setCustomerEmail', email);
    if (firstName) window.ll('setCustomerFirstName', firstName);
    if (lastName) window.ll('setCustomerLastName', lastName);
    this.setCustomDimensions(identify.traits());
  };

  /**
   * Page.
   *
   * http://www.localytics.com/docs/sdks-integration-guides/web/#html5screens
   *
   * @param {Page} page
   */

  Localytics.prototype.page = function(page) {
    var category = page.category();
    var name = page.fullName();
    var event = page.event();
    var opts = this.options;
    if (opts.trackAllPages) window.ll('tagScreen', event);
    if (name && opts.trackNamedPages) window.ll('tagScreen', name);
    if (category && opts.trackCategorizedPages) window.ll('tagScreen', category);
  };

  /**
   * Track.
   *
   * http://docs.localytics.com/dev/web.html#events-web
   *
   * @param {Track} track
   */

  Localytics.prototype.track = function(track) {
    this.setCustomDimensions(track.properties());
    var value = track.revenue() || track.value();
    window.ll('tagEvent', track.event(), track.properties(), value);
  };

  /**
   * Set custom dimensions if call traits/properties match pre-defined settings
   *
   * @param {Object} props
   * @api private
   */

  Localytics.prototype.setCustomDimensions = function(props) {
    var opts = this.options.dimensions;
    each(props, function(name, value) {
      if (has.call(opts, name)) {
        window.ll('setCustomDimension', opts[name], value);
      }
    });
  };

  },{"@segment/analytics.js-integration":550,"component-each":1112}],550:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":551,"./statics":552,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":553,"dup":40,"slug-component":1165}],551:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":555,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],552:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":556,"dup":42}],553:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":554,"_process":1149,"dup":43}],554:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":557}],555:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],556:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],557:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],558:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var integration = require('@segment/analytics.js-integration');
  var useHttps = require('use-https');

  /**
   * Expose `LuckyOrange` integration.
   */

  var LuckyOrange = (module.exports = integration('Lucky Orange')
    .assumesPageview()
    .global('_loq')
    .global('__lo_cs_added')
    .global('__wtw_lucky_site_id')
    .global('__wtw_lucky_is_segment_io')
    .global('__wtw_custom_user_data')
    .option('siteId', null)
    .tag(
      'http',
      '<script src="http://www.luckyorange.com/w.js?{{ cacheBuster }}">'
    )
    .tag(
      'https',
      '<script src="https://ssl.luckyorange.com/w.js?{{ cacheBuster }}">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  LuckyOrange.prototype.initialize = function() {
    if (!window._loq) window._loq = [];
    window.__wtw_lucky_site_id = this.options.siteId;

    var user = this.analytics.user();
    this.identify(
      new Identify({
        traits: user.traits(),
        userId: user.id()
      })
    );

    var cacheBuster = Math.floor(new Date().getTime() / 60000);
    var tagName = useHttps() ? 'https' : 'http';
    this.load(tagName, { cacheBuster: cacheBuster }, this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  LuckyOrange.prototype.loaded = function() {
    return !!window.__lo_cs_added;
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   */

  LuckyOrange.prototype.identify = function(identify) {
    var traits = identify.traits();
    var email = identify.email();
    if (email) traits.email = email;
    var name = identify.name();
    if (name) traits.name = name;
    window.__wtw_custom_user_data = traits;
  };

  },{"@segment/analytics.js-integration":559,"segmentio-facade":1158,"use-https":1180}],559:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":560,"./statics":561,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":563,"slug-component":1165}],560:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],561:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":562,"dup":51}],562:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],563:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],564:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var alias = require('@segment/alias');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Lytics` integration.
   */

  var Lytics = (module.exports = integration('Lytics')
    .global('jstag')
    .option('cid', '')
    .option('stream', 'default')
    .option('cookie', 'seerid')
    .option('blockload', false)
    .option('loadid', false)
    .option('delay', 2000)
    .option('sessionTimeout', 1800)
    .option('url', '//c.lytics.io')
    .tag('<script src="https://c.lytics.io/api/tag/{{ cid }}/lio.js">'));

  /**
   * Options aliases.
   */

  var aliases = {
    sessionTimeout: 'sessecs'
  };

  /**
   * Initialize.
   *
   * http://admin.lytics.io/doc#jstag
   *
   * @api public
   */

  Lytics.prototype.initialize = function() {
    var options = alias(this.options, aliases);
    var self = this;
    /* eslint-disable */
    window.jstag = function(){function t(t){return function(){return t.apply(this,arguments),this}}function n(){var n=["ready"].concat(c.call(arguments));return t(function(){n.push(c.call(arguments)),this._q.push(n)})}var i={_q:[],_c:{},ts:(new Date).getTime(),ver:"2.0.0"},c=Array.prototype.slice;return i.init=function(t){return i._c=t,t.synchronous||i.loadtagmgr(t),this},i.loadtagmgr=function(t){var n=document.createElement("script");n.type="text/javascript",n.async=!0,n.src=t.url+"/api/tag/"+t.cid+"/lio.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(n,i)},i.ready=n(),i.send=n("send"),i.mock=n("mock"),i.identify=n("identify"),i.pageView=n("pageView"),i.bind=t(function(t){i._q.push([t,c.call(arguments,1)])}),i.block=t(function(){i._c.blockload=!0}),i.unblock=t(function(){i._c.blockload=!1}),i}();
    /* eslint-enable */
    this.load(function() {
      window.jstag.init(options);
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Lytics.prototype.loaded = function() {
    return !!(window.jstag && window.jstag.bind);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Lytics.prototype.page = function(page) {
    window.jstag.send(
      this.options.stream,
      page.properties({
        name: '_e'
      })
    );
  };

  /**
   * Idenfity.
   *
   * @api public
   * @param {Identify} identify
   */

  Lytics.prototype.identify = function(identify) {
    window.jstag.send(
      this.options.stream,
      identify.traits({
        id: 'user_id'
      })
    );
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Lytics.prototype.track = function(track) {
    var props = track.properties();
    props._e = track.event();
    window.jstag.send(this.options.stream, props);
  };

  },{"@segment/alias":21,"@segment/analytics.js-integration":565}],565:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":566,"./statics":567,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],566:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":568,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],567:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":569,"dup":42}],568:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],569:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],570:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * UMD?
   */

  var umd = typeof window.define === 'function' && window.define.amd;

  /**
   * Expose `Madkudu` integration.
   */

  var MadKudu = (module.exports = integration('Madkudu')
    .global('madkudu')
    .option('apiKey', '')
    .readyOnLoad()
    .tag(
      '<script src="//cdn.madkudu.com/madkudu.js/v1/{{ apiKey }}/madkudu.min.js">'
    ));

  /**
   * Initialize.
   *
   * https://github.com/MadKudu/madkudu.js
   *
   * @api public
   */

  MadKudu.prototype.initialize = function() {
    /* eslint-disable */
    !function(){var madkudu=window.madkudu=window.madkudu||[];if(!madkudu.initialize)if(madkudu.invoked)window.console&&console.error&&console.error("MadKudu snippet included twice.");else{madkudu.invoked=!0;madkudu.methods=["identify","reset","group","ready","page","track","once","on"];;madkudu.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);madkudu.push(e);return madkudu}};for(var t=0;t<madkudu.methods.length;t++){var e=madkudu.methods[t];madkudu[e]=madkudu.factory(e)}
      madkudu.SNIPPET_VERSION="0.3.0";
    }}();
    /* eslint-enable */

    var self = this;

    if (umd) {
      window.require(
        [
          '//cdn.madkudu.com/madkudu.js/v1/' +
            self.options.apiKey +
            '/madkudu.min.js'
        ],
        function(madkudu) {
          window.madkudu = madkudu;
          self.ready();
        }
      );
      return;
    }

    this.load({ apiKey: this.options.apiKey }, function() {
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  MadKudu.prototype.loaded = function() {
    return !!(window.madkudu && window.madkudu.options);
  };

  /**
   * {Page}.
   *
   * @api public
   * @param {Facade} page
   */

  MadKudu.prototype.page = function() {
    window.madkudu.page();
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   */

  MadKudu.prototype.identify = function(identify) {
    var id = identify.userId();
    var traits = identify.traits();
    if (id) {
      window.madkudu.identify(id, traits);
    } else {
      window.madkudu.identify(traits);
    }
  };

  },{"@segment/analytics.js-integration":571}],571:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":572,"./statics":573,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],572:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":574,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],573:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":575,"dup":42}],574:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],575:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],576:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var url = require('component-url');
  var when = require('do-when');
  var each = require('@ndhoule/each');

  // mapping of Standard Marketo API names: restAPIName: soapAPIName
  var apiNameMapping = {
    annualRevenue: 'AnnualRevenue',
    anonymousIP: 'AnonymousIP',
    billingCity: 'BillingCity',
    billingCountry: 'BillingCountry',
    billingPostalCode: 'BillingPostalCode',
    billingState: 'BillingState',
    billingStreet: 'BillingStreet',
    department: 'Department',
    doNotCall: 'DoNotCall',
    doNotCallReason: 'DoNotCallReason',
    emailInvalid: 'EmailInvalid',
    emailInvalidCause: 'EmailInvalidCause',
    fax: 'Fax',
    industry: 'Industry',
    inferredCompany: 'InferredCompany',
    inferredCountry: 'InferredCountry',
    leadRole: 'LeadRole',
    leadScore: 'LeadScore',
    leadSource: 'LeadSource',
    leadStatus: 'LeadStatus',
    mainPhone: 'MainPhone',
    facebookDisplayName: 'MarketoSocialFacebookDisplayName',
    facebookId: 'MarketoSocialFacebookId',
    facebookPhotoURL: 'MarketoSocialFacebookPhotoURL',
    facebookProfileURL: 'MarketoSocialFacebookProfileURL',
    facebookReach: 'MarketoSocialFacebookReach',
    facebookReferredEnrollments: 'MarketoSocialFacebookReferredEnrollments',
    facebookReferredVisits: 'MarketoSocialFacebookReferredVisits',
    lastReferredEnrollment: 'MarketoSocialLastReferredEnrollment',
    lastReferredVisit: 'MarketoSocialLastReferredVisit',
    linkedInDisplayName: 'MarketoSocialLinkedInDisplayName',
    linkedInId: 'MarketoSocialLinkedInId',
    linkedInPhotoURL: 'MarketoSocialLinkedInPhotoURL',
    linkedInProfileURL: 'MarketoSocialLinkedInProfileURL',
    linkedInReach: 'MarketoSocialLinkedInReach',
    linkedInReferredEnrollments: 'MarketoSocialLinkedInReferredEnrollments',
    linkedInReferredVisits: 'MarketoSocialLinkedInReferredVisits',
    syndicationId: 'MarketoSocialSyndicationId',
    totalReferredEnrollments: 'MarketoSocialTotalReferredEnrollments',
    totalReferredVisits: 'MarketoSocialTotalReferredVisits',
    twitterDisplayName: 'MarketoSocialTwitterDisplayName',
    twitterId: 'MarketoSocialTwitterId',
    twitterPhotoURL: 'MarketoSocialTwitterPhotoURL',
    twitterProfileURL: 'MarketoSocialTwitterProfileURL',
    twitterReach: 'MarketoSocialTwitterReach',
    twitterReferredEnrollments: 'MarketoSocialTwitterReferredEnrollments',
    twitterReferredVisits: 'MarketoSocialTwitterReferredVisits',
    middleName: 'MiddleName',
    mktoCompanyNotes: 'MktoCompanyNotes',
    mktoPersonNotes: 'MktoPersonNotes',
    mobilePhone: 'MobilePhone',
    numberOfEmployees: 'NumberOfEmployees',
    rating: 'Rating',
    salutation: 'Salutation',
    sicCode: 'SICCode',
    site: 'Site',
    title: 'Title',
    unsubscribed: 'Unsubscribed',
    unsubscribedReason: 'UnsubscribedReason',
    website: 'Website'
  };

  /**
   * Expose `Marketo` integration.
   */

  var Marketo = (module.exports = integration('Marketo V2')
    .assumesPageview()
    .global('Munchkin')
    .global('MktForms2')
    .option('host', 'https://api.segment.io')
    .option('accountId', '')
    .option('projectId', '')
    .option('marketoHostUrl', '')
    .option('marketoFormId', '')
    .option('traits', [])
    .tag('<script src="//munchkin.marketo.net/munchkin.js">')
    .tag(
      'forms',
      '<script src="{{marketoHostUrl}}/js/forms2/js/forms2.min.js">'
    ));

  var disableFormSubmitRedirects = function(form) {
    if (form) {
      // *** Do not remove this callback ***
      // This ensures there are no page refreshes after the form is submitted and handles
      // the side effects of multiple form submissions in the same page.
      form.onSuccess(function() {
        return false;
      });
    }
  };

  /**
   * Initialize.
   *
   * https://app-q.marketo.com/#MS0A1
   *
   * @api public
   */

  Marketo.prototype.initialize = function() {
    var munchkinId = this.options.accountId;
    var marketoHostUrl = this.options.marketoHostUrl;
    var marketoFormId = parseInt(this.options.marketoFormId, 10);

    var identifySettingsAreInvalid =
      marketoHostUrl === undefined ||
      marketoHostUrl === '' ||
      Number.isNaN(marketoFormId) ||
      marketoFormId <= 0;

    if (identifySettingsAreInvalid) {
      console.warn(
        'Invalid settings for identify method. Please review your Marketo V2 destination settings.'
      );
      return;
    }

    var self = this;
    this.load(function() {
      if (window.Munchkin === undefined) {
        return;
      }

      window.Munchkin.init(munchkinId, {
        asyncOnly: true
      });

      // marketo integration actually loads a marketo snippet
      // and the snippet loads the real marketo, this is required
      // because there's a race between `window.mktoMunchkinFunction = sinon.spy()`
      // and marketo's real javascript which overrides `window.mktoMunchkinFunction`
      // and deletes the spy.
      when(self.loaded, self.ready);
    });

    this.load('forms', { marketoHostUrl: marketoHostUrl }, function() {
      if (window.MktoForms2 === undefined) {
        return;
      }

      var marketoForm = document.createElement('form');
      marketoForm.setAttribute('id', 'mktoForm_' + marketoFormId);
      marketoForm.setAttribute('style', 'display:none');
      document.body.appendChild(marketoForm);
      window.MktoForms2.loadForm(
        marketoHostUrl,
        munchkinId,
        marketoFormId,
        function(form) {
          disableFormSubmitRedirects(form);
        }
      );
    });
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Marketo.prototype.loaded = function() {
    return is.object(window.Munchkin) && !!window.MunchkinTracker;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page}
   */

  Marketo.prototype.page = function(page) {
    // Remove once V1 is completely deprecated.
    if (!page.enabled('Marketo')) return;

    var properties = page.properties();
    var parsed = url.parse(properties.url);

    if (window.mktoMunchkinFunction === undefined) {
      return;
    }

    window.mktoMunchkinFunction('visitWebPage', {
      url: properties.url,
      params: parsed.query
    });
  };

  Marketo.prototype.setupAndSubmitForm = function(traits, form) {
    form.addHiddenFields(traits, form);
    disableFormSubmitRedirects(form);
    form.submit();
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Marketo.prototype.identify = function(identify) {
    // Remove once V1 is completely deprecated.
    if (!identify.enabled('Marketo')) {
      return;
    }

    var self = this;
    var settings = this.options;

    // we _must_ have an email
    var email = identify.email();
    if (!email) return;

    // setting standard traits
    var traitsToSendMarketo = {};
    var traits = identify.traits();
    var company = identify.proxy('traits.company');
    var address = identify.address();

    traitsToSendMarketo.Email = email;
    if (identify.birthday())
      traitsToSendMarketo.DateofBirth = identify.birthday();
    if (identify.firstName())
      traitsToSendMarketo.FirstName = identify.firstName();
    if (identify.gender())
      traitsToSendMarketo.MarketoSocialGender = identify.gender();
    if (identify.lastName()) traitsToSendMarketo.LastName = identify.lastName();
    if (identify.phone()) traitsToSendMarketo.Phone = identify.phone();
    if (identify.userId()) traitsToSendMarketo.userId = identify.userId();
    if (identify.anonymousId())
      traitsToSendMarketo.anonymousId = identify.anonymousId();

    if (address) {
      if (is.object(address)) {
        traitsToSendMarketo.City = address.city;
        traitsToSendMarketo.Country = address.country;
        traitsToSendMarketo.PostalCode = address.zip || address.postalCode;
        traitsToSendMarketo.State = address.state;
      } else {
        traitsToSendMarketo.Address = address;
      }
    }

    if (company) {
      if (is.object(company)) {
        traitsToSendMarketo.Company = company.name;
      } else {
        traitsToSendMarketo.Company = company;
      }
    }

    each(function(trait) {
      var segmentTrait = trait.value
        ? trait.value.segmentTrait
        : trait.segmentTrait;
      var marketoField = trait.value
        ? trait.value.marketoFieldName
        : trait.marketoFieldName;
      // Marketo requires the SOAP API name when using munchkin but users will be giving us the REST API names
      // in their integrations settings so we have to do a check for any standard Marketo trait that we don't map by default
      // and use the SOAP name. Custom Marketo API names are the same between the REST and SOAP API.
      if (apiNameMapping[marketoField]) {
        marketoField = apiNameMapping[marketoField];
      }
      if (traits[segmentTrait] !== undefined) {
        traitsToSendMarketo[marketoField] = traits[segmentTrait];
      }
    }, settings.traits);

    if (window.MktoForms2 === undefined) {
      return;
    }

    window.MktoForms2.whenReady(function(form) {
      var marketoFormId = parseInt(settings.marketoFormId, 10);
      var validFormId = !(Number.isNaN(marketoFormId) || marketoFormId <= 0);

      if (validFormId && form.getId() === marketoFormId) {
        self.setupAndSubmitForm(traitsToSendMarketo, form);
      }
    });
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":577,"component-url":1121,"do-when":1125,"is":1131}],577:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":578,"./statics":579,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":580,"dup":40,"slug-component":1165}],578:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":582,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],579:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":583,"dup":42}],580:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":581,"_process":1149,"dup":43}],581:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":584}],582:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],583:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],584:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],585:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var fmt = require('@segment/fmt');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var jsonp = require('jsonp');
  var url = require('component-url');
  var when = require('do-when');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Expose `Marketo` integration.
   */

  var Marketo = (module.exports = integration('Marketo')
    .assumesPageview()
    .global('Munchkin')
    .option('host', 'https://api.segment.io')
    .option('accountId', '')
    .option('projectId', '')
    .tag('<script src="//munchkin.marketo.net/munchkin.js">'));

  /**
   * Initialize.
   *
   * https://app-q.marketo.com/#MS0A1
   *
   * @api public
   */

  Marketo.prototype.initialize = function() {
    var self = this;
    this.load(function() {
      window.Munchkin.init(self.options.accountId, {
        asyncOnly: true
      });
      // marketo integration actually loads a marketo snippet
      // and the snippet loads the real marketo, this is required
      // because there's a race between `window.mktoMunchkinFunction = sinon.spy()`
      // and marketo's real javascript which overrides `window.mktoMunchkinFunction`
      // and deletes the spy.
      when(self.loaded, self.ready);
    });
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Marketo.prototype.loaded = function() {
    return is.object(window.Munchkin) && !!window.MunchkinTracker;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page}
   */

  Marketo.prototype.page = function(page) {
    var properties = page.properties();
    var parsed = url.parse(properties.url);
    window.mktoMunchkinFunction('visitWebPage', {
      url: properties.url,
      params: parsed.query
    });
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Marketo.prototype.identify = function(identify) {
    // we _must_ have an email
    if (!identify.email()) return;

    var traits = identify.traits({
      address: 'Address',
      company: 'Company',
      email: 'Email',
      firstName: 'FirstName',
      industry: 'Industry',
      lastName: 'LastName',
      phone: 'Phone'
    });

    // add `userId` since `id` is ignored by marketo
    // `id` seems to be an undocumented standard field that marketo
    // self increments for every new user and is required to
    // retrieve user data for their REST api
    // http://developers.marketo.com/documentation/rest/get-lead-by-id/
    if (identify.userId()) traits.userId = identify.userId();

    if (is.object(traits.Address)) {
      traits.City = identify.proxy('address.city');
      traits.Country = identify.proxy('address.country');
      traits.PostalCode = identify.proxy('address.postalCode');
      traits.State = identify.proxy('address.state');
      delete traits.Address;
    }

    // associate the lead on the client-side so that
    // we can track to the same user
    this.requestHash(traits.Email, function(err, hash) {
      var marketoFn = window.mktoMunchkinFunction;
      if (marketoFn) marketoFn('associateLead', traits, hash);
    });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Marketo.prototype.track = function(track) {
    var properties = track.properties();
    var event = track.event();

    // we're going to fake a Marketo javascript event
    // by sending it as a visitWebPage event
    // with a relative URL of /event/{actual_event}
    var url = event.replace(/[ _]/g, '-');

    if (event.match(/^\/event\//) === null) {
      url = fmt('/event/%s', url);
    }

    // the url parameters will be the event properties
    var params = '';
    for (var prop in properties) {
      if (has.call(properties, prop)) {
        // TODO: dont send a trailing &, make sure thats ok to remove
        params += prop + '=' + encodeURIComponent(properties[prop]) + '&';
      }
    }

    window.mktoMunchkinFunction('visitWebPage', {
      url: url,
      params: params
    });
  };

  /**
   * Generate the URL to the Segment endpoint that hashes Marketo emails.
   *
   * @api private
   * @param {string} email
   * @return {string}
   */

  Marketo.prototype.emailHashUrl = function(email) {
    var host = this.options.host;
    var projectId = this.options.projectId;
    return fmt('%s/integrations/marketo/v1/%s/%s/hash', host, projectId, email);
  };

  /**
   * Marketo requires that users' requests come with a hashed version of their
   * email address. It's a hash that can't be done on the client-side for some
   * reason.
   *
   * Man, it'd have been great if someone had documented this in the first place.
   *
   * See https://github.com/segmentio/marketo-hash-app for more details.
   *
   * TODO: Improve this documentation
   *
   * @api private
   * @param {string} email
   * @param {Function} callback
   */

  Marketo.prototype.requestHash = function(email, callback) {
    var url = this.emailHashUrl(email);
    jsonp(url, callback);
  };

  },{"@segment/analytics.js-integration":586,"@segment/fmt":1089,"component-url":1121,"do-when":1125,"is":1131,"jsonp":1135}],586:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":587,"./statics":588,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":589,"dup":40,"slug-component":1165}],587:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":591,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],588:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":592,"dup":42}],589:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":590,"_process":1149,"dup":43}],590:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":593}],591:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],592:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],593:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],594:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var qs = require('component-querystring');
  var foldl = require('@ndhoule/foldl');
  var each = require('component-each');
  var toNoCase = require('to-no-case');

  /**
   * Expose `MediaMath`
   */

  var MediaMath = (module.exports = integration('MediaMath')
    .option('allPagesMtId', '')
    .option('allPagesMtAdId', '')
    .option('events', [])
    .tag(
      'page',
      '<script src="//pixel.mathtag.com/event/js?mt_id={{ allPagesMtId }}&mt_adid={{ allPagesMtAdId }}&v1=&v2=&v3=&s1=&s2=&s3=">'
    )
    .tag(
      'conversion',
      '<script src="//pixel.mathtag.com/event/js?{{ query }}">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  MediaMath.prototype.initialize = function() {
    var allPagesMtId = this.options.allPagesMtId;
    var allPagesMtAdId = this.options.allPagesMtAdId;
    if (allPagesMtId && allPagesMtAdId) this.load('page');
    this.ready();
  };

  /**
   * Loaded.
   *
   * @api public
   * @return {boolean}
   */

  MediaMath.prototype.loaded = function() {
    // MediaMath loads pixels on demand, so it doesn't need to be pre-loaded
    return true;
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  MediaMath.prototype.track = function(track) {
    var events = [];
    if (!this.options.events || !this.options.events.length) return;

    // retrieve event mappings that match the current event
    for (var i = 0; i < this.options.events.length; i++) {
      var item = this.options.events[i];
      if (item.value) {
        if (toNoCase(item.key) === toNoCase(track.event()))
          events.push(item.value);
      } else if (toNoCase(item.event) === toNoCase(track.event())) {
        events.push(item);
      }
    }
    var self = this;
    each(events, function(event) {
      // sParams and vParams are arbitrarily separated,
      // any of either can be assigned any dynamic value.
      var queryParamPropertyMap = [].concat(
        event.vParameters || [],
        event.sParameters || []
      );

      // front-load query accumulator with empty string defaults
      // so that resulting qs will be formatted correctly
      // without omission of mandatory keys (&v1=&v2=&v3=&s1=&s2=&s3=)
      var query = foldl(
        function(query, kv) {
          var property = kv && kv.key;
          var mappedKey = kv && kv.value;
          if (!(property && mappedKey)) return query;

          var value;
          if (property === 'revenue') {
            value = (track.revenue() || 0).toFixed(2);
          } else {
            value = track.proxy('properties.' + property);
          }

          if (value !== undefined && value !== null) {
            query[mappedKey] = value;
          }

          return query;
        },
        {
          mt_id: event.mtId || '',
          mt_adid: event.mtAdId || '',
          v1: '',
          v2: '',
          v3: '',
          s1: '',
          s2: '',
          s3: ''
        },
        queryParamPropertyMap
      );

      self.load('conversion', { query: qs.stringify(query) });
    });
  };

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":595,"component-each":1112,"component-querystring":1118,"to-no-case":1171}],595:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":596,"./statics":597,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":598,"dup":40,"slug-component":1165}],596:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":600,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],597:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":601,"dup":42}],598:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":599,"_process":1149,"dup":43}],599:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":602}],600:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],601:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],602:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],603:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var alias = require('@segment/alias');
  var dates = require('@segment/convert-dates');
  var del = require('obj-case').del;
  var includes = require('@ndhoule/includes');
  var integration = require('@segment/analytics.js-integration');
  var iso = require('@segment/to-iso-string');
  var pick = require('@ndhoule/pick');
  var is = require('is');
  var indexOf = require('component-indexof');

  /**
   * Expose `Mixpanel` integration.
   */

  var Mixpanel = (module.exports = integration('Mixpanel')
    .global('mixpanel')
    .option('eventIncrements', [])
    .option('propIncrements', [])
    .option('peopleProperties', [])
    .option('superProperties', [])
    .option('cookieName', '')
    .option('crossSubdomainCookie', false)
    .option('secureCookie', false)
    .option('persistence', 'cookie')
    .option('nameTag', true)
    .option('pageview', false)
    .option('people', false)
    .option('token', '')
    .option('setAllTraitsByDefault', true)
    .option('consolidatedPageCalls', true)
    .option('trackAllPages', false)
    .option('trackNamedPages', false)
    .option('trackCategorizedPages', false)
    .option('groupIdentifierTraits', [])
    .option('sourceName', '')
    .option('enableEuropeanUnionEndpoint', false)
    .tag('<script src="//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js">'));

  /**
   * Options aliases.
   */

  var optionsAliases = {
    cookieName: 'cookie_name',
    crossSubdomainCookie: 'cross_subdomain_cookie',
    secureCookie: 'secure_cookie'
  };

  /**
   * Initialize.
   *
   * https://mixpanel.com/help/reference/javascript#installing
   * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.init
   *
   * @api public
   */

  Mixpanel.prototype.initialize = function() {
    /* eslint-disable */
    (function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+"=([^&]*)")))?l[1]:null};g&&c(g,"state")&&(i=JSON.parse(decodeURIComponent(c(g,"state"))),"mpeditor"===i.action&&(b.sessionStorage.setItem("_mpcehash",g),history.replaceState(i.desiredHash||"",e.title,j.pathname+j.search)))}catch(m){}var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(".");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,
  0)))}}var d=a;"undefined"!==typeof f?d=a[f]=[]:f="mixpanel";d.people=d.people||[];d.toString=function(b){var a="mixpanel";"mixpanel"!==f&&(a+="."+f);b||(a+=" (stub)");return a};d.people.toString=function(){return d.toString(1)+".people (stub)"};k="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
  for(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;}})(document,window.mixpanel||[]);
    /* eslint-enable */
    this.options.eventIncrements = lowercase(this.options.eventIncrements);
    this.options.propIncrements = lowercase(this.options.propIncrements);
    var options = alias(this.options, optionsAliases);
    if (this.options.enableEuropeanUnionEndpoint) {
      // https://developer.mixpanel.com/docs/implement-mixpanel#section-implementing-mixpanel-in-the-european-union-eu
      options.api_host = 'https://api-eu.mixpanel.com';
    }
    // tag ajs requests with Segment by request from Mixpanel team for better mutual debugging
    options.loaded = function(mixpanel) {
      mixpanel.register({ mp_lib: 'Segment: web' });
    };
    window.mixpanel.init(options.token, options);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Mixpanel.prototype.loaded = function() {
    return !!(window.mixpanel && window.mixpanel.config);
  };

  /**
   * Page.
   *
   * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.track_pageview
   *
   * @api public
   * @param {Page} page
   */

  Mixpanel.prototype.page = function(page) {
    var category = page.category();
    var name = page.name();
    var opts = this.options;

    // consolidated Page Calls
    if (opts.consolidatedPageCalls) {
      this.track(page.track());
      return;
    }

    // all pages
    if (opts.trackAllPages) {
      this.track(page.track());
      return;
    }

    // categorized pages
    if (opts.trackCategorizedPages && category) {
      // If this option is checked and name was also passed, used the full name which includes both category & name
      if (name) {
        this.track(page.track(page.fullName()));
        return;
      }
      this.track(page.track(category));
      return;
    }

    // named pages
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }
  };

  /**
   * Trait aliases.
   */

  var traitAliases = {
    created: '$created',
    email: '$email',
    firstName: '$first_name',
    lastName: '$last_name',
    lastSeen: '$last_seen',
    name: '$name',
    username: '$username',
    phone: '$phone'
  };

  /**
   * Identify.
   *
   * https://mixpanel.com/help/reference/javascript#super-properties
   * https://mixpanel.com/help/reference/javascript#user-identity
   * https://mixpanel.com/help/reference/javascript#storing-user-profiles
   *
   * @api public
   * @param {Identify} identify
   */

  Mixpanel.prototype.identify = function(identify) {
    var username = identify.username();
    var email = identify.email();
    var id = identify.userId();
    var setAllTraitsByDefault = this.options.setAllTraitsByDefault;
    var people = this.options.people;
    var peopleProperties = extendTraits(this.options.peopleProperties);
    var superProperties = this.options.superProperties;

    // id
    if (id) window.mixpanel.identify(id);

    // name tag
    var nametag = email || username || id;
    if (nametag) window.mixpanel.name_tag(nametag);

    var traits = identify.traits(traitAliases);
    if (traits.$created) del(traits, 'createdAt');
    traits = dates(traits, iso);

    // determine which traits to union to existing properties and which to set as new properties
    var traitsToUnion = {};
    var traitsToSet = {};
    for (var key in traits) {
      if (!traits.hasOwnProperty(key)) continue;

      var trait = traits[key];
      if (Array.isArray(trait) && trait.length > 0) {
        traitsToUnion[key] = trait;
        // since mixpanel doesn't offer a union method for super properties we have to do it manually by retrieving the existing list super property
        // from mixpanel and manually unioning to it ourselves
        var existingTrait = window.mixpanel.get_property(key);
        if (existingTrait && Array.isArray(existingTrait)) {
          traits[key] = unionArrays(existingTrait, trait);
        }
      } else {
        traitsToSet[key] = trait;
      }
    }

    if (setAllTraitsByDefault) {
      window.mixpanel.register(traits);
      if (people) {
        window.mixpanel.people.set(traitsToSet);
        window.mixpanel.people.union(traitsToUnion);
      }
    } else {
      // explicitly set select traits as people and super properties
      var mappedSuperProps = mapTraits(superProperties);
      var superProps = pick(mappedSuperProps || [], traits);
      if (!is.empty(superProps)) window.mixpanel.register(superProps);
      if (people) {
        var mappedPeopleProps = mapTraits(peopleProperties);
        var peoplePropsToSet = pick(mappedPeopleProps || [], traitsToSet);
        var peoplePropsToUnion = pick(mappedPeopleProps || [], traitsToUnion);
        if (!is.empty(peoplePropsToSet))
          window.mixpanel.people.set(peoplePropsToSet);
        if (!is.empty(peoplePropsToUnion))
          window.mixpanel.people.union(peoplePropsToUnion);
      }
    }
  };

  /**
   * Track.
   *
   * https://mixpanel.com/help/reference/javascript#sending-events
   * https://mixpanel.com/help/reference/javascript#tracking-revenue
   *
   * @api public
   * @param {Track} track
   */

  Mixpanel.prototype.track = function(track) {
    var eventIncrements = this.options.eventIncrements || this.options.increments; // TODO: remove settings.increments check, it's only here as we cutover from increments to eventIncrements
    var propIncrements = this.options.propIncrements;
    var eventLowercase = track.event().toLowerCase();
    var people = this.options.people;
    var props = track.properties();
    var revenue = track.revenue();
    // Don't map traits, clients should use identify instead.
    var superProps = pick(this.options.superProperties, props);
    var sourceName = this.options.sourceName;

    if (sourceName) props.segment_source_name = sourceName;

    // delete mixpanel's reserved properties, so they don't conflict
    delete props.distinct_id;
    delete props.ip;
    delete props.mp_name_tag;
    delete props.mp_note;
    delete props.token;

    props = dates(props, iso);
    invertObjectArrays(props);

    // Mixpanel People operations
    if (people) {
      // increment event count
      if (includes(eventLowercase, eventIncrements)) {
        window.mixpanel.people.increment(track.event());
        window.mixpanel.people.set('Last ' + track.event(), new Date());
      }
      // increment property counts
      for (var key in props) {
        if (!Object.prototype.hasOwnProperty.call(props, key)) {
          continue;
        }
        var prop = props[key];
        if (includes(key.toLowerCase(), propIncrements)) {
          window.mixpanel.people.increment(key, prop);
        }
      }
      // track revenue
      if (revenue) {
        window.mixpanel.people.track_charge(revenue);
      }
    }

    // track the event
    var query;
    if (props.link_query) {
      query = props.link_query; // DOM query
      delete props.link_query;
      window.mixpanel.track_links(query, track.event(), props);
    } else if (props.form_query) {
      // DOM query
      query = props.form_query;
      delete props.form_query;
      window.mixpanel.track_forms(query, track.event(), props);
    } else {
      window.mixpanel.track(track.event(), props);
    }

    // register super properties if present in context.mixpanel.superProperties
    if (!is.empty(superProps)) {
      window.mixpanel.register(superProps);
    }
  };

  /**
   * Alias.
   *
   * https://mixpanel.com/help/reference/javascript#user-identity
   * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.alias
   *
   * @api public
   * @param {Alias} alias
   */

  Mixpanel.prototype.alias = function(alias) {
    var mp = window.mixpanel;
    var to = alias.to();
    if (mp.get_distinct_id && mp.get_distinct_id() === to) return;
    // HACK: internal mixpanel API to ensure we don't overwrite
    if (mp.get_property && mp.get_property('$people_distinct_id') === to) return;
    // although undocumented, mixpanel takes an optional original id
    mp.alias(to, alias.from());
  };

  /**
   *
   * @param {Group} group
   */

  Mixpanel.prototype.group = function(group) {
    var groupIdentifierTraits = this.options.groupIdentifierTraits;
    var groupId = group.groupId();
    var userId = this.analytics.user().id();
    var traits = group.properties();
    if (!groupId || !userId || !groupIdentifierTraits.length) {
      return;
    }

    if (traits && Object.keys(traits).length) {
      for (var ind = 0; ind < groupIdentifierTraits.length; ind++) {
        window.mixpanel
          .get_group(groupIdentifierTraits[ind], groupId)
          .set_once(traits);
      }
    }
    for (var i = 0; i < groupIdentifierTraits.length; i++) {
      window.mixpanel.set_group(groupIdentifierTraits[i], [groupId]);
    }
  };

  /**
   * Lowercase the given `arr`.
   *
   * @api private
   * @param {Array} arr
   * @return {Array}
   */

  function lowercase(arr) {
    var ret = new Array(arr.length);

    for (var i = 0; i < arr.length; ++i) {
      ret[i] = String(arr[i]).toLowerCase();
    }

    return ret;
  }

  /**
   * Map Special traits in the given `arr`.
   * From the TraitAliases for Mixpanel's special props
   *
   * @api private
   * @param {Array} arr
   * @return {Array}
   */

  function mapTraits(arr) {
    var ret = new Array(arr.length);

    for (var i = 0; i < arr.length; ++i) {
      if (traitAliases.hasOwnProperty(arr[i])) {
        ret.push(traitAliases[arr[i]]);
      } else {
        ret.push(arr[i]);
      }
    }

    return ret;
  }

  /**
   * extend Mixpanel's special trait keys in the given `arr`.
   *
   * @api private
   * @param {Array} arr
   * @return {Array}
   */

  function extendTraits(arr) {
    var keys = [];

    for (var key in traitAliases) {
      if (traitAliases.hasOwnProperty(key)) {
        keys.push(key);
      }
    }

    for (var i = 0; i < keys.length; ++i) {
      if (indexOf(arr, keys[i]) < 0) {
        arr.push(keys[i]);
      }
    }

    return arr;
  }

  /**
   * Since Mixpanel doesn't support lists of objects, invert each list of objects to a set of lists of object properties.
   * Treats list transformation atomically, e.g. will only transform if EVERY item in list is an object
   *
   * @api private
   * @param {Object} props
   * @example
   * input: {products: [{sku: 32, revenue: 99}, {sku:2, revenue: 103}]}
   * output: {products_skus: [32, 2], products_revenues: [99, 103]}
   */

  function invertObjectArrays(props) {
    var properties = props;
    for (var propName in properties) {  // eslint-disable-line
      var propValue = properties[propName];
      if (!properties.hasOwnProperty(propName) || !Array.isArray(propValue)) {
        continue;
      }

      var invertedArrays = invertObjectArray(propName, propValue);
      if (Object.keys(invertedArrays).length !== 0) {
        // make sure obj isn't empty
        mergeArraysIntoObj(properties, invertedArrays);
        delete properties[propName];
      }
    }
  }

  // Example:
  // input: 'products', [{sku: 32, revenue: 99}, {sku:2, revenue: 103}]
  // output: {products_skus: [32, 2], products_revenues: [99, 103]}
  function invertObjectArray(propName, arr) {
    var invertedArrays = {};

    // invert object lists and collect into invertedLists
    for (var i = 0; i < arr.length; i++) {
      var elem = arr[i];

      // abort operation if non-object encountered in array
      if (typeof elem !== 'object') {
        return {};
      }
      for (var key in elem) {
        if (!elem.hasOwnProperty(key)) {
          continue;
        }
        var attrKey = propName + '_' + key + 's'; // e.g. products_skus

        // append to list if it exists or create new one if not
        if (attrKey in invertedArrays) {
          invertedArrays[attrKey].push(elem[key]);
        } else {
          invertedArrays[attrKey] = [elem[key]];
        }
      }
    }
    return invertedArrays;
  }

  function mergeArraysIntoObj(destination, source) {
    var d = destination;
    for (var arrayName in source) {
      if (source.hasOwnProperty(arrayName)) {
        var arr = source[arrayName];
        d[arrayName] = arrayName in d ? d[arrayName].concat(arr) : arr;
      }
    }
  }

  /**
   * Return union of two arrays
   * Pulled from https://stackoverflow.com/a/3629861
   *
   * @param {Array} x
   * @param {Array} y
   * @return {Array} res
   * @api private
   */

  function unionArrays(x, y) {
    var obj = {};
    // store items of each array as keys/values of obj, implicitly overwriting duplicates
    var i;
    for (i = 0; i < x.length; i++) {
      obj[x[i]] = x[i];
    }
    for (i = 0; i < y.length; i++) {
      obj[y[i]] = y[i];
    }
    return Object.keys(obj);
  }

  },{"@ndhoule/includes":15,"@ndhoule/pick":18,"@segment/alias":21,"@segment/analytics.js-integration":604,"@segment/convert-dates":1087,"@segment/to-iso-string":1103,"component-indexof":1116,"is":1131,"obj-case":1143}],604:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":605,"./statics":606,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],605:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":607,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],606:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":608,"dup":42}],607:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],608:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],609:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var del = require('obj-case').del;
  var each = require('@ndhoule/each');
  var when = require('do-when');
  var reject = require('reject');
  var find = require('obj-case').find;

  /**
   * Expose `MoEngage` integration.
   */

  var MoEngage = (module.exports = integration('MoEngage')
    .option('apiKey', '')
    .option('debugMode', false)
    .tag(
      '<script src="https://cdn.moengage.com/webpush/moe_webSdk.min.latest.js">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  MoEngage.prototype.initialize = function() {
    var self = this;
    // @hankim - modified this shim to use `t`, `q`, `f`, and `k` as closed variables to abide by strict mode
    /* eslint-disable */
    (function(i, s, o, g, r, a, m, n) {
      i['moengage_object'] = r;
      i['moengage_q'] = []; // @hankim added this since without this it means that this queue is created without having to wait for one of their methods
      var t = {};
      var q = function(f) {
        return function() {
          (i['moengage_q'] = i['moengage_q'] || []).push({
            f: f,
            a: arguments
          });
        };
      };
      var f = [
        'track_event',
        'add_user_attribute',
        'add_first_name',
        'add_last_name',
        'add_email',
        'add_mobile',
        'add_user_name',
        'add_gender',
        'add_birthday',
        'destroy_session',
        'add_unique_user_id',
        'moe_events',
        'call_web_push',
        'track'
      ];
      for (var k in f) {
        t[f[k]] = q(f[k]);
      }
      i['moe'] =
        i['moe'] ||
        function() {
          n = arguments[0];
          return t;
        };
    })(window, document, 'script', null, 'Moengage');
    /* eslint-enable */

    this.load(function() {
      when(self.loaded, function() {
        self._client = window.moe({
          app_id: self.options.apiKey,
          debug_logs: self.options.debugMode ? 1 : 0
        });
        // we need to store the current anonymousId for later use in `.identify()` to check if it's a new/existing user
        self.initializedAnonymousId = self.analytics.user().anonymousId();
        self.ready();
      });
    });
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  MoEngage.prototype.loaded = function() {
    return !!window.moeBannerText;
  };

  /**
   * Identify
   *
   * @api public
   */

  MoEngage.prototype.identify = function(identify) {
    var self = this;
    if (identify.userId()) this._client.add_unique_user_id(identify.userId());

    // send common traits
    // the partner sdk throws TypeErrors/Uncaughts if you pass `undefined`
    var traitsMethodMap = {
      firstName: 'first_name',
      lastName: 'last_name',
      email: 'email',
      phone: 'mobile',
      name: 'user_name',
      username: 'user_name',
      gender: 'gender',
      birthday: 'birthday',
      id: null // just to delete this from identify.traits()
    };
    var traits = reject(identify.traits()); // strip undefined/null

    each(function(value, key) {
      // handle username and name especially
      if (key === 'name') {
        // MoEngage asked to map `name` to `add_user_name` for their existing user base
        if (identify.name()) self._client.add_user_name(identify.name());
        if (identify.name() && identify.username())
          return self._client.add_user_attribute('username', identify.username()); // if they are sending `traits.name` as a semantic trait, there's no other way to get username other than as a custom user attribute
      }
      // check if there are sendable semantic traits
      if (find(traitsMethodMap, key)) {
        var method = 'add_' + traitsMethodMap[key];
        var trait = identify[key]();
        self._client[method](trait);
      }
    }, traits);

    // send custom traits so remove all semantic traits
    each(function(value, key) {
      del(traits, key);
    }, traitsMethodMap);

    each(function(value, key) {
      self._client.add_user_attribute(key, value);
    }, traits);
  };

  /**
   * Track
   *
   * @api public
   */

  MoEngage.prototype.track = function(track) {
    this._client.track_event(track.event(), track.properties());
  };

  MoEngage.prototype.alias = function(alias) {
    if (alias.to()) this._client.update_unique_user_id(alias.to());
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":610,"do-when":1125,"obj-case":1143,"reject":1150}],610:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":611,"./statics":612,"@ndhoule/defaults":8,"component-bind":1109,"debug":613,"dup":49,"extend":616,"slug-component":1165}],611:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],612:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":615,"dup":51}],613:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":614,"_process":1149,"dup":43}],614:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":617}],615:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],616:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],617:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],618:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var when = require('do-when');

  /**
   * Expose `Mojn`
   */

  var Mojn = (module.exports = integration('Mojn')
    .global('_mojnTrack')
    .option('customerCode', '')
    .option('region', 'eu')
    .option('sync', false)
    .tag('main', '<script src="https://cdn.idtargeting.com/track/{{region}}.js">')
    .tag(
      'custom',
      '<script src="https://cdn.idtargeting.com/track/{{customerCode}}.js">'
    )
    .tag(
      'identify',
      '<img width="1" height="1" src="https://matcher.idtargeting.com/identify.gif?cid={{cid}}&_mjnctid={{mjnctid}}">'
    )
    .tag(
      'sync',
      '<img width="1" height="1" src="http://ho.idtargeting.com/c/{{cid}}?u={{uid}}&_chk">'
    ));

  /**
   * Initialize.
   *
   * @api public
   * @param {Object} page
   */

  Mojn.prototype.initialize = function() {
    window._mojnTrack = window._mojnTrack || [];
    window._mojnTrack.push({ cid: this.options.customerCode });
    var loaded = bind(this, this.loaded);
    var ready = this.ready;
    var self = this;
    this.load('main', function() {
      self.load('custom', function() {
        when(loaded, ready);
      });
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Mojn.prototype.loaded = function() {
    return is.object(window._mojnTrack);
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   * @return {Element|undefined}
   */

  Mojn.prototype.identify = function(identify) {
    var email = identify.email();
    if (!email) return;

    this.load('identify', { cid: this.options.customerCode, mjnctid: email });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} event
   * @return {string}
   */

  Mojn.prototype.track = function(track) {
    var properties = track.properties();
    var revenue = properties.revenue;
    if (!revenue) return;
    var currency = properties.currency || '';
    var conv = currency + revenue;
    window._mojnTrack.push({ conv: conv });
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Mojn.prototype.page = function() {
    if (!this.options.sync) return;
    this.load('sync', {
      cid: this.options.customerCode,
      uid: this.analytics.user().anonymousId()
    });
  };

  },{"@segment/analytics.js-integration":619,"component-bind":1109,"do-when":1125,"is":1131}],619:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":620,"./statics":621,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],620:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":622,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],621:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":623,"dup":42}],622:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],623:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],624:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Track = require('segmentio-facade').Track;
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var mq = require('global-queue')('monetateQ');

  /**
   * Events.
   */

  var events = {
    productViewed: 'addItems',
    productAdded: 'addReviewRows',
    orderCompleted: 'addConversionRows'
  };

  /**
   * Expose `Monetate` integration.
   */

  var Monetate = (module.exports = integration('Monetate')
    .option('retail', false)
    .option('siteId', '')
    .option('domain', '')
    .option('events', events)
    .global('monetateQ'));

  /**
   * Initialize.
   *
   * @api public
   */

  Monetate.prototype.initialize = function() {
    if (this.options.retail) {
      this.options.events = {
        orderCompleted: 'addPurchaseRows',
        productViewed: 'addProductDetails',
        productListViewed: 'addProducts',
        productAdded: 'addCartRows'
      };
    }
    window.monetateQ = window.monetateQ || [];
    this.ready();
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  Monetate.prototype.loaded = function() {
    return !!window.monetateQ;
  };

  /**
   * Page.
   *
   * TODO: monetate only allows certain page types
   * http://support.monetate.com/hc/en-us/articles/201657776-Self-Integration-Guide
   *
   * @param {Page} page
   */

  Monetate.prototype.page = function(page) {
    push('setPageType', page.category() || page.name() || 'unknown');
  };

  /**
   * Product list viewed.
   *
   * @param {Track} track
   */

  Monetate.prototype.productListViewed = function(track) {
    var products = track.products();
    var items = [];

    each(products, function(product) {
      var track = new Track({ properties: product });
      var p = toProducts(track);
      items.push(p);
    });

    push(this.options.events.productListViewed, items);
  };

  /**
   * Product viewed.
   *
   * @param {Track} track
   */

  Monetate.prototype.productViewed = function(track) {
    var id = track.productId() || track.id();
    push(this.options.events.productViewed, [id]);
  };

  /**
   * Product added.
   *
   * @param {Track} track
   */

  Monetate.prototype.productAdded = function(track) {
    push(this.options.events.productAdded, [toProduct(track)]);
  };

  /**
   * Order completed.
   *
   * @param {Track} track
   */

  Monetate.prototype.orderCompleted = function(track) {
    var products = track.products();
    var orderId = track.orderId();
    var items = [];

    each(products, function(product) {
      var track = new Track({ properties: product });
      var p = toProduct(track);
      p.conversionId = orderId;
      items.push(p);
    });

    push(this.options.events.orderCompleted, items);
  };

  /**
   * Reformat a product list view into a Monetate-compatible format.
   *
   * @api private
   * @param {Track} track
   * @return {Object}
   */

  function toProducts(track) {
    return {
      itemId: track.productId() || track.id(),
      sku: track.sku()
    };
  }

  /**
   * Reformat a product into to a Monetate-compatible format.
   *
   * @api private
   * @param {Track} track
   * @return {Object}
   */

  function toProduct(track) {
    return {
      unitPrice: Number(track.price()).toFixed(2),
      quantity: track.quantity(),
      itemId: track.productId() || track.id(),
      sku: track.sku()
    };
  }

  /**
   * Push Monetate event(s) into the global Monetate queue and send it.
   *
   * Every `call` to monetate __must__ begin with
   * "setPageType" and __end__ with "trackData" we defer
   * "trackData" call, we defer "trackData" every time we push.
   *
   * @api private
   * @param {...Array} args
   */

  function push() {
    mq.apply(null, arguments);
    if (push.tid) return;
    push.tid = setTimeout(function() {
      clearTimeout(push.tid);
      mq('trackData');
      push.tid = null;
    });
  }

  },{"@segment/analytics.js-integration":625,"component-each":1112,"global-queue":1127,"segmentio-facade":1158}],625:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":626,"./statics":627,"@ndhoule/defaults":8,"component-bind":1109,"debug":628,"dup":49,"extend":631,"slug-component":1165}],626:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],627:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":630,"dup":51}],628:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":629,"_process":1149,"dup":43}],629:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":632}],630:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],631:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],632:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],633:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_mfq');

  /**
   * Expose `Mouseflow`.
   */

  var Mouseflow = (module.exports = integration('Mouseflow')
    .assumesPageview()
    .global('_mfq')
    .global('mouseflow')
    .global('mouseflowHtmlDelay')
    .option('apiKey', '')
    .option('mouseflowHtmlDelay', 0)
    .tag('<script src="//cdn.mouseflow.com/projects/{{ apiKey }}.js">'));

  /**
   * Initalize.
   *
   * @api public
   */

  Mouseflow.prototype.initialize = function() {
    window.mouseflowHtmlDelay = this.options.mouseflowHtmlDelay;
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Mouseflow.prototype.loaded = function() {
    return !!window.mouseflow;
  };

  /**
   * Page.
   *
   * http://mouseflow.zendesk.com/entries/22528817-Single-page-websites
   *
   * @api public
   * @param {Page} page
   */

  Mouseflow.prototype.page = function(page) {
    push('newPageView', page.path());
  };

  /**
   * Identify.
   *
   * http://mouseflow.zendesk.com/entries/24643603-Custom-Variables-Tagging
   *
   * @api public
   * @param {Identify} identify
   */

  Mouseflow.prototype.identify = function(identify) {
    set(identify.traits());
  };

  /**
   * Track.
   *
   * http://mouseflow.zendesk.com/entries/24643603-Custom-Variables-Tagging
   *
   * @api public
   * @param {Track} track
   */

  Mouseflow.prototype.track = function(track) {
    var props = track.properties();
    props.event = track.event();
    set(props);
  };

  /**
   * Push each key and value in the given `obj` onto the queue.
   *
   * @api private
   * @param {Object} obj
   */

  function set(obj) {
    each(obj, function(key, value) {
      push('setVariable', key, value);
    });
  }

  },{"@segment/analytics.js-integration":634,"component-each":1112,"global-queue":1127}],634:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":635,"./statics":636,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":1126,"slug-component":1165}],635:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],636:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":637,"dup":51}],637:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],638:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var useHttps = require('use-https');

  /**
   * Expose `MouseStats` integration.
   */

  var MouseStats = (module.exports = integration('MouseStats')
    .assumesPageview()
    .global('msaa')
    .global('MouseStatsVisitorPlaybacks')
    .option('accountNumber', '')
    .tag(
      'http',
      '<script src="http://www2.mousestats.com/js/{{ path }}.js?{{ cacheBuster }}">'
    )
    .tag(
      'https',
      '<script src="https://ssl.mousestats.com/js/{{ path }}.js?{{ cacheBuster }}">'
    ));

  /**
   * Initialize.
   *
   * http://www.mousestats.com/docs/pages/allpages
   *
   * @api public
   */

  MouseStats.prototype.initialize = function() {
    var accountNumber = this.options.accountNumber;
    var path =
      accountNumber.slice(0, 1) +
      '/' +
      accountNumber.slice(1, 2) +
      '/' +
      accountNumber;
    var cacheBuster = Math.floor(new Date().getTime() / 60000);
    var tagName = useHttps() ? 'https' : 'http';
    this.load(tagName, { path: path, cacheBuster: cacheBuster }, this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  MouseStats.prototype.loaded = function() {
    return is.array(window.MouseStatsVisitorPlaybacks);
  };

  /**
   * Identify.
   *
   * http://www.mousestats.com/docs/wiki/7/how-to-add-custom-data-to-visitor-playbacks
   *
   * @api public
   * @param {Identify} identify
   */

  MouseStats.prototype.identify = function(identify) {
    each(identify.traits(), function(key, value) {
      window.MouseStatsVisitorPlaybacks.customVariable(key, value);
    });
  };

  },{"@segment/analytics.js-integration":639,"component-each":1112,"is":1131,"use-https":1180}],639:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":640,"./statics":641,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],640:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":642,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],641:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":643,"dup":42}],642:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],643:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],644:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var Track = require('segmentio-facade').Track;
  var integration = require('@segment/analytics.js-integration');
  var normalize = require('to-no-case');
  var qs = require('component-querystring');
  var sha256 = require('js-sha256');

  /**
   * Expose `Nanigans`.
   */

  var Nanigans = (module.exports = integration('Nanigans')
    .option('appId', '')
    .option('events', {})
    .tag(
      'page',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type=visit&name=landing">'
    )
    .tag(
      'track',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type={{ type }}&name={{ name }}&user_id={{ userId }}&ut1={{ ut1 }}">'
    )
    .tag(
      'track_no_user_id',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type={{ type }}&name={{ name }}&ut1={{ ut1 }}">'
    )
    .tag(
      'product',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type=purchase&name={{ name }}&user_id={{ userId }}&ut1={{ ut1 }}&sku={{ sku }}">'
    )
    .tag(
      'add_to_cart',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type=user&name={{ name }}&user_id={{ userId }}&ut1={{ ut1 }}&{{ products }}">'
    )
    .tag(
      'add_to_cart_no_user_id',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type=user&name={{ name }}&ut1={{ ut1 }}&{{ products }}">'
    )
    .tag(
      'purchase',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type={{ type }}&name={{ name }}&user_id={{ userId }}&ut1={{ ut1 }}&unique={{ orderId }}&{{ products }}">'
    )
    .tag(
      'purchase_no_user_id',
      '<img src="//api.nanigans.com/event.php?app_id={{ appId }}&type={{ type }}&name={{ name }}&ut1={{ ut1 }}&unique={{ orderId }}&{{ products }}">'
    ));

  /**
   * Initialize.
   *
   * https://s3.amazonaws.com/segmentio/docs/integrations/nanigans/docs.html
   *
   * @api public
   */

  Nanigans.prototype.initialize = function() {
    // TODO: assert nan_pid URL parameter is present.
    this.ready();
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Nanigans.prototype.loaded = function() {
    // We load Nanigans pixels on conversions, so we don't need to preload anything
    return true;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Nanigans.prototype.page = function() {
    this.load('page');
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Nanigans.prototype.track = function(track) {
    var user = this.analytics.user();

    var events = get(this.options.events, track.event());
    if (!events.length) return;
    var products = track.products();
    var data = {};

    data.app_id = this.options.appId;
    data.user_id = user.id();
    data.unique = track.orderId();
    data.sku = Array(products.length);
    data.qty = Array(products.length);
    data.value = Array(products.length);

    // see readme comment
    if (email(user) != null) {
      data.ut1 = sha256(email(user));
    }

    for (var i = 0; i < products.length; i++) {
      var item = new Track({ properties: products[i] });
      data.qty[i] = item.quantity();
      data.sku[i] = item.sku();
      data.value[i] = item.price();
    }

    // some events may create multiple pixels.
    for (var j = 0; j < events.length; j++) {
      var event = events[j];
      var params = {
        appId: data.app_id,
        name: renderByProxy(event.name, track),
        type: event.type,
        ut1: data.ut1,
        products: {}
      };
      if (data.user_id) params.userId = data.user_id;

      switch (event.type) {
        case 'purchase':
          params.orderId = data.unique;
          params.products.qty = data.qty;
          params.products.value = data.value;
          params.products.sku = data.sku;
          params.products = qs.stringify(params.products);
          if (params.userId) {
            this.load('purchase', params);
          } else {
            this.load('purchase_no_user_id', params);
          }
          break;
        case 'user':
          switch (event.name) {
            case 'product':
              params.sku = data.sku;
              break;
            case 'add_to_cart':
              params.products.qty = data.qty;
              params.products.value = data.value;
              params.products.sku = data.sku;
              params.products = qs.stringify(params.products);
              if (params.userId) {
                this.load('add_to_cart', params);
              } else {
                this.load('add_to_cart_no_user_id', params);
              }
              break;
            default:
              if (params.userId) {
                this.load('track', params);
              } else {
                this.load('track_no_user_id', params);
              }
              break;
          }
          break;
        default:
          if (params.userId) {
            this.load('track', params);
          } else {
            this.load('track_no_user_id', params);
          }
          break;
      }
    }
  };

  /**
   * Get an event of `name`.
   *
   * Given something like this:
   *
   * [
   *   { key: 'a', value: { type: 'user', name: 'register' } }
   *   { key: 'a', value: { type: 'user', name: 'invite' } }
   *   { key: 'b', value: { type: 'purchase', name: 'main' } }
   * ]
   *
   * If you do `get(events, 'a')`, it wll give you:
   *
   * [
   *   { type: 'user', name: 'register' },
   *   { type: 'user', name: 'invite' }
   * ]
   *
   * @param {Array} events
   * @param {String} name
   * @return {Object}
   */

  function get(events, name) {
    var a = normalize(name);
    var ret = [];

    for (var i = 0; i < events.length; ++i) {
      var b = normalize(events[i].key || events[i].event);
      if (b === a) ret.push(events[i].value || events[i]);
    }

    return ret;
  }

  /**
   * Get email from user.
   *
   * @param {Object} user
   * @return {String}
   */

  function email(user) {
    var identify = new Identify({ userId: user.id(), traits: user.traits() });
    return identify.email();
  }

  /**
   * Render Nanigans event name from template.
   *
   * @param {Object} user
   * @return {String}
   */

  function renderByProxy(template, facade) {
    return template.replace(/\{\{\ *(\w+?[\.\w+]*?)\ *\}\}/g, function(_, $1) {
      return facade.proxy($1) || '';
    });
  }

  },{"@segment/analytics.js-integration":645,"component-querystring":1118,"js-sha256":1133,"segmentio-facade":1158,"to-no-case":651}],645:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":646,"./statics":647,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],646:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":649,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":648}],647:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":650,"dup":42}],648:[function(require,module,exports){
  arguments[4][384][0].apply(exports,arguments)
  },{"dup":384}],649:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],650:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],651:[function(require,module,exports){
  arguments[4][388][0].apply(exports,arguments)
  },{"dup":388}],652:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('__nls');

  /**
   * Expose `Navilytics` integration.
   */

  var Navilytics = (module.exports = integration('Navilytics')
    .assumesPageview()
    .global('__nls')
    .option('memberId', '')
    .option('projectId', '')
    .tag(
      '<script src="//www.navilytics.com/nls.js?mid={{ memberId }}&pid={{ projectId }}">'
    ));

  /**
   * Initialize.
   *
   * https://www.navilytics.com/member/code_settings
   *
   * @api public
   */

  Navilytics.prototype.initialize = function() {
    window.__nls = window.__nls || [];
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Navilytics.prototype.loaded = function() {
    return !!(window.__nls && Array.prototype.push !== window.__nls.push);
  };

  /**
   * Track.
   *
   * https://www.navilytics.com/docs#tags
   *
   * @param {Track} track
   */

  Navilytics.prototype.track = function(track) {
    push('tagRecording', track.event());
  };

  },{"@segment/analytics.js-integration":653,"global-queue":1127}],653:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":654,"./statics":655,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],654:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":656,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],655:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":657,"dup":42}],656:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],657:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],658:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var find = require('obj-case').find;
  var reject = require('reject');
  var dateformat = require('dateformat');
  var sha256 = require('js-sha256');

  /**
   * Expose `NielsenDCR` integration.
   */

  var NielsenDCR = (module.exports = integration('Nielsen DCR')
    .option('appId', '')
    .option('instanceName', '') // the snippet lets you override the instance so make sure you don't have any global window props w same value as this setting unless you are intentionally doing that.
    .option('nolDevDebug', false)
    .option('assetIdPropertyName', '') // deprecated
    .option('contentAssetIdPropertyName', '')
    .option('adAssetIdPropertyName', '')
    .option('subbrandPropertyName', '')
    .option('clientIdPropertyName', '')
    .option('customSectionProperty', '')
    .option('sendCurrentTimeLivestream', false)
    .option('contentLengthPropertyName', 'total_length')
    .option('optout', false)
    .tag(
      'http',
      '<script src="http://cdn-gl.imrworldwide.com/conf/{{ appId }}.js#name={{ instanceName }}&ns=NOLBUNDLE">'
    )
    .tag(
      'https',
      '<script src="https://cdn-gl.imrworldwide.com/conf/{{ appId }}.js#name={{ instanceName }}&ns=NOLBUNDLE">'
    ));

  /**
   * Initialize.
   * https://engineeringportal.nielsen.com/docs/DCR_Video_Browser_SDK
   * @api public
   */

  NielsenDCR.prototype.initialize = function() {
    var protocol =
      window.location.protocol === 'https:' ||
      window.location.protocol === 'chrome-extension:'
        ? 'https'
        : 'http';
    var config = {};

    /* eslint-disable */
    !function(t,n)
    {
    t[n]=t[n]||
    {
      nlsQ:function(e,o,c,r,s,i)
      {
       return t[n][o]=t[n][o]||{g:c||{},
       ggPM:function(e,c,r,s,i){(t[n][o].q=t[n][o].q||[]).push([e,c,r,s,i])}},t[n][o]
      }
    }
  }
    (window,"NOLBUNDLE");
    /* eslint-enable */

    // debug mode
    if (this.options.nolDevDebug) config.nol_sdkDebug = 'debug';
    if (this.options.optout) config.optout = true;
    this._client = window.NOLBUNDLE.nlsQ(
      this.options.appId,
      this.options.instanceName,
      config
    );
    // we will need to keep our own state of the playhead position mapped to its corresponding assetId
    // for the currently viewing ad or content so that we can handle video switches in the same session
    this.currentAssetId = null;
    this.currentPosition = 0;
    this.isDCRStream = false;
    this.heartbeatId = null; // reference to setTimeout
    this.load(protocol, this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  NielsenDCR.prototype.loaded = function() {
    return this._client && typeof this._client.ggPM === 'function';
  };

  /**
   * Page
   *
   * Static measurement (not video spec)
   * https://engineeringportal.nielsen.com/docs/DCR_Static_Browser_SDK_(6.0.0)
   */

  NielsenDCR.prototype.page = function(page) {
    var integrationOpts = page.options(this.name);
    var customSectionName;

    //Allow customer to pick property to source section from otherwise fallback on page name
    if (this.options.customSectionProperty) {
      customSectionName = page.proxy(
        'properties.' + this.options.customSectionProperty
      );
    }
    var defaultSectionName = page.fullName() || page.name() || page.event();
    var sectionName = customSectionName || defaultSectionName;
    var url = page.url();

    var staticMetadata = reject({
      type: 'static',
      assetid: sha256(url), // *DYNAMIC METADATA*: unique ID for each article, deterministic SHA256 hash of url since assetid cannot contain special characters **REQUIRED**
      section: sectionName, // *DYNAMIC METADATA*: section of site **REQUIRED**
      segA: integrationOpts.segA, // *DYNAMIC METADATA*: custom segment
      segB: integrationOpts.segB, // *DYNAMIC METADATA*: custom segment
      segC: integrationOpts.segC // *DYNAMIC METADATA*: custom segment
    });

    this._client.ggPM('staticstart', staticMetadata);
  };

  /**
   * Nielsen Heartbeat Counter
   * We need to send the playhead position every 1 second
   */

  NielsenDCR.prototype.heartbeat = function(assetId, position, livestream) {
    var self = this;
    // if position is not sent as a string
    try {
      if (typeof position !== 'number') {
        position = parseInt(position, 10); /* eslint-disable-line */
      }
    } catch (e) {
      // if we can't parse position into an Int for some reason, early return
      // to prevent internal errors every second
      return;
    }

    // we need to map the current position to the content asset id to handle content changes during the same playback session
    if (assetId && this.currentAssetId !== assetId) {
      this.currentAssetId = assetId;
    }

    if (livestream) {
      // for livestream events, we calculate a unix timestamp based on the current time an offset value, which should be passed in properties.position
      this.currentPosition = getOffsetTime(position, self.options);
    } else if (position >= 0) {
      // this.currentPosition defaults to 0 upon initialization
      this.currentPosition = position;
    }
    this.heartbeatId = setInterval(function() {
      self._client.ggPM('setPlayheadPosition', self.currentPosition);
      self.currentPosition++;
    }, 1000);
  };

  /**
   * Get video content metadata from track event
   *
   * @api private
   */

  NielsenDCR.prototype.getContentMetadata = function(track, type) {
    var propertiesPath = 'properties.';
    if (type && type === 'contentEvent') propertiesPath = 'properties.content.';

    var integrationOpts = track.options(this.name);
    var adLoadType = formatLoadType(integrationOpts, track, propertiesPath);
    // adLoadType will be falsy if the `load_type` is NOT 'dynamic' (i.e. it IS 'linear' instead)
    // we bubble up false to the calling content/playback method so we can early return, as
    // DCR should not be tracking ratings for content of `load_type` 'linear'
    if (!adLoadType) return;
    this.isDCRStream = true;

    var customAssetId;
    if (this.options.contentAssetIdPropertyName) {
      customAssetId = track.proxy(
        propertiesPath + this.options.contentAssetIdPropertyName
      );
    }
    var assetIdProp =
      track.proxy(propertiesPath + 'content_asset_id') ||
      track.proxy(propertiesPath + 'asset_id');
    var assetId = customAssetId || assetIdProp;
    var contentMetadata = {
      type: 'content',
      assetid: assetId,
      program: track.proxy(propertiesPath + 'program'),
      title: track.proxy(propertiesPath + 'title'),
      isfullepisode: track.proxy(propertiesPath + 'full_episode') ? 'y' : 'n',
      mediaURL: track.proxy('context.page.url'),
      airdate: formatAirdate(track.proxy(propertiesPath + 'airdate')),
      adloadtype: adLoadType,
      // below metadata fields must all be set in event's integrations opts object
      crossId1: find(integrationOpts, 'crossId1'),
      crossId2: find(integrationOpts, 'crossId2'),
      hasAds: find(integrationOpts, 'hasAds') === true ? '1' : '0'
    };

    if (this.options.contentLengthPropertyName && this.options.contentLengthPropertyName !== 'total_length') {
      var contentLengthKey = this.options.contentLengthPropertyName;
      contentMetadata.length = track.proxy(propertiesPath + contentLengthKey);
    } else {
      contentMetadata.length = track.proxy(propertiesPath + 'total_length');
    }
    // if length is any falsy value after the above checks, default to 0 length per Nielsen
    contentMetadata.length = contentMetadata.length || 0;

    if (this.options.subbrandPropertyName) {
      var subbrandProp = this.options.subbrandPropertyName;
      contentMetadata.subbrand = track.proxy(propertiesPath + subbrandProp);
    }

    if (this.options.clientIdPropertyName) {
      var clientIdProp = this.options.clientIdPropertyName;
      contentMetadata.clientid = track.proxy(propertiesPath + clientIdProp);
    }

    // optional: used for grouping data into different buckets
    var segB = find(integrationOpts, 'segB');
    var segC = find(integrationOpts, 'segC');
    if (segB) contentMetadata.segB = segB;
    if (segC) contentMetadata.segC = segC;

    return reject(contentMetadata);
  };

  /**
   * Get ad metadata from track event
   *
   * @api private
   */

  NielsenDCR.prototype.getAdMetadata = function(track) {
    var integrationOpts = track.options(this.name);
    var adLoadType = formatLoadType(integrationOpts, track, 'properties');
    if (!adLoadType) return;

    var type = track.proxy('properties.type');
    if (typeof type === 'string') type = type.replace('-', '');

    var customAssetId;
    if (this.options.adAssetIdPropertyName) {
      customAssetId = track.proxy(
        'properties.' + this.options.adAssetIdPropertyName
      );
    }
    var assetIdProp =
      track.proxy('properties.ad_asset_id') || track.proxy('properties.asset_id');
    var assetId = customAssetId || assetIdProp;
    var adMetadata = {
      assetid: assetId,
      type: type || 'ad'
    };

    return adMetadata;
  };

  /**
   * Video Content Started
   *
   * @api public
   */

  NielsenDCR.prototype.videoContentStarted = function(track) {
    clearInterval(this.heartbeatId);

    var contentMetadata = this.getContentMetadata(track);
    if (!contentMetadata) return;
    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');

    // Nielsen requires that you call `end` if you need to load new content during the same session.
    // Since we always keep track of the current last seen asset to the instance, if this event has a different assetId, we assume that it is content switch during the same session
    // Segment video spec states that if you are switching between videos, you should be properly calling this event at the start of each of those switches (ie. two video players on the same page), meaning we only have to check this for this event
    if (
      this.currentAssetId &&
      contentMetadata.assetid &&
      this.currentAssetId !== contentMetadata.assetid
    ) {
      this._client.ggPM('end', this.currentPosition);
    }

    this._client.ggPM('loadMetadata', contentMetadata);
    this.heartbeat(contentMetadata.assetid, position, livestream);
  };

  /**
   * Video Content Playing
   *
   * @api public
   */

  NielsenDCR.prototype.videoContentPlaying = function(track) {
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var assetId = this.options.contentAssetIdPropertyName
      ? track.proxy('properties.' + this.options.contentAssetIdPropertyName)
      : track.proxy('properties.asset_id');
    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');

    this.heartbeat(assetId, position, livestream);
  };

  /**
   * Video Content Completed
   *
   * @api public
   */

  NielsenDCR.prototype.videoContentCompleted = function(track) {
    var self = this;

    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');

    if (livestream) position = getOffsetTime(position, self.options);

    this._client.ggPM('setPlayheadPosition', position);
    this._client.ggPM('stop', position);
  };

  /**
   * Video Ad Started
   *
   * @api public
   */

  NielsenDCR.prototype.videoAdStarted = function(track) {
    clearInterval(this.heartbeatId);

    var type = track.proxy('properties.type');
    if (typeof type === 'string') type = type.replace('-', '');
    // edge case: if pre-roll, you must load the content metadata first
    // because nielsen ties ad attribution to the content not playback session
    var contentMetadata = {};
    if (type === 'preroll') {
      contentMetadata = this.getContentMetadata(track, 'contentEvent');
      if (!contentMetadata) return;
      this._client.ggPM('loadMetadata', contentMetadata);
    }

    if (!this.isDCRStream) return;

    var adAssetId = this.options.adAssetIdPropertyName
      ? track.proxy('properties.' + this.options.adAssetIdPropertyName)
      : track.proxy('properties.asset_id');
    var position = track.proxy('properties.position');

    var adMetadata = {
      assetid: adAssetId,
      type: type || 'ad'
    };

    this._client.ggPM('loadMetadata', adMetadata);
    // contentMetadata may be an empty object below, but that's ok
    // in this case, the assetId will be passed as `undefined` to the `heartbeat` method, b/c we only
    // need an assetid if a content assetid is set in properties or content.properties
    this.heartbeat(contentMetadata.assetid, position);
  };

  /**
   * Video Ad Playing
   *
   * @api public
   */

  NielsenDCR.prototype.videoAdPlaying = function(track) {
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var position = track.proxy('properties.position');
    // first argument below is "null" b/c `heartbeat` doesn't need to keep track of ad asset ids
    // BUT we do still want to keep track of "position"
    this.heartbeat(null, position);
  };

  /**
   * Video Ad Completed
   *
   * @api public
   */

  NielsenDCR.prototype.videoAdCompleted = function(track) {
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var position = track.proxy('properties.position');

    this._client.ggPM('setPlayheadPosition', position);
    this._client.ggPM('stop', position);
  };

  /**
   * Video Playback Paused
   * Video Playback Seek Started
   * Video Playback Buffer Started
   * Video Playback Interrupted
   * Video Playback Exited
   *
   * @api public
   */

  NielsenDCR.prototype.videoPlaybackPaused = NielsenDCR.prototype.videoPlaybackSeekStarted = NielsenDCR.prototype.videoPlaybackBufferStarted = NielsenDCR.prototype.videoPlaybackInterrupted = NielsenDCR.prototype.videoPlaybackExited = function(
    track
  ) {
    var self = this;
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');

    if (livestream) position = getOffsetTime(position, self.options);

    this._client.ggPM('stop', position);
  };

  /**
   * Video Playback Resumed
   * Video Playback Seek Completed
   * Video Playback Buffer Completed
   *
   * @api public
   */

  NielsenDCR.prototype.videoPlaybackResumed = NielsenDCR.prototype.videoPlaybackSeekCompleted = NielsenDCR.prototype.videoPlaybackBufferCompleted = function(
    track
  ) {
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var contentAssetId = this.options.contentAssetIdPropertyName
      ? track.proxy('properties.' + this.options.contentAssetIdPropertyName)
      : track.proxy('properties.content_asset_id');
    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');
    // if properly implemented, the point in which the playback is resumed
    // you should _only_ be sending the asset_id of whatever you are resuming in: content or ad
    var type = contentAssetId ? 'content' : 'ad';

    if (
      this.currentAssetId &&
      contentAssetId &&
      this.currentAssetId !== contentAssetId
    ) {
      // first, call `end` because we assume the user has buffered/seeked into new content if the assetId has changed
      this._client.ggPM('end', this.currentPosition);

      if (type === 'ad') {
        var adMetadata = this.getAdMetadata(track);
        if (!adMetadata) return;
        this._client.ggPM('loadMetadata', adMetadata);
      } else if (type === 'content') {
        var contentMetadata = this.getContentMetadata(track, 'contentEvent');
        if (!contentMetadata) return;
        this._client.ggPM('loadMetadata', contentMetadata);
      }
    }

    this.heartbeat(contentAssetId, position, livestream);
  };

  /**
   * Video Playback Completed
   *
   *
   * @api public
   */

  NielsenDCR.prototype.videoPlaybackCompleted = function(
    track
  ) {
    var self = this;
    clearInterval(this.heartbeatId);
    if (!this.isDCRStream) return;

    var position = track.proxy('properties.position');
    var livestream = track.proxy('properties.livestream');

    if (livestream) position = getOffsetTime(position, self.options);

    this._client.ggPM('setPlayheadPosition', position);
    this._client.ggPM('end', position);

    // reset state because "Video Playback Completed" are "non-recoverable events"
    // e.g. they should always be followed by the start of a new video session with either
    // "Video Content Started" or "Video Ad Started" events
    this.currentPosition = 0;
    this.currentAssetId = null;
    this.isDCRStream = false;
    this.heartbeatId = null;
  };

  /**
   * Formats airdate property per Nielsen DCR spec.
   * Nielsen DCR requires dates to be in format YYYYMMDD HH:MI:SS
   *
   * @api private
   */

  function formatAirdate(airdate) {
    var date;
    try {
      date = dateformat(airdate, 'yyyymmdd hh:MM:ss', true);
    } catch (e) {
      // do nothing with this error for now
    }
    return date;
  }

  /**
   * Falls back to check `properties.load_type` if
   * `integrationsOpts.ad_load_type` is falsy
   *
   * @api private
   */

  function formatLoadType(integrationOpts, track, propertiesPath) {
    var loadType =
      find(integrationOpts, 'ad_load_type') ||
      track.proxy(propertiesPath + 'load_type') ||
      track.proxy(propertiesPath + 'loadType');
    // DCR is meant to track videos with ad `load_type` dynamic only
    // otherwise, we return `false` so we can easily early return in the calling method
    loadType = loadType === 'dynamic' ? '2' : false;
    return loadType;
  }

  /**
   * Transforms Segment timestamp into Unix date,
   * seconds since epoch, in UTC. This method also
   * handles offsets for livestreams, if applicable.
   *
   * @param {*} position Should be negative int representing livestream offset
   * @param {*} options Integration settings
   * @returns {Number} Unix timestamp in seconds
   *
   * @api private
   */

  function getOffsetTime(position, options) {
    var date = Math.floor(Date.now() / 1000);
    if (!position || options.sendCurrentTimeLivestream) return date;

    try {
      if (typeof position !== 'number') {
        position = parseInt(position, 10); /* eslint-disable-line */
      }
    } catch (e) {
      // if we can't parse position into an Int for some reason, simply return
      // the current unix timestamp
      return date;
    }

    return date + position;
  }

  },{"@segment/analytics.js-integration":659,"dateformat":664,"js-sha256":1133,"obj-case":1143,"reject":1150}],659:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":660,"./statics":661,"@ndhoule/defaults":8,"component-bind":1109,"debug":662,"dup":49,"extend":666,"slug-component":1165}],660:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],661:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":665,"dup":51}],662:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":663,"_process":1149,"dup":43}],663:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":667}],664:[function(require,module,exports){
  /*
   * Date Format 1.2.3
   * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
   * MIT license
   *
   * Includes enhancements by Scott Trenda <scott.trenda.net>
   * and Kris Kowal <cixar.com/~kris.kowal/>
   *
   * Accepts a date, a mask, or a date and a mask.
   * Returns a formatted version of the given date.
   * The date defaults to the current date/time.
   * The mask defaults to dateFormat.masks.default.
   */

  (function(global) {
    'use strict';

    var dateFormat = (function() {
        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
        var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
        var timezoneClip = /[^-+\dA-Z]/g;

        // Regexes and supporting functions are cached through closure
        return function (date, mask, utc, gmt) {

          // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
          if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
            mask = date;
            date = undefined;
          }

          date = date || new Date;

          if(!(date instanceof Date)) {
            date = new Date(date);
          }

          if (isNaN(date)) {
            throw TypeError('Invalid date');
          }

          mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);

          // Allow setting the utc/gmt argument via the mask
          var maskSlice = mask.slice(0, 4);
          if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
            mask = mask.slice(4);
            utc = true;
            if (maskSlice === 'GMT:') {
              gmt = true;
            }
          }

          var _ = utc ? 'getUTC' : 'get';
          var d = date[_ + 'Date']();
          var D = date[_ + 'Day']();
          var m = date[_ + 'Month']();
          var y = date[_ + 'FullYear']();
          var H = date[_ + 'Hours']();
          var M = date[_ + 'Minutes']();
          var s = date[_ + 'Seconds']();
          var L = date[_ + 'Milliseconds']();
          var o = utc ? 0 : date.getTimezoneOffset();
          var W = getWeek(date);
          var N = getDayOfWeek(date);
          var flags = {
            d:    d,
            dd:   pad(d),
            ddd:  dateFormat.i18n.dayNames[D],
            dddd: dateFormat.i18n.dayNames[D + 7],
            m:    m + 1,
            mm:   pad(m + 1),
            mmm:  dateFormat.i18n.monthNames[m],
            mmmm: dateFormat.i18n.monthNames[m + 12],
            yy:   String(y).slice(2),
            yyyy: y,
            h:    H % 12 || 12,
            hh:   pad(H % 12 || 12),
            H:    H,
            HH:   pad(H),
            M:    M,
            MM:   pad(M),
            s:    s,
            ss:   pad(s),
            l:    pad(L, 3),
            L:    pad(Math.round(L / 10)),
            t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],
            tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],
            T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],
            TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],
            Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
            o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
            S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
            W:    W,
            N:    N
          };

          return mask.replace(token, function (match) {
            if (match in flags) {
              return flags[match];
            }
            return match.slice(1, match.length - 1);
          });
        };
      })();

    dateFormat.masks = {
      'default':               'ddd mmm dd yyyy HH:MM:ss',
      'shortDate':             'm/d/yy',
      'mediumDate':            'mmm d, yyyy',
      'longDate':              'mmmm d, yyyy',
      'fullDate':              'dddd, mmmm d, yyyy',
      'shortTime':             'h:MM TT',
      'mediumTime':            'h:MM:ss TT',
      'longTime':              'h:MM:ss TT Z',
      'isoDate':               'yyyy-mm-dd',
      'isoTime':               'HH:MM:ss',
      'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
      'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
      'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
    };

    // Internationalization strings
    dateFormat.i18n = {
      dayNames: [
        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
      ],
      monthNames: [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
      ],
      timeNames: [
        'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'
      ]
    };

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  /**
   * Get the ISO 8601 week number
   * Based on comments from
   * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
   *
   * @param  {Object} `date`
   * @return {Number}
   */
  function getWeek(date) {
    // Remove time components of date
    var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

    // Change date to Thursday same week
    targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

    // Take January 4th as it is always in week 1 (see ISO 8601)
    var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

    // Change date to Thursday same week
    firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

    // Check if daylight-saving-time-switch occurred and correct for it
    var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
    targetThursday.setHours(targetThursday.getHours() - ds);

    // Number of weeks between target Thursday and first Thursday
    var weekDiff = (targetThursday - firstThursday) / (86400000*7);
    return 1 + Math.floor(weekDiff);
  }

  /**
   * Get ISO-8601 numeric representation of the day of the week
   * 1 (for Monday) through 7 (for Sunday)
   *
   * @param  {Object} `date`
   * @return {Number}
   */
  function getDayOfWeek(date) {
    var dow = date.getDay();
    if(dow === 0) {
      dow = 7;
    }
    return dow;
  }

  /**
   * kind-of shortcut
   * @param  {*} val
   * @return {String}
   */
  function kindOf(val) {
    if (val === null) {
      return 'null';
    }

    if (val === undefined) {
      return 'undefined';
    }

    if (typeof val !== 'object') {
      return typeof val;
    }

    if (Array.isArray(val)) {
      return 'array';
    }

    return {}.toString.call(val)
      .slice(8, -1).toLowerCase();
  };



    if (typeof define === 'function' && define.amd) {
      define(function () {
        return dateFormat;
      });
    } else if (typeof exports === 'object') {
      module.exports = dateFormat;
    } else {
      global.dateFormat = dateFormat;
    }
  })(this);

  },{}],665:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],666:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],667:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],668:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `NielsenDTVR` integration.
   */

  var NielsenDTVR = (module.exports = integration('Nielsen DTVR')
    .option('appId', '')
    .option('instanceName', '')
    .option('id3Property', 'id3')
    .option('sendId3Events', [])
    .option('debug', false) // per Nielsen, customers should NOT ever enable in a production environment
    .option('optout', false)
    .tag(
      'http',
      '<script src="http://cdn-gl.imrworldwide.com/conf/{{ appId }}.js#name={{ instanceName }}&ns=NOLBUNDLE">'
    )
    .tag(
      'https',
      '<script src="https://cdn-gl.imrworldwide.com/conf/{{ appId }}.js#name={{ instanceName }}&ns=NOLBUNDLE">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  NielsenDTVR.prototype.initialize = function() {
    var protocol =
      window.location.protocol === 'https:' ||
      window.location.protocol === 'chrome-extension:'
        ? 'https'
        : 'http';
    var config = {};
    this.ID3 = null;
    this.previousEvent = null;
    this.isDTVRStream = false;

    // Modified Nielsen snippet. It shouldn't load the Nielsen tag, but it should
    // still successfully queue events fired before the tag loads.

    /* eslint-disable */
    !(function(t, n) {
      t[n] = t[n] || {
        // t = window, n = 'NOLBUNDLE'
        nlsQ: function(e, o, c, r, s, i) {
          // e = appId, o = instanceName, c = config
          return (
            (t[n][o] = t[n][o] || {
              g: c || {},
              ggPM: function(e, c, r, s, i) {
                (t[n][o].q = t[n][o].q || []).push([e, c, r, s, i]);
              }
            }),
            t[n][o]
          );
        }
      };
    })(window, 'NOLBUNDLE');
    /* eslint-enable */

    if (this.options.debug) config.nol_sdkDebug = 'debug';
    if (this.options.optout) config.optout = true;
    this.client = window.NOLBUNDLE.nlsQ(
      this.options.appId,
      this.options.instanceName,
      config
    );

    this.load(protocol, this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  NielsenDTVR.prototype.loaded = function() {
    return this.client && typeof this.client.ggPM === 'function';
  };

  /**
   * Track
   *
   * @api public
   */

  NielsenDTVR.prototype.track = function(track) {
    this.sendID3(track);
  };

  /**
   * Video Content Started
   *
   * @api public
   */

  NielsenDTVR.prototype.videoContentStarted = function(track) {
    var metadata;
    // Proactively ensure we clear the session whenever new content
    // starts. Here, we'll catch it if a customer forgets to call a Segment
    // "Completed" event, so we'll clear the ID3 tags and stream.
    // e.g. if a user is alternating b/w watching two videos on the same page.
    if (this.previousEvent && track !== this.previousEvent) {
      this.ID3 = null;
      this.previousEvent = null;
      this.isDTVRStream = null;
    }

    metadata = this.mapMetadata(track);
    if (!metadata) return;
    this.client.ggPM('loadMetadata', metadata);
    this.sendID3(track);
    // We need to store the previous event in memory b/c in some situations we
    // need access to the previous event's properties
    this.previousEvent = track;
  };

  /**
   * These are considered non-recoverable completion scenarios.
   * Nielsen has requested we do not fire anything for these events.
   * We will simply reset ID3 tags and clear out the stream/session.
   *
   * Video Content Completed
   * Video Playback Completed
   * Video Playback Exited
   *
   * @api public
   */

  NielsenDTVR.prototype.videoContentCompleted = NielsenDTVR.prototype.videoPlaybackCompleted = NielsenDTVR.prototype.videoPlaybackExited = function() {
    if (!this.isDTVRStream) return;
    this.ID3 = null;
    this.previousEvent = null;
    this.isDTVRStream = null;
  };

  /**
   * These are considered recoverable interruption scenarios.
   * Nielsen has requested we do not fire anything for these events, aside from reporting the latest ID3 tag.
   *
   * Video Playback Interrupted
   * Video Playback Seek Started
   * Video Playback Buffer Started
   * Video Playback Paused
   *
   * @api public
   */

  NielsenDTVR.prototype.videoPlaybackInterrupted = NielsenDTVR.prototype.videoPlaybackSeekStarted = NielsenDTVR.prototype.videoPlaybackBufferStarted = NielsenDTVR.prototype.videoPlaybackPaused = function(
    track
  ) {
    if (!this.isDTVRStream) return;
    this.sendID3(track);
  };

  /**
   * Video Playback Seek Completed
   * Video Playback Buffer Completed
   * Video Playback Resumed
   *
   * @api public
   */

  NielsenDTVR.prototype.videoPlaybackSeekCompleted = NielsenDTVR.prototype.videoPlaybackBufferCompleted = NielsenDTVR.prototype.videoPlaybackResumed = function(
    track
  ) {
    var metadata = this.mapMetadata(track);
    if (!metadata || !this.isDTVRStream) return;
    this.client.ggPM('loadMetadata', metadata);
    this.sendID3(track);
  };

  /**
   * Send ID3 tags to Nielsen
   *
   * @api private
   */

  NielsenDTVR.prototype.sendID3 = function(event) {
    var id3Events = this.options.sendId3Events;
    var id3Prop;
    var id3Tags;
    var found = false;

    if (id3Events.length <= 0) return;
    for (var i = 0; i < id3Events.length; i += 1) {
      if (id3Events[i] === event.event()) {
        found = true;
        break;
      }
    }
    if (!found) return;

    id3Prop = this.options.id3Property;
    id3Tags = event.proxy('properties.' + id3Prop);
    if (id3Tags) {
      // we'll only send ID3 tags to Nielsen if we detect the customer has either
      // never sent ID3 tags, or if they're different from the previous ID3 tags
      // sent during the session
      if (!this.ID3 || id3Tags !== this.ID3) {
        this.ID3 = id3Tags;
        this.client.ggPM('sendID3', this.ID3);
      }
    }
  };

  /**
   * Helper to validate that metadata contains required properties, i.e.
   * all values are truthy Strings. We don't need to validate keys b/c
   * we hard-code into the object the metadata keys Nielsen requires.
   *
   * @api private
   */

  function validate(metadata) {
    var isValid = true;
    var keys = Object.keys(metadata);
    var key;

    for (var i = 0; i < keys.length; i += 1) {
      key = keys[i];
      if (typeof metadata[key] !== 'string' || metadata[key].length <= 0) {
        isValid = false;
      }
    }

    return isValid ? metadata : false;
  }

  /**
   * Map video properties
   *
   * @api private
   */

  NielsenDTVR.prototype.mapMetadata = function(event) {
    var loadType =
      event.proxy('properties.loadType') ||
      event.proxy('properties.load_type') ||
      event.proxy('properties.content.loadType') ||
      event.proxy('properties.content.load_type');

    // only video streams of load_type "linear" should be mapped to Nielsen DTVR
    // we need to persist the fact that a stream is/isn't a DTVR stream for events
    // that may not contain a `load_type` k:v pair, such as "Video Playback" events
    if (loadType !== 'linear') {
      this.isDTVRStream = false;
      return false;
    }

    this.isDTVRStream = true;

    return validate({
      type: 'content',
      channelName: event.proxy('properties.channel'),
      adModel: '1'
    });
  };

  },{"@segment/analytics.js-integration":669}],669:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":670,"./statics":671,"@ndhoule/defaults":8,"component-bind":1109,"debug":672,"dup":49,"extend":675,"slug-component":1165}],670:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],671:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":674,"dup":51}],672:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":673,"_process":1149,"dup":43}],673:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":676}],674:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],675:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],676:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],677:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var alias = require('@segment/alias');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Nudgespot` integration.
   */

  var Nudgespot = (module.exports = integration('Nudgespot')
    .assumesPageview()
    .global('nudgespot')
    .option('clientApiKey', '')
    .tag('<script id="nudgespot" src="//cdn.nudgespot.com/nudgespot.js">'));

  /**
   * Initialize Nudgespot.
   *
   * @api public
   */

  Nudgespot.prototype.initialize = function() {
    window.nudgespot = window.nudgespot || [];

    // XXX(ndhoule): This script has been modified to:
    //   1) Remove the Nudgespot snippet's script loading logic
    //   2) Fix a global variable leak
    /* eslint-disable */
    !function(e){e.init=function(p){function t(e,p){var t=p.split(".");2==t.length&&(e=e[t[0]],p=t[1]),e[p]=function(){e.push([p].concat(Array.prototype.slice.call(arguments,0)))}}e._version=.1,e._globals=[p],e.people=e.people||[],e.params=e.params||[];for(var o="track register unregister identify set_config people.delete people.create people.update people.create_property people.tag people.remove_Tag".split(" "),r=0;r<o.length;r++)t(e,o[r])}}(window.nudgespot);
    /* eslint-enable */

    window.nudgespot.init(this.options.clientApiKey);
    this.load(this.ready);
  };

  /**
   * Has the Nudgespot library been loaded yet?
   *
   * @api private
   * @return {boolean}
   */

  Nudgespot.prototype.loaded = function() {
    return !!(window.nudgespot && window.nudgespot.push !== Array.prototype.push);
  };

  /**
   * Identify a user.
   *
   * @api public
   * @param {Identify} identify
   */

  Nudgespot.prototype.identify = function(identify) {
    if (!identify.userId()) return this.debug('user id required');
    var traits = identify.traits({ createdAt: 'created' });
    traits = alias(traits, { created: 'created_at' });
    window.nudgespot.identify(identify.userId(), traits);
  };

  /**
   * Track an event.
   *
   * @api public
   * @param {Track} track
   */

  Nudgespot.prototype.track = function(track) {
    window.nudgespot.track(track.event(), track.properties());
  };

  },{"@segment/alias":21,"@segment/analytics.js-integration":678}],678:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":679,"./statics":680,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],679:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":681,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],680:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":682,"dup":42}],681:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],682:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],683:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var https = require('use-https');
  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');

  /**
   * Expose `Olark` integration.
   */

  var Olark = (module.exports = integration('Olark')
    .assumesPageview()
    .global('olark')
    .option('groupId', '')
    .option('identify', true)
    .option('listen', false)
    .option('page', true)
    .option('siteId', '')
    .option('track', false)
    .option('inline', false));

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'olark',
    version: '1.0.0'
  };

  /**
   * Initialize.
   *
   * http://www.olark.com/documentation
   * https://www.olark.com/documentation/javascript/api.chat.setOperatorGroup
   *
   * @api public
   */

  Olark.prototype.initialize = function() {
    var self = this;
    this.load(function() {
      tick(self.ready);
    });

    // assign chat to a specific site
    var groupId = this.options.groupId;
    if (groupId) api('chat.setOperatorGroup', { group: groupId });

    // keep track of the widget's open state
    api('box.onExpand', function() {
      self._open = true;
    });
    api('box.onShrink', function() {
      self._open = false;
    });

    // record events
    if (this.options.listen) this.attachListeners();
  };

  /**
   * Load.
   *
   * @api private
   * @param {Function} callback
   */

  Olark.prototype.load = function(callback) {
    /* eslint-disable */
    window.olark||(function(c){var f=window,d=document,l=https()?"https:":"http:",z=c.name,r="load";var nt=function(){f[z]=function(){(a.s=a.s||[]).push(arguments)};var a=f[z]._={},q=c.methods.length;while (q--) {(function(n){f[z][n]=function(){f[z]("call",n,arguments)}})(c.methods[q])}a.l=c.loader;a.i=nt;a.p={ 0:+new Date() };a.P=function(u){a.p[u]=new Date()-a.p[0]};function s(){a.P(r);f[z](r)}f.addEventListener?f.addEventListener(r,s,false):f.attachEvent("on"+r,s);var ld=function(){function p(hd){hd="head";return ["<",hd,"></",hd,"><",i,' onl' + 'oad="var d=',g,";d.getElementsByTagName('head')[0].",j,"(d.",h,"('script')).",k,"='",l,"//",a.l,"'",'"',"></",i,">"].join("")}var i="body",m=d[i];if (!m) {return setTimeout(ld,100)}a.P(1);var j="appendChild",h="createElement",k="src",n=d[h]("div"),v=n[j](d[h](z)),b=d[h]("iframe"),g="document",e="domain",o;n.style.display="none";m.insertBefore(n,m.firstChild).id=z;b.frameBorder="0";b.id=z+"-loader";if (/MSIE[ ]+6/.test(navigator.userAgent)) {b.src="javascript:false"}b.allowTransparency="true";v[j](b);try {b.contentWindow[g].open()}catch (w) {c[e]=d[e];o="javascript:var d="+g+".open();d.domain='"+d.domain+"';";b[k]=o+"void(0);"}try {var t=b.contentWindow[g];t.write(p());t.close()}catch (x) {b[k]=o+'d.write("'+p().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};ld()};nt()})({ loader: "static.olark.com/jsclient/loader0.js", name:"olark", methods:["configure","extend","declare","identify"] });
    /* eslint-enable */

    // check if chat should be loaded as `inline chat`
    if (this.options.inline) configure('box.inline', true);

    window.olark.identify(this.options.siteId);
    callback();
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Olark.prototype.loaded = function() {
    return !!window.olark;
  };

  /**
   * Page.
   *
   * @param {Facade} page
   */

  Olark.prototype.page = function(page) {
    if (!this.options.page) return;
    var props = page.properties();
    var name = page.fullName();
    if (!name && !props.url) return;

    name = name ? name + ' page' : props.url;
    this.notify('looking at ' + name);
  };

  /**
   * Identify.
   *
   * @param {Facade} identify
   */

  Olark.prototype.identify = function(identify) {
    if (!this.options.identify) return;

    var username = identify.username();
    var traits = identify.traits();
    var id = identify.userId();
    var email = identify.email();
    var phone = identify.phone();
    var name = identify.name() || identify.firstName();

    if (traits) api('visitor.updateCustomFields', traits);
    if (email) api('visitor.updateEmailAddress', { emailAddress: email });
    if (phone) api('visitor.updatePhoneNumber', { phoneNumber: phone });
    if (name) api('visitor.updateFullName', { fullName: name });

    // figure out best nickname
    var nickname = name || email || username || id;
    if (name && email) nickname += ' (' + email + ')';
    if (nickname) api('chat.updateVisitorNickname', { snippet: nickname });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Facade} track
   */

  Olark.prototype.track = function(track) {
    if (!this.options.track) return;
    this.notify('visitor triggered "' + track.event() + '"');
  };

  /**
   * Listen for events.
   */

  Olark.prototype.attachListeners = function() {
    var self = this;

    api('chat.onBeginConversation', function() {
      self.analytics.track(
        'Live Chat Conversation Started',
        {},
        {
          context: { integration: integrationContext },
          integrations: { Olark: false }
        }
      );
    });

    // Callback accepts `event`
    // TODO: We might eventually send information about the event through Segment
    api('chat.onMessageToOperator', function() {
      self.analytics.track(
        'Live Chat Message Sent',
        {},
        {
          context: { integration: integrationContext },
          integrations: { Olark: false }
        }
      );
    });

    // Callback accepts `event`
    // TODO: We might eventually send information about the event through Segment
    api('chat.onMessageToVisitor', function() {
      self.analytics.track(
        'Live Chat Message Received',
        {},
        {
          context: { integration: integrationContext },
          integrations: { Olark: false }
        }
      );
    });
  };

  /**
   * Send a notification `message` to the operator, only when a chat is active and
   * when the chat is open.
   *
   * @api private
   * @param {string} message
   */

  Olark.prototype.notify = function(msg) {
    if (!this._open) return;

    // lowercase since olark does
    var message = msg.toLowerCase();

    api('visitor.getDetails', function(data) {
      if (!data || !data.isConversing) return;
      api('chat.sendNotificationToOperator', { body: message });
    });
  };

  /**
   * Helper for Olark API calls.
   *
   * @api private
   * @param {string} action
   * @param {Object} value
   */

  function api(action, value) {
    window.olark('api.' + action, value);
  }

  function configure(action, value) {
    window.olark.configure(action, value);
  }

  },{"@segment/analytics.js-integration":684,"next-tick":1142,"use-https":1180}],684:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":685,"./statics":686,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],685:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":687,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],686:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":688,"dup":42}],687:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],688:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],689:[function(require,module,exports){
  'use strict';

  // https://developer.omniture.com/en_US/content_page/sitecatalyst-tagging/c-tagging-overview
  // http://blogs.adobe.com/digitalmarketing/analytics/custom-link-tracking-capturing-user-actions/
  // https://developer.omniture.com/en_US/forum/general-topic-forum/difference-between-s-t-and-s-t1

  var dot = require('obj-case');
  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var iso = require('@segment/to-iso-string');
  var map = require('@ndhoule/map');
  var type = require('type-of');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Keys that get applied to `window.s` object,
   * but need to be cleared out before every call.
   */

  var dynamicKeys = [];

  /**
   * Map of ecommerce event names.
   */

  var omnitureEventMap = {
    // ecommerce api
    prodView: [/viewed product/i, /product viewed/i],
    scAdd: [/added product/i, /product added/i],
    scRemove: [/removed product/i, /product removed/i],
    purchase: [/completed order/i, /order completed/i],

    // omniture specific
    scView: [/viewed cart/i, /cart viewed/i],
    // whatever that means
    scOpen: [/opened cart/i, /cart opened/i],
    scCheckout: [/viewed checkout/i, /started checkout/i, /checkout started/i]
  };

  /**
   * Expose `Omniture`.
   */

  var Omniture = (module.exports = integration('Omniture'));

  /**
   * Uses the default `field` from the `window.s` object if it exists,
   * otherwise uses the passed in `value`. Also adds the field to
   * `this.sOptions`.
   *
   * @api private
   * @param {string} field
   * @param {*} value
   */

  Omniture.sOption = function(field, value) {
    var s = window.s;
    var isValid = s && has.call(s, field) && !isEmptyString(field);

    value = isValid ? s[field] : value;

    this.prototype.sOptions = this.prototype.sOptions || {};
    this.prototype.sOptions[field] = value;

    return this.option(field, value);
  };

  /**
   * Add our omniture
   */

  Omniture.global('s')
    .global('s_gi')
    .option('initialPage', true)
    .option('events', {})
    .option('eVars', {})
    .option('props', {})
    .option('hVars', {})
    .option('reportSuiteId', window.s_account)
    .option('includeTimestamp', true)
    .sOption('visitorID')
    .sOption('channel')
    .sOption('campaign')
    .sOption('state')
    .sOption('zip')
    .sOption('pageName')
    .sOption('trackingServer')
    .sOption('trackingServerSecure')
    .sOption('visitorMigrationKey')
    .sOption('visitorMigrationServer')
    .sOption('visitorNamespace')
    .sOption('dc')
    .sOption('charSet', 'ISO-8859-1')
    .sOption('currencyCode', 'USD')
    .sOption('trackDownloadLinks', true)
    .sOption('trackExternalLinks', true)
    .sOption('trackInlineStats', true)
    .sOption(
      'linkDownloadFileTypes',
      'exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx'
    )
    .sOption('linkInternalFilters')
    .sOption('linkLeaveQueryString', false)
    .sOption('linkTrackVars', 'None')
    .sOption('linkTrackEvents', 'None')
    .sOption('usePlugins', true)
    .tag(
      '<script src="//cdn.segment.io/integrations/omniture/H.26.2/omniture.min.js">'
    );

  /**
   * Initialize.
   *
   * @api public
   */

  Omniture.prototype.initialize = function() {
    var options = this.options;

    // lowercase all keys for easy matching
    lowercaseKeys(options.events);

    window.s_account = window.s_account || options.reportSuiteId;
    var self = this;

    this.loadedBySegmentio = true;

    this.load(function() {
      var s = window.s;
      // TODO: rename on server-side and mobile
      s.trackingServer = s.trackingServer || options.trackingServerUrl;
      s.trackingServerSecure =
        s.trackingServerSecure || options.trackingServerSecureUrl;
      self.ready();
    });
  };

  /**
   * Omniture is loaded if the `window.s_gi` function exists.
   *
   * @return {Boolean} loaded
   */

  Omniture.prototype.loaded = function() {
    return !!window.s_gi;
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Omniture.prototype.track = function(track) {
    if (!window.s_gi) return;

    var event = aliasEvent(track.event(), this.options.events);
    if (!event) return;

    var properties = track.properties();
    window.s.linkTrackEvents = event;

    clearKeys(dynamicKeys);

    // Update the omniture variable and explicitly mark the link vars
    function update(value, key) {
      if (!key || value === undefined || value === null) return;
      dynamicKeys.push(key);
      window.s[key] = value.toString();
    }

    update(event, 'events');
    update(properties.channel || this.options.channel, 'channel');
    update(properties.campaign || this.options.campaign, 'campaign');
    update(properties.pageName || this.options.pageName, 'pageName');
    update(properties.state || this.options.state, 'state');
    update(properties.zip || this.options.zip, 'zip');
    update(properties.purchaseId, 'purchaseID');
    update(properties.transactionId, 'transactionId');

    // Timestamp must be either unix or iso-8601
    // See docs.pdf page 98.
    if (this.options.includeTimestamp) {
      var timestamp = properties.timestamp || track.timestamp();
      if (typeof timestamp !== 'string') timestamp = iso(timestamp);
      update(timestamp, 'timestamp');
    }

    // Alias for omniture specific events.
    if (omnitureEventMap[event]) {
      if (properties.product || track.sku()) {
        update(formatProduct(properties), 'products');
      } else {
        var products = properties.products;
        if (products && type(products) === 'array') {
          var productStrings = map(formatProduct, products);
          update(productStrings.join(', '), 'products');
        }
      }
    }

    // Set props and eVars for event properties
    var props = extractProperties(properties, this.options);
    each(update, props);

    // Set eVar for event name
    var eventEVar = dot(this.options.eVars, track.event());
    update(track.event(), eventEVar);

    window.s.linkTrackVars = dynamicKeys.join(',');

    // Send request off to Omniture
    window.s.tl(true, 'o', track.event());
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Omniture.prototype.page = function(page) {
    var options = this.options;
    // If we ignore the first pageview, enable for all subsequent pageviews
    if (options.page == null) options.page = options.initialPage;
    if (!options.page) {
      options.page = true;
      return;
    }

    // If omniture isn't loaded yet, try again soon.
    if (!this.loaded()) {
      var self = this;
      setTimeout(function() {
        self.page(page);
      }, 100);
      return;
    }

    // Set the page name
    var name = page.fullName();
    window.s.pageName = name;

    // Visitor ID.
    var user = this.analytics.user();
    if (user.id()) window.s.visitorID = user.id();

    // Get the properties
    var track = page.track();
    var properties = track.properties();

    clearKeys(dynamicKeys);
    // Update the omniture variable and explicitly mark the link vars
    function update(value, key) {
      if (!key || value === undefined || value === null) return;
      dynamicKeys.push(key);
      window.s[key] = value.toString();
    }

    update(name, 'events');
    update(properties.channel || this.options.channel, 'channel');
    update(properties.campaign || this.options.campaign, 'campaign');
    update(properties.state || this.options.state, 'state');
    update(properties.zip || this.options.zip, 'zip');
    update(properties.purchaseId, 'purchaseID');
    update(properties.transactionId, 'transactionId');

    if (this.options.includeTimestamp) {
      var timestamp = properties.timestamp || track.timestamp();
      if (typeof timestamp !== 'string') timestamp = iso(timestamp);
      update(timestamp, 'timestamp');
    }

    var props = extractProperties(properties, this.options);
    each(update, props);

    // actually make the "page" request, just a single "t" no "tl"
    window.s.t();
  };

  /**
   * Alias a regular event `name` to an Omniture event, using a dictionary of
   * `events`.
   *
   * @api private
   * @param {string} name
   * @param {Object} events
   * @return {string|null}
   */

  function aliasEvent(name, events) {
    var aliased = null;

    // First attempt to look through omniture events
    each(function(value, key) {
      if (name === key) {
        aliased = key;
        return;
      }

      var regexes = omnitureEventMap[key];

      for (var i = 0; i < regexes.length; i++) {
        if (regexes[i].test(name)) {
          aliased = key;
          return;
        }
      }
    }, omnitureEventMap);

    if (aliased) return aliased;

    // Otherwise if it has an aliased name to a stored event.
    if (events[name.toLowerCase()]) return events[name.toLowerCase()];

    // Hope that they passed in a normal event
    if (/event\d+/.test(name)) return name;
  }

  /**
   * Format product descriptions from objects to Omniture description strings.
   *
   * @api private
   * @param {Object} description
   * @return {string}
   */

  function formatProduct(description) {
    var quantity = description.quantity || 1;
    var total = ((description.price || 0) * quantity).toFixed(2);
    return [
      description.category,
      description.product || description.sku,
      quantity,
      total
    ].join('; ');
  }

  /**
   * Return whether `str` is an empty string.
   *
   * @api private
   * @return {boolean} empty
   */

  function isEmptyString(str) {
    return typeof str === 'string' && str.length === 0;
  }

  /**
   * Clear last keys used with omniture.
   *
   * @api private
   * @param {Array} keys
   */

  function clearKeys(keys) {
    each(function(linkVar) {
      delete window.s[linkVar];
    }, keys);
    keys.length = 0;
  }

  /**
   * Extract properties for `window.s`.
   *
   * @api private
   * @param {Object} props
   * @param {Object} options
   */

  function extractProperties(props, options) {
    var result = {};

    // 1. map eVars
    each(function(mappedValue, mappedKey) {
      var value = dot(props, mappedKey);
      // for backwards compatibility
      if (value != null) result[mappedValue] = value;
    }, options.eVars);

    // 2. map props
    each(function(mappedValue, mappedKey) {
      var value = dot(props, mappedKey);
      if (value != null) result[mappedValue] = value;
    }, options.props);

    // 3. map hVars
    each(function(mappedValue, mappedKey) {
      var value = dot(props, mappedKey);
      if (value != null) result[mappedValue] = value;
    }, options.hVars);

    // 4. map basic properties
    // they don't have a specific mapping, but
    // named it like omniture does
    each(function(value, key) {
      if (/prop\d+/i.test(key) || /eVar\d+/i.test(key) || /hier\d+/i.test(key)) {
        result[key] = value;
        return;
      }
      var prop = dot(options.props, key);
      var eVar = dot(options.eVars, key);
      var hVar = dot(options.hVars, key);
      // Add case for mirroring a prop post check.
      if (!eVar && prop) eVar = options.eVars[prop];
      if (prop) result[prop] = value;
      if (eVar) result[eVar] = value;
      if (hVar) result[hVar] = value;
    }, props);

    return result;
  }

  /**
   * Lowercase all of an object's keys.
   *
   * @api private
   * @param {Object} obj
   * @return {Object}
   */

  function lowercaseKeys(obj) {
    obj = obj || {};
    each(function(value, key) {
      delete obj[key];
      obj[key.toLowerCase()] = value;
    }, obj);
    return obj;
  }

  },{"@ndhoule/each":10,"@ndhoule/map":17,"@segment/analytics.js-integration":690,"@segment/to-iso-string":1103,"obj-case":1143,"type-of":1178}],690:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":691,"./statics":692,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":693,"dup":40,"slug-component":1165}],691:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":695,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],692:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":696,"dup":42}],693:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":694,"_process":1149,"dup":43}],694:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":697}],695:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],696:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],697:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],698:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `RocketFuel`.
   */

  var OneSpot = (module.exports = integration('OneSpot')
    .option('accountId', '')
    .tag(
      '<script src="//d3xl0zyjyljwa.cloudfront.net/px/t/os-{{ accountId }}-0.js"></script>'
    ));

  /**
   * Loaded.
   *
   * @return {Boolean}
   */

  OneSpot.prototype.loaded = function() {
    return !!window.osANSegCode;
  };

  /**
   * Initialize.
   *
   * @api public
   */

  OneSpot.prototype.initialize = function() {
    this.load({ accountId: this.options.accountId }, this.ready);
  };

  },{"@segment/analytics.js-integration":699}],699:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":700,"./statics":701,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":702,"dup":40,"slug-component":1165}],700:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":704,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],701:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":705,"dup":42}],702:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":703,"_process":1149,"dup":43}],703:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":706}],704:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],705:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],706:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],707:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var keys = require('@ndhoule/keys');
  var values = require('@ndhoule/values');
  var foldl = require('@ndhoule/foldl');
  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('optimizely', { wrap: false });
  var tick = require('next-tick');

  /**
   * Expose `Optimizely` integration.
   */

  var Optimizely = (module.exports = integration('Optimizely')
    .option('trackCategorizedPages', true)
    .option('trackNamedPages', true)
    .option('variations', false) // send data via `.identify()`
    .option('listen', true) // send data via `.track()`
    .option('nonInteraction', false)
    .option('sendRevenueOnlyForOrderCompleted', true)
    .option('customExperimentProperties', {})
    .option('customCampaignProperties', {}));

  /**
   * The name and version for this integration.
   */

  var optimizelyContext = {
    name: 'optimizely',
    version: '2.0.0'
  };

  /**
   * Initialize.
   *
   * https://www.optimizely.com/docs/api#function-calls
   * https://jsfiddle.net/ushmw723/ <- includes optimizely snippets for capturing campaign and experiment data
   *
   * @api public
   */

  Optimizely.prototype.initialize = function() {
    var self = this;
    // Flag source of integration (requested by Optimizely)
    push({
      type: 'integration',
      OAuthClientId: '5360906403'
    });
    // Initialize listeners for both Classic and New Optimizely
    // crazying binding because that's just how javascript works
    // We're caling this on the next tick to be safe so we don't hold up
    // initializing the integration even though the function below is designed to be async,
    // just want to be extra safe
    tick(function() {
      Optimizely.initOptimizelyIntegration({
        referrerOverride: self.setEffectiveReferrer.bind(self),
        sendExperimentData: self.sendClassicDataToSegment.bind(self),
        sendCampaignData: self.sendNewDataToSegment.bind(self)
      });
    });

    this.ready();
  };

  /**
   * Track. The Optimizely X Web event API accepts a single payload object.
   *        It works with Classic Optimizely as well.
   *
   * Optimizely X:  https://developers.optimizely.com/x/solutions/javascript/reference/index.html#function_setevent
   *
   * The new-style X API is forward compatible from Optimizely Classic to Optimizely X.
   *   - Classic will correctly consume the tags object to identify the revenue
   *   - In bundled mode, it will be forwarded along to the X API with the entire payload
   *
   * If the Optimizely X Fullstack JavaScript SDK is being used we should pass along
   * the event to it. Any properties in the track object will be passed along as event tags.
   * If the userId is not passed into the options object of the track call, we'll
   * attempt to use the userId of the track event, which is set using the analytics.identify call.
   *
   * https://developers.optimizely.com/x/solutions/sdks/reference/?language=javascript#tracking
   *
   * @api public
   * @param {Track} track
   */

  Optimizely.prototype.track = function(track) {
    var opts = this.options;
    var eventProperties = track.properties();

    // Optimizely expects revenue only passed through Order Completed events
    if (eventProperties.revenue && opts.sendRevenueOnlyForOrderCompleted) {
      if (track.event() === 'Order Completed') {
        eventProperties.revenue = Math.round(eventProperties.revenue * 100);
      } else if (track.event() !== 'Order Completed') {
        delete eventProperties.revenue;
      }
      // This is legacy Segment-Optimizely behavior,
      // which passes revenue whenever it is present
    } else if (
      opts.sendRevenueOnlyForOrderCompleted === false &&
      eventProperties.revenue
    ) {
      eventProperties.revenue = Math.round(eventProperties.revenue * 100);
    }

    // Use the new-style API (which is compatible with Classic and X)
    var eventName = track.event().replace(/:/g, '_'); // can't have colons so replacing with underscores
    var payload = {
      type: 'event',
      eventName: eventName,
      tags: eventProperties
    };

    push(payload);

    var optimizelyClientInstance = window.optimizelyClientInstance;
    if (optimizelyClientInstance && optimizelyClientInstance.track) {
      var optimizelyOptions = track.options('Optimizely');
      var userId =
        optimizelyOptions.userId || track.userId() || this.analytics.user().id();
      var attributes =
        optimizelyOptions.attributes ||
        track.traits() ||
        this.analytics.user().traits();
      if (userId) {
        optimizelyClientInstance.track(
          eventName,
          userId,
          attributes,
          payload.tags
        );
      }
    }
  };

  /**
   * Page.
   *
   * https://www.optimizely.com/docs/api#track-event
   *
   * @api public
   * @param {Page} page
   */

  Optimizely.prototype.page = function(page) {
    var category = page.category();
    var name = page.fullName();
    var opts = this.options;

    // categorized pages
    if (category && opts.trackCategorizedPages) {
      this.track(page.track(category));
    }

    // named pages
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }
  };

  /**
   * sendClassicDataToSegment (Optimizely Classic)
   *
   * This function is executed for each experiment created in Classic Optimizely that is running on the page.
   * This function will also be executed for any experiments activated at a later stage since initOptimizelyIntegration
   * attached listeners on the page
   *
   * @api private
   * @param {Object} experimentState: contains all information regarding experiments
   * @param {Object} experimentState.experiment: the experiment running on the page
   * @param {String} experimentState.experiment.name: name of the experiment
   * @param {String} experimentState.experiment.id: ID of the experiment
   * @param {String} experimentState.experiment.referrer: available if effective referrer if experiment is a redirect
   * @param {Array} experimentState.variations: the variations the current user on page is seeing
   * @param {String} experimentState.variations[].name: the name of the variation
   * @param {String} experimentState.variations[].id: the ID of the variation
   * @param {Object} experimentState.sections: the sections for the experiment (only defined for multivariate experiments) keyed by sectionId
   * @param {String} experimentState.sections[sectionId].name: the name of section
   * @param {Array} experimentState.sections[sectionId].variation_ids: the IDs of the variations in the section
   *
   */

  Optimizely.prototype.sendClassicDataToSegment = function(experimentState) {
    var experiment = experimentState.experiment;
    var variations = experimentState.variations;
    var sections = experimentState.sections;
    var context = { integration: optimizelyContext }; // backward compatibility

    // Reformatting this data structure into hash map so concatenating variation ids and names is easier later
    var variationsMap = foldl(
      function(results, variation) {
        var res = results;
        res[variation.id] = variation.name;
        return res;
      },
      {},
      variations
    );

    // Sorting for consistency across browsers
    var variationIds = keys(variationsMap).sort();
    var variationNames = values(variationsMap).sort();

    // Send data via `.track()`
    if (this.options.listen) {
      var props = {
        experimentId: experiment.id,
        experimentName: experiment.name,
        variationId: variationIds.join(), // eg. '123' or '123,455'
        variationName: variationNames.join(', ') // eg. 'Variation X' or 'Variation 1, Variation 2'
      };

      // If this was a redirect experiment and the effective referrer is different from document.referrer,
      // this value is made available. So if a customer came in via google.com/ad -> tb12.com -> redirect experiment -> Belichickgoat.com
      // `experiment.referrer` would be google.com/ad here NOT `tb12.com`.
      if (experiment.referrer) {
        props.referrer = experiment.referrer;
        context.page = { referrer: experiment.referrer };
      }

      // When there is a multivariate experiment
      if (sections) {
        // Since `sections` include all the possible sections on the page, we need to find the names of the sections
        // if any of its variations were used. Experiments could display variations from multiple sections.
        // The global optimizely data object does not expose a mapping between which section(s) were involved within an experiment.
        // So we will build our own mapping to quickly get the section name(s) and id(s) for any displayed variation.
        var activeSections = {};
        var variationIdsToSectionsMap = foldl(
          function(results, section, sectionId) {
            var res = results;
            each(function(variationId) {
              res[variationId] = { id: sectionId, name: section.name };
            }, section.variation_ids);
            return res;
          },
          {},
          sections
        );
        for (var j = 0; j < variationIds.length; j++) {
          var activeVariation = variationIds[j];
          var activeSection = variationIdsToSectionsMap[activeVariation];
          if (activeSection)
            activeSections[activeSection.id] = activeSection.name;
        }

        // Sorting for consistency across browsers
        props.sectionId = keys(activeSections)
          .sort()
          .join(); // Not adding space for backward compat/consistency reasons since all IDs we've never had spaces
        props.sectionName = values(activeSections)
          .sort()
          .join(', ');
      }

      // For Google's nonInteraction flag
      if (this.options.nonInteraction) props.nonInteraction = 1;

      // If customExperimentProperties is provided overide the props with it.
      // If valid customExperimentProperties present it will override existing props.
      var customExperimentProperties = this.options.customExperimentProperties;
      var customPropsKeys = Object.keys(customExperimentProperties);
      var data = window.optimizely && window.optimizely.data;

      if (data && customPropsKeys.length) {
        for (var index = 0; index < customPropsKeys.length; index++) {
          var segmentProp = customPropsKeys[index];
          var optimizelyProp = customExperimentProperties[segmentProp];
          if (typeof data[optimizelyProp] !== 'undefined') {
            props[segmentProp] = data[optimizelyProp];
          }
        }
      }

      // Send to Segment
      this.analytics.track('Experiment Viewed', props, context);
    }

    // Send data via `.identify()` (not recommended!)
    // TODO: deprecate this feature
    if (this.options.variations) {
      // Note: The only "breaking" behavior is that now there will be an `.identify()` call per active experiment
      // Legacy behavior was that we would look up all active experiments on the page after init and send one `.identify()` call
      // with all experiment/variation data as traits.
      // New behavior will call `.identify()` per active experiment with isolated experiment/variation data for that single experiment
      // However, since traits are cached, subsequent experiments that trigger `.identify()` calls will likely contain previous experiment data
      var traits = {};
      traits['Experiment: ' + experiment.name] = variationNames.join(', '); // eg. 'Variation X' or 'Variation 1, Variation 2'

      // Send to Segment
      this.analytics.identify(traits);
    }
  };

  /**
   * sendNewDataToSegment (Optimizely X)
   *
   * This function is called for each experiment created in New Optimizely that are running on the page.
   * New Optimizely added a dimension called "Campaigns" that encapsulate over the Experiments. So a campaign can have multiple experiments.
   * Multivariate experiments are no longer supported in New Optimizely.
   * This function will also be executed for any experiments activated at a later stage since initOptimizelyIntegration
   * attached listeners on the page
   *
   * @api private
   * @param {Object} campaignState: contains all information regarding experiments and campaign
   * @param {String} campaignState.id: the ID of the campaign
   * @param {String} campaignState.campaignName: the name of the campaign
   * @param {Array} campaignState.audiences: "Audiences" the visitor is considered part of related to this campaign
   * @param {String} campaignState.audiences[].id: the id of the Audience
   * @param {String} campaignState.audiences[].name: the name of the Audience
   * @param {Object} campaignState.experiment: the experiment the visitor is seeing
   * @param {String} campaignState.experiment.id: the id of the experiment
   * @param {String} campaignState.experiment.name: the name of the experiment
   * @param {String} campaignState.experiment.referrer: the effective referrer of the experiment (only defined for redirect)
   * @param {Object} campaignState.variation: the variation the visitor is seeing
   * @param {String} campaignState.variation.id: the id of the variation
   * @param {String} campaignState.variation.name: the name of the variation
   * @param {String} campaignState.isInCampaignHoldback: whether the visitor is in the Campaign holdback
   */

  Optimizely.prototype.sendNewDataToSegment = function(campaignState) {
    var experiment = campaignState.experiment;
    var variation = campaignState.variation;
    var context = { integration: optimizelyContext }; // backward compatibility

    // Reformatting this data structure into hash map so concatenating variation ids and names is easier later
    var audiencesMap = foldl(
      function(results, audience) {
        var res = results;
        res[audience.id] = audience.name;
        return res;
      },
      {},
      campaignState.audiences
    );

    // Sorting for consistency across browsers
    var audienceIds = keys(audiencesMap)
      .sort()
      .join(); // Not adding space for backward compat/consistency reasons since all IDs we've never had spaces
    var audienceNames = values(audiencesMap)
      .sort()
      .join(', ');

    // Send data via `.track()`
    if (this.options.listen) {
      var props = {
        campaignName: campaignState.campaignName,
        campaignId: campaignState.id,
        experimentId: experiment.id,
        experimentName: experiment.name,
        variationName: variation.name,
        variationId: variation.id,
        audienceId: audienceIds, // eg. '7527562222,7527111138'
        audienceName: audienceNames, // eg. 'Peaky Blinders, Trust Tree'
        isInCampaignHoldback: campaignState.isInCampaignHoldback
      };

      // If this was a redirect experiment and the effective referrer is different from document.referrer,
      // this value is made available. So if a customer came in via google.com/ad -> tb12.com -> redirect experiment -> Belichickgoat.com
      // `experiment.referrer` would be google.com/ad here NOT `tb12.com`.
      if (experiment.referrer) {
        props.referrer = experiment.referrer;
        context.page = { referrer: experiment.referrer };
      }

      // For Google's nonInteraction flag
      if (this.options.nonInteraction) props.nonInteraction = 1;

      // If customCampaignProperties is provided overide the props with it.
      // If valid customCampaignProperties present it will override existing props.
      var customCampaignProperties = this.options.customCampaignProperties;
      var customPropsKeys = Object.keys(customCampaignProperties);
      var data = window.optimizely && window.optimizely.newMockData;
      if (data && customPropsKeys.length) {
        for (var index = 0; index < customPropsKeys.length; index++) {
          var segmentProp = customPropsKeys[index];
          var optimizelyProp = customCampaignProperties[segmentProp];
          if (typeof data[optimizelyProp] !== 'undefined') {
            props[segmentProp] = data[optimizelyProp];
          }
        }
      }

      // Send to Segment
      this.analytics.track('Experiment Viewed', props, context);
    }

    // Send data via `.identify()` (not recommended!)
    // TODO: deprecate this feature
    if (this.options.variations) {
      // Legacy: We never sent any experiment Id or variation Id
      // Note: The only "breaking" behavior is that now there will be an `.identify()` per active experiment
      // Legacy behavior was that we would look up all active experiments on the page after init and send one `.identify()` call
      // with all experiment/variation data as traits.
      // New behavior will call `.identify()` per active experiment with isolated experiment/variation data for that single experiment
      var traits = {};
      traits['Experiment: ' + experiment.name] = variation.name;

      // Send to Segment
      this.analytics.identify(traits);
    }
  };

  /**
   * setEffectiveReferrer
   *
   * This function is called when a redirect experiment changed the effective referrer value where it is different from the `document.referrer`.
   * This is a documented caveat for any mutual customers that are using redirect experiments.
   * We will set this global variable that Segment customers can lookup and pass down in their initial `.page()` call inside
   * their Segment snippet.
   *
   * @apr private
   * @param {string} referrer
   */

  Optimizely.prototype.setEffectiveReferrer = function(referrer) {
    if (referrer) {
      window.optimizelyEffectiveReferrer = referrer;
      return referrer;
    }
  };

  /**
   * initOptimizelyIntegration(handlers)
   *
   * This function was provided by Optimizely's Engineering team. The function below once initialized can detect which version of
   * Optimizely a customer is using and call the appropriate callback functions when an experiment runs on the page.
   * Instead of Segment looking up the experiment data, we can now just bind Segment APIs to their experiment listener/handlers!
   *
   * @api private
   * @param {Object} handlers
   * @param {Function} referrerOverride: called if the effective refferer value differs from the current `document.referrer` due to a
   * invocation of a redirect experiment on the page
   * @param {Function} sendExperimentData: called for every running experiment on the page (Classic)
   * @param {Function} sendCampaignData: called for every running campaign on the page (New)
   */

  Optimizely.initOptimizelyIntegration = function(handlers) {
    /**
     * `initClassicOptimizelyIntegration` fetches all the experiment data from the classic Optimizely client
     * and calls the functions provided in the arguments with the data that needs to
     * be used for sending information. It is recommended to leave this function as is
     * and to create your own implementation of the functions referrerOverride and
     * sendExperimentData.
     *
     * @param {Function} referrerOverride - This function is called if the effective referrer value differs from
     *   the current document.referrer value. The only argument provided is the effective referrer value.
     * @param {Function} sendExperimentData - This function is called for every running experiment on the page.
     *   The function is called with all the relevant ids and names.
     */
    var initClassicOptimizelyIntegration = function(
      referrerOverride,
      sendExperimentData
    ) {
      var data = window.optimizely && window.optimizely.data;
      var state = data && data.state;
      if (state) {
        var activeExperiments = state.activeExperiments;
        if (state.redirectExperiment) {
          var redirectExperimentId = state.redirectExperiment.experimentId;
          var index = -1;
          for (var i = 0; i < state.activeExperiments.length; i++) {
            if (state.activeExperiments[i] === redirectExperimentId) {
              index = i;
              break;
            }
          }
          if (index === -1) {
            activeExperiments.push(redirectExperimentId);
          }
          referrerOverride(state.redirectExperiment.referrer);
        }

        for (var k = 0; k < activeExperiments.length; k++) {
          var currentExperimentId = activeExperiments[k];
          var activeExperimentState = {
            experiment: {
              id: currentExperimentId,
              name: data.experiments[currentExperimentId].name
            },
            variations: [],
            /** Segment added code */
            // we need to send sectionName for multivariate experiments
            sections: data.sections
            /**/
          };

          /** Segment added code */
          // for backward compatability since we send referrer with the experiment properties
          if (
            state.redirectExperiment &&
            currentExperimentId === state.redirectExperiment.experimentId &&
            state.redirectExperiment.referrer
          ) {
            activeExperimentState.experiment.referrer =
              state.redirectExperiment.referrer;
          }
          /**/

          var variationIds =
            state.variationIdsMap[activeExperimentState.experiment.id];
          for (var j = 0; j < variationIds.length; j++) {
            var id = variationIds[j];
            var name = data.variations[id].name;
            activeExperimentState.variations.push({
              id: id,
              name: name
            });
          }
          sendExperimentData(activeExperimentState);
        }
      }
    };

    /**
     * This function fetches all the campaign data from the new Optimizely client
     * and calls the functions provided in the arguments with the data that needs to
     * be used for sending information. It is recommended to leave this function as is
     * and to create your own implementation of the functions referrerOverride and
     * sendCampaignData.
     *
     * @param {Function} referrerOverride - This function is called if the effective referrer value differs from
     *   the current document.referrer value. The only argument provided is the effective referrer value.
     * @param {Function} sendCampaignData - This function is called for every running campaign on the page.
     *   The function is called with the campaignState for the activated campaign
     */
    var initNewOptimizelyIntegration = function(
      referrerOverride,
      sendCampaignData
    ) {
      var newActiveCampaign = function(id, referrer) {
        var state = window.optimizely.get && window.optimizely.get('state');
        if (state) {
          var activeCampaigns = state.getCampaignStates({
            isActive: true
          });
          var campaignState = activeCampaigns[id];
          // Segment added code: in case this is a redirect experiment
          if (referrer) campaignState.experiment.referrer = referrer;
          sendCampaignData(campaignState);
        }
      };

      var checkReferrer = function() {
        var state = window.optimizely.get && window.optimizely.get('state');
        if (state) {
          var referrer =
            state.getRedirectInfo() && state.getRedirectInfo().referrer;

          if (referrer) {
            referrerOverride(referrer);
            return referrer; // Segment added code: so I can pass this referrer value in cb
          }
        }
      };

      /**
       * At any moment, a new campaign can be activated (manual or conditional activation).
       * This function registers a listener that listens to newly activated campaigns and
       * handles them.
       */
      var registerFutureActiveCampaigns = function() {
        window.optimizely = window.optimizely || [];
        window.optimizely.push({
          type: 'addListener',
          filter: {
            type: 'lifecycle',
            name: 'campaignDecided'
          },
          handler: function(event) {
            var id = event.data.campaign.id;
            newActiveCampaign(id);
          }
        });
      };

      /**
       * If this code is running after Optimizely on the page, there might already be
       * some campaigns active. This function makes sure all those campaigns are
       * handled.
       */
      var registerCurrentlyActiveCampaigns = function() {
        window.optimizely = window.optimizely || [];
        var state = window.optimizely.get && window.optimizely.get('state');
        if (state) {
          var referrer = checkReferrer();
          var activeCampaigns = state.getCampaignStates({
            isActive: true
          });
          for (var id in activeCampaigns) {
            if ({}.hasOwnProperty.call(activeCampaigns, id)) {
              // Segment modified code: need to pass down referrer in the cb for backward compat reasons
              if (referrer) {
                newActiveCampaign(id, referrer);
              } else {
                newActiveCampaign(id);
              }
            }
          }
        } else {
          window.optimizely.push({
            type: 'addListener',
            filter: {
              type: 'lifecycle',
              name: 'initialized'
            },
            handler: function() {
              checkReferrer();
            }
          });
        }
      };
      registerCurrentlyActiveCampaigns();
      registerFutureActiveCampaigns();
    };

    initClassicOptimizelyIntegration(
      handlers.referrerOverride,
      handlers.sendExperimentData
    );
    initNewOptimizelyIntegration(
      handlers.referrerOverride,
      handlers.sendCampaignData
    );
  };

  },{"@ndhoule/each":10,"@ndhoule/foldl":14,"@ndhoule/keys":16,"@ndhoule/values":20,"@segment/analytics.js-integration":708,"global-queue":1127,"next-tick":717}],708:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":709,"./statics":710,"@ndhoule/defaults":8,"component-bind":1109,"debug":711,"dup":49,"extend":713,"slug-component":1165}],709:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":714,"to-no-case":1171}],710:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":715,"dup":51}],711:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":712,"_process":1149,"dup":43}],712:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":716}],713:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],714:[function(require,module,exports){
  arguments[4][307][0].apply(exports,arguments)
  },{"_process":1149,"dup":307,"timers":1168}],715:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],716:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],717:[function(require,module,exports){
  arguments[4][310][0].apply(exports,arguments)
  },{"_process":1149,"dup":310,"timers":1168}],718:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var uncase = require('to-no-case');
  var foldl = require('@ndhoule/foldl');
  var Identify = require('segmentio-facade').Identify;

  /**
   * Expose `Outbound` integration.
   */

  var Outbound = (module.exports = integration('Outbound')
    .global('outbound')
    .option('publicApiKey', '')
    .option('trackReferrer', false)
    .tag('<script src="//cdn.outbound.io/{{ publicApiKey }}.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Outbound.prototype.initialize = function() {
    window.outbound = window.outbound || [];
    window.outbound.methods = [
      'identify',
      'track',
      'alias',
      'registerApnsToken',
      'registerGcmToken',
      'disableApnsToken',
      'disableGcmToken',
      'disableAllGcmTokens',
      'disableAllApnsTokens',
      'unsubscribeAll',
      'unsubscribeCampaigns',
      'subscribeAll',
      'subscribeCampaigns',
      'hasIdentified'
    ];

    window.outbound.factory = function(method) {
      return function() {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(method);
        window.outbound.push(args);
        return window.outbound;
      };
    };

    for (var i = 0; i < window.outbound.methods.length; i++) {
      var key = window.outbound.methods[i];
      window.outbound[key] = window.outbound.factory(key);
    }

    this.load(this.ready);
  };

  /**
   * Loaded
   *
   * @api private
   * @return {boolean}
   */

  Outbound.prototype.loaded = function() {
    return !!(window.outbound && window.outbound.reset);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Outbound.prototype.identify = function(identify) {
    var specialTraits = {
      id: true,
      email: true,
      phone: true,
      'user id': true,
      'last name': true,
      'first name': true
    };

    var userId = identify.userId() || identify.anonymousId();

    var attributes = foldl(
      function(acc, val, key) {
        if (!specialTraits.hasOwnProperty(uncase(key))) acc.attributes[key] = val;
        return acc;
      },
      {
        attributes: {},
        email: identify.email(),
        phoneNumber: identify.phone(),
        firstName: identify.firstName(),
        lastName: identify.lastName()
      },
      identify.traits()
    );

    window.outbound.identify(userId, attributes);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Outbound.prototype.track = function(track) {
    if (!window.outbound.hasIdentified()) {
      var user = new Identify({ userId: track.userId() || track.anonymousId() });
      this.identify(user);
    }
    window.outbound.track(track.event(), track.properties(), track.timestamp());
  };

  /**
   * Alias.
   *
   * @api public
   * @param {Alias} alias
   */

  Outbound.prototype.alias = function(alias) {
    window.outbound.identify(alias.userId(), { previousId: alias.previousId() });
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */
  Outbound.prototype.page = function(page) {
    var props = page.properties();
    var evtName = '[Segment Page]';

    if (!this.options.trackReferrer) {
      delete props.referrer;
    }

    if (props.name || props.url) {
      evtName += ' ' + props.name || props.url;
    }

    if (!window.outbound.hasIdentified()) {
      var user = new Identify({ userId: page.userId() || page.anonymousId() });
      this.identify(user);
    }

    window.outbound.track(evtName, props, page.timestamp());
  };

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":719,"segmentio-facade":1158,"to-no-case":725}],719:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":720,"./statics":721,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],720:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":723,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":722}],721:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":724,"dup":42}],722:[function(require,module,exports){
  arguments[4][384][0].apply(exports,arguments)
  },{"dup":384}],723:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],724:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],725:[function(require,module,exports){
  arguments[4][388][0].apply(exports,arguments)
  },{"dup":388}],726:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var cookie = require('component-cookie');
  var each = require('@ndhoule/each');
  var integration = require('@segment/analytics.js-integration');
  var load = require('@segment/load-script');
  var querystring = require('component-querystring');
  var useHttps = require('use-https');

  /**
   * hasOwnProperty reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Expose `Pardot` integration.
   */

  var Pardot = (module.exports = integration('Pardot')
    .assumesPageview()
    .global('pi')
    .global('piAId')
    .global('piCId')
    .global('piTracker')
    .option('projectId', '')
    .option('piAId', '')
    .option('piCId', '')
    .tag('http', '<script src="http://cdn.pardot.com/pd.js">')
    .tag('https', '<script src="https://pi.pardot.com/pd.js">'));

  /**
   * Initialize.
   *
   * http://developer.pardot.com/
   *
   * @api public
   */

  Pardot.prototype.initialize = function() {
    window.piAId = this.options.piAId;
    window.piCId = this.options.piCId;
    var name = useHttps() ? 'https' : 'http';
    this.load(name, this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Pardot.prototype.loaded = function() {
    return !!window.piTracker;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Pardot.prototype.identify = function(identify) {
    var traits = identify.traits();
    var email = identify.email();
    if (email) traits.email = email;
    // follow EU rules
    if (doNotTrack()) return;
    // must have an email
    if (!traits.email) return;

    var variables = this.getRequestVariables();
    variables.pi_email = traits.email;
    load('//pi.pardot.com/analytics?' + querystring.stringify(variables));
  };

  /**
   * Get request variables.
   *
   * @api private
   * @return {Object}
   */

  Pardot.prototype.getRequestVariables = function() {
    // Note; we specifically want to emit URL, referrer, title
    // so that the visitor is associated but not counted
    // as an extra page view
    var variables = {
      account_id: window.piAId,
      campaign_id: window.piCId,
      pi_opt_in: cookie('pi_opt_in' + (this.options.piAId - 1e3)),
      ver: 3,
      visitor_id: cookie('visitor_id' + (this.options.piAId - 1e3))
    };

    // get all the query parameters
    var queryParams = query();
    // here are the query parameters we are looking for, but only the ones that
    // won't cause an extra page view to pop up in Omniture
    var queryKeys = ['pi_email'];

    // add all the query params to our variables list
    each(function(key) {
      if (key in queryParams) variables[key] = queryParams[key];
    }, queryKeys);

    // now check global variables
    if (window.piIncludeInActivities !== undefined) {
      variables.pi_include_in_activies = window.piIncludeInActivities;
    }
    if (window.piProfileId !== undefined) {
      variables.pi_profile_id = window.piProfileId;
    }

    // override with pi.tracker variables, if they've been updated
    // we don't want to take app pi.tracker properties cause then
    // we'll grab the page view properties and count as an extra page view
    if (window.pi && window.pi.tracker) {
      for (var property in variables) {
        if (has.call(variables, property)) {
          var val = window.pi.tracker[property];
          // don't override the account_id if it's not set yet
          if (val) variables[property] = val;
        }
      }
    }

    return variables;
  };

  /**
   * Determine whether the we should identify the user, following EU rules.
   *
   * TODO: what is going on here haha
   *
   * @api private
   * @return {boolean}
   */

  function doNotTrack() {
    var p = window.pi;
    if (!p) return false;
    if (!p.tracker) return false;
    // XXX: I don't think it's necessary to explicitly cast to a string here,
    // but I converted this from == to ===, so just to be safe... (why isn't it
    // just a boolean?)
    if (String(p.tracker.pi_opt_in) === 'false') return false;
    if (!p.tracker.title) return false;
    if (!p.tracker.notify_pi) return false;
    return true;
  }

  /**
   * Get the query params from the URL.
   *
   * @api private
   * @return {Object}
   */

  function query() {
    return querystring.parse(location.search.slice(1));
  }

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":727,"@segment/load-script":1093,"component-cookie":1111,"component-querystring":733,"use-https":1180}],727:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":728,"./statics":729,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":730,"dup":40,"slug-component":1165}],728:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":732,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],729:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":735,"dup":42}],730:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":731,"_process":1149,"dup":43}],731:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":736}],732:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],733:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var encode = encodeURIComponent;
  var decode = decodeURIComponent;
  var trim = require('trim');
  var type = require('type');

  var pattern = /(\w+)\[(\d+)\]/

  /**
   * Parse the given query `str`.
   *
   * @param {String} str
   * @return {Object}
   * @api public
   */

  exports.parse = function(str){
    if ('string' != typeof str) return {};

    str = trim(str);
    if ('' == str) return {};
    if ('?' == str.charAt(0)) str = str.slice(1);

    var obj = {};
    var pairs = str.split('&');
    for (var i = 0; i < pairs.length; i++) {
      var parts = pairs[i].split('=');
      var key = decode(parts[0]);
      var m;

      if (m = pattern.exec(key)) {
        obj[m[1]] = obj[m[1]] || [];
        obj[m[1]][m[2]] = decode(parts[1]);
        continue;
      }

      obj[parts[0]] = null == parts[1]
        ? ''
        : decode(parts[1]);
    }

    return obj;
  };

  /**
   * Stringify the given `obj`.
   *
   * @param {Object} obj
   * @return {String}
   * @api public
   */

  exports.stringify = function(obj){
    if (!obj) return '';
    var pairs = [];

    for (var key in obj) {
      var value = obj[key];

      if ('array' == type(value)) {
        for (var i = 0; i < value.length; ++i) {
          pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i]));
        }
        continue;
      }

      pairs.push(encode(key) + '=' + encode(obj[key]));
    }

    return pairs.join('&');
  };

  },{"trim":737,"type":734}],734:[function(require,module,exports){
  /**
   * toString ref.
   */

  var toString = Object.prototype.toString;

  /**
   * Return the type of `val`.
   *
   * @param {Mixed} val
   * @return {String}
   * @api public
   */

  module.exports = function(val){
    switch (toString.call(val)) {
      case '[object Date]': return 'date';
      case '[object RegExp]': return 'regexp';
      case '[object Arguments]': return 'arguments';
      case '[object Array]': return 'array';
      case '[object Error]': return 'error';
    }

    if (val === null) return 'null';
    if (val === undefined) return 'undefined';
    if (val !== val) return 'nan';
    if (val && val.nodeType === 1) return 'element';

    val = val.valueOf
      ? val.valueOf()
      : Object.prototype.valueOf.apply(val)

    return typeof val;
  };

  },{}],735:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],736:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],737:[function(require,module,exports){

  exports = module.exports = trim;

  function trim(str){
    return str.replace(/^\s*|\s*$/g, '');
  }

  exports.left = function(str){
    return str.replace(/^\s*/, '');
  };

  exports.right = function(str){
    return str.replace(/\s*$/, '');
  };

  },{}],738:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');
  var reject = require('reject');
  var json = JSON;
  var is = require('is');
  var defaults = require('@ndhoule/defaults');

  /**
   * Expose `Parsely` integration.
   */

  var Parsely = (module.exports = integration('Parsely')
    .global('PARSELY')
    .option('apiKey', '')
    .option('dynamicTracking', false)
    .option('trackEvents', false)
    .option('inPixelMetadata', false)
    .tag('<script src="//d1z2jf7jlzjs58.cloudfront.net/p.js">'));

  /**
   * Initialize.
   */

  Parsely.prototype.initialize = function() {
    window.PARSELY = window.PARSELY || {};
    // Set autoload to false to trigger pageviews on deliberate `page calls`
    if (this.options.dynamicTracking) window.PARSELY.autotrack = false;
    var self = this;

    // append the meta tag we need first before JS fires
    var meta = document.createElement('meta');
    meta.id = 'parsely-cfg';
    meta.setAttribute('data-parsely-site', this.options.apiKey);
    var head = document.getElementsByTagName('head')[0];
    if (!head) return;
    head.appendChild(meta);

    this.load(function() {
      when(self.loaded, self.ready);
    });
  };

  Parsely.prototype.loaded = function() {
    return !!window.PARSELY.beacon;
  };

  /**
   * Page.
   *
   * Only Invoked if dynamicTracking is enabled (otherwise noop)
   */

  Parsely.prototype.page = function(page) {
    if (!this.options.dynamicTracking) return;
    var properties = page.properties();
    var data = {
      url: page.url(),
      urlref: page.referrer(),
      data: properties,
      js: 1
    };

    if (this.options.inPixelMetadata) {
      var aliasedProps = page.properties(this.options.customMapping);
      var metadata = {
        section: aliasedProps.section || page.category(),
        image_url: aliasedProps.image_url || aliasedProps.imageUrl,
        pub_date_tmsp: aliasedProps.pub_date_tmsp || aliasedProps.created,
        title: aliasedProps.title || page.title(),
        tags: aliasedProps.tags,
        authors: aliasedProps.authors,
        link: aliasedProps.link || page.url(),
        page_type: aliasedProps.page_type || 'post'
      };

      var authors = metadata.authors;
      var tags = metadata.tags;
      if (authors && !is.array(authors)) metadata.authors = [authors];
      if (tags && !is.array(tags)) metadata.tags = [tags];

      // strip any undefined or nulls
      data.metadata = json.stringify(reject(metadata));
    }

    window.PARSELY.beacon.trackPageView(data);
  };

  /**
   * Track.
   *
   * http://www.parsely.com/help/integration/dynamic/
   */

  Parsely.prototype.track = function(track) {
    /**
     * Because Parse.ly has two possible .track() endpoints, we need to
     * use a helper function to alias track calls. This is because we are
     * using spec'd event names/functions. If we call .track() within them,
     * it will trigger an infinite loop wherein the spec'd functions get called
     * continuously.
     *
     * See here: https://github.com/segmentio/analytics.js-integration/blob/master/lib/protos.js#L355
     */
    return this.trackDynamicEvent(track);
  };

  /**
   * Parse.ly requires metadata be passed about the video for started AND paused events.
   * Since our video spec does not specify passing any metadata about the video, we need
   * to store it from the videoContentStarted event as a global variable that the
   * videoPlaybackPaused event can access.
   */

  var CURRENT_VIDEO_METADATA = {};

  Parsely.prototype.videoContentStarted = function(track) {
    if (window.PARSELY.video) {
      var vidId = track.proxy('properties.assetId');
      var urlOverride = track.proxy('context.page.url');
      var metadata = this.parseVideoMetadata(track);

      CURRENT_VIDEO_METADATA = metadata;

      window.PARSELY.video.trackPlay(vidId, metadata, urlOverride);
    }

    return this.trackDynamicEvent(track);
  };

  Parsely.prototype.videoPlaybackPaused = function(track) {
    if (window.PARSELY.video) {
      var vidId = track.proxy('properties.assetId');
      var urlOverride = track.proxy('context.page.url');
      var metadata = this.parseVideoMetadata(track);

      metadata = defaults(metadata, CURRENT_VIDEO_METADATA);

      window.PARSELY.video.trackPause(vidId, metadata, urlOverride);
    }

    return this.trackDynamicEvent(track);
  };

  Parsely.prototype.videoPlaybackInterrupted = function(track) {
    if (window.PARSELY.video) {
      var vidId = track.proxy('properties.assetId');
      window.PARSELY.video.reset(vidId);
    }

    return this.trackDynamicEvent(track);
  };

  Parsely.prototype.trackDynamicEvent = function(track) {
    if (this.options.trackEvents) {
      window.PARSELY.beacon.trackPageView({
        data: track.properties(),
        action: track.event(),
        url: track.proxy('context.page.url'),
        urlref: track.proxy('context.page.referrer'),
        js: 1
      });
    }
  };

  Parsely.prototype.parseVideoMetadata = function(track) {
    var options = track.options(this.name) || {};
    var authors = track.proxy('properties.publisher');

    if (authors) authors = Array.isArray(authors) ? authors : [authors];

    // https://www.parse.ly/help/integration/video/#video-metadata
    // https://segment.com/docs/connections/spec/video/
    return reject({
      title: track.proxy('properties.title'),
      // Fallback on null to avoid NaN trickling through reject.
      pub_date_tmsp: +new Date(track.proxy('properties.airdate')) || null,
      image_url: options.imageUrl,
      section: track.proxy('properties.genre'),
      authors: authors,
      tags: track.proxy('properties.keywords')
    });
  };

  },{"@ndhoule/defaults":8,"@segment/analytics.js-integration":739,"do-when":1125,"is":744,"reject":1150}],739:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":740,"./statics":741,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":1126,"slug-component":1165}],740:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":742,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],741:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":743,"dup":51}],742:[function(require,module,exports){
  /* globals window, HTMLElement */

  'use strict';

  /**!
   * is
   * the definitive JavaScript type testing library
   *
   * @copyright 2013-2014 Enrico Marino / Jordan Harband
   * @license MIT
   */

  var objProto = Object.prototype;
  var owns = objProto.hasOwnProperty;
  var toStr = objProto.toString;
  var symbolValueOf;
  if (typeof Symbol === 'function') {
    symbolValueOf = Symbol.prototype.valueOf;
  }
  var bigIntValueOf;
  if (typeof BigInt === 'function') {
    bigIntValueOf = BigInt.prototype.valueOf;
  }
  var isActualNaN = function (value) {
    return value !== value;
  };
  var NON_HOST_TYPES = {
    'boolean': 1,
    number: 1,
    string: 1,
    undefined: 1
  };

  var base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
  var hexRegex = /^[A-Fa-f0-9]+$/;

  /**
   * Expose `is`
   */

  var is = {};

  /**
   * Test general.
   */

  /**
   * is.type
   * Test if `value` is a type of `type`.
   *
   * @param {*} value value to test
   * @param {String} type type
   * @return {Boolean} true if `value` is a type of `type`, false otherwise
   * @api public
   */

  is.a = is.type = function (value, type) {
    return typeof value === type;
  };

  /**
   * is.defined
   * Test if `value` is defined.
   *
   * @param {*} value value to test
   * @return {Boolean} true if 'value' is defined, false otherwise
   * @api public
   */

  is.defined = function (value) {
    return typeof value !== 'undefined';
  };

  /**
   * is.empty
   * Test if `value` is empty.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is empty, false otherwise
   * @api public
   */

  is.empty = function (value) {
    var type = toStr.call(value);
    var key;

    if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
      return value.length === 0;
    }

    if (type === '[object Object]') {
      for (key in value) {
        if (owns.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    return !value;
  };

  /**
   * is.equal
   * Test if `value` is equal to `other`.
   *
   * @param {*} value value to test
   * @param {*} other value to compare with
   * @return {Boolean} true if `value` is equal to `other`, false otherwise
   */

  is.equal = function equal(value, other) {
    if (value === other) {
      return true;
    }

    var type = toStr.call(value);
    var key;

    if (type !== toStr.call(other)) {
      return false;
    }

    if (type === '[object Object]') {
      for (key in value) {
        if (!is.equal(value[key], other[key]) || !(key in other)) {
          return false;
        }
      }
      for (key in other) {
        if (!is.equal(value[key], other[key]) || !(key in value)) {
          return false;
        }
      }
      return true;
    }

    if (type === '[object Array]') {
      key = value.length;
      if (key !== other.length) {
        return false;
      }
      while (key--) {
        if (!is.equal(value[key], other[key])) {
          return false;
        }
      }
      return true;
    }

    if (type === '[object Function]') {
      return value.prototype === other.prototype;
    }

    if (type === '[object Date]') {
      return value.getTime() === other.getTime();
    }

    return false;
  };

  /**
   * is.hosted
   * Test if `value` is hosted by `host`.
   *
   * @param {*} value to test
   * @param {*} host host to test with
   * @return {Boolean} true if `value` is hosted by `host`, false otherwise
   * @api public
   */

  is.hosted = function (value, host) {
    var type = typeof host[value];
    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];
  };

  /**
   * is.instance
   * Test if `value` is an instance of `constructor`.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an instance of `constructor`
   * @api public
   */

  is.instance = is['instanceof'] = function (value, constructor) {
    return value instanceof constructor;
  };

  /**
   * is.nil / is.null
   * Test if `value` is null.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is null, false otherwise
   * @api public
   */

  is.nil = is['null'] = function (value) {
    return value === null;
  };

  /**
   * is.undef / is.undefined
   * Test if `value` is undefined.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is undefined, false otherwise
   * @api public
   */

  is.undef = is.undefined = function (value) {
    return typeof value === 'undefined';
  };

  /**
   * Test arguments.
   */

  /**
   * is.args
   * Test if `value` is an arguments object.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an arguments object, false otherwise
   * @api public
   */

  is.args = is.arguments = function (value) {
    var isStandardArguments = toStr.call(value) === '[object Arguments]';
    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
    return isStandardArguments || isOldArguments;
  };

  /**
   * Test array.
   */

  /**
   * is.array
   * Test if 'value' is an array.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an array, false otherwise
   * @api public
   */

  is.array = Array.isArray || function (value) {
    return toStr.call(value) === '[object Array]';
  };

  /**
   * is.arguments.empty
   * Test if `value` is an empty arguments object.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an empty arguments object, false otherwise
   * @api public
   */
  is.args.empty = function (value) {
    return is.args(value) && value.length === 0;
  };

  /**
   * is.array.empty
   * Test if `value` is an empty array.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an empty array, false otherwise
   * @api public
   */
  is.array.empty = function (value) {
    return is.array(value) && value.length === 0;
  };

  /**
   * is.arraylike
   * Test if `value` is an arraylike object.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an arguments object, false otherwise
   * @api public
   */

  is.arraylike = function (value) {
    return !!value && !is.bool(value)
      && owns.call(value, 'length')
      && isFinite(value.length)
      && is.number(value.length)
      && value.length >= 0;
  };

  /**
   * Test boolean.
   */

  /**
   * is.bool
   * Test if `value` is a boolean.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a boolean, false otherwise
   * @api public
   */

  is.bool = is['boolean'] = function (value) {
    return toStr.call(value) === '[object Boolean]';
  };

  /**
   * is.false
   * Test if `value` is false.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is false, false otherwise
   * @api public
   */

  is['false'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === false;
  };

  /**
   * is.true
   * Test if `value` is true.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is true, false otherwise
   * @api public
   */

  is['true'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === true;
  };

  /**
   * Test date.
   */

  /**
   * is.date
   * Test if `value` is a date.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a date, false otherwise
   * @api public
   */

  is.date = function (value) {
    return toStr.call(value) === '[object Date]';
  };

  /**
   * is.date.valid
   * Test if `value` is a valid date.
   *
   * @param {*} value value to test
   * @returns {Boolean} true if `value` is a valid date, false otherwise
   */
  is.date.valid = function (value) {
    return is.date(value) && !isNaN(Number(value));
  };

  /**
   * Test element.
   */

  /**
   * is.element
   * Test if `value` is an html element.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an HTML Element, false otherwise
   * @api public
   */

  is.element = function (value) {
    return value !== undefined
      && typeof HTMLElement !== 'undefined'
      && value instanceof HTMLElement
      && value.nodeType === 1;
  };

  /**
   * Test error.
   */

  /**
   * is.error
   * Test if `value` is an error object.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an error object, false otherwise
   * @api public
   */

  is.error = function (value) {
    return toStr.call(value) === '[object Error]';
  };

  /**
   * Test function.
   */

  /**
   * is.fn / is.function (deprecated)
   * Test if `value` is a function.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a function, false otherwise
   * @api public
   */

  is.fn = is['function'] = function (value) {
    var isAlert = typeof window !== 'undefined' && value === window.alert;
    if (isAlert) {
      return true;
    }
    var str = toStr.call(value);
    return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
  };

  /**
   * Test number.
   */

  /**
   * is.number
   * Test if `value` is a number.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a number, false otherwise
   * @api public
   */

  is.number = function (value) {
    return toStr.call(value) === '[object Number]';
  };

  /**
   * is.infinite
   * Test if `value` is positive or negative infinity.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
   * @api public
   */
  is.infinite = function (value) {
    return value === Infinity || value === -Infinity;
  };

  /**
   * is.decimal
   * Test if `value` is a decimal number.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a decimal number, false otherwise
   * @api public
   */

  is.decimal = function (value) {
    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;
  };

  /**
   * is.divisibleBy
   * Test if `value` is divisible by `n`.
   *
   * @param {Number} value value to test
   * @param {Number} n dividend
   * @return {Boolean} true if `value` is divisible by `n`, false otherwise
   * @api public
   */

  is.divisibleBy = function (value, n) {
    var isDividendInfinite = is.infinite(value);
    var isDivisorInfinite = is.infinite(n);
    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
    return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);
  };

  /**
   * is.integer
   * Test if `value` is an integer.
   *
   * @param value to test
   * @return {Boolean} true if `value` is an integer, false otherwise
   * @api public
   */

  is.integer = is['int'] = function (value) {
    return is.number(value) && !isActualNaN(value) && value % 1 === 0;
  };

  /**
   * is.maximum
   * Test if `value` is greater than 'others' values.
   *
   * @param {Number} value value to test
   * @param {Array} others values to compare with
   * @return {Boolean} true if `value` is greater than `others` values
   * @api public
   */

  is.maximum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like');
    }
    var len = others.length;

    while (--len >= 0) {
      if (value < others[len]) {
        return false;
      }
    }

    return true;
  };

  /**
   * is.minimum
   * Test if `value` is less than `others` values.
   *
   * @param {Number} value value to test
   * @param {Array} others values to compare with
   * @return {Boolean} true if `value` is less than `others` values
   * @api public
   */

  is.minimum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like');
    }
    var len = others.length;

    while (--len >= 0) {
      if (value > others[len]) {
        return false;
      }
    }

    return true;
  };

  /**
   * is.nan
   * Test if `value` is not a number.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is not a number, false otherwise
   * @api public
   */

  is.nan = function (value) {
    return !is.number(value) || value !== value;
  };

  /**
   * is.even
   * Test if `value` is an even number.
   *
   * @param {Number} value value to test
   * @return {Boolean} true if `value` is an even number, false otherwise
   * @api public
   */

  is.even = function (value) {
    return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);
  };

  /**
   * is.odd
   * Test if `value` is an odd number.
   *
   * @param {Number} value value to test
   * @return {Boolean} true if `value` is an odd number, false otherwise
   * @api public
   */

  is.odd = function (value) {
    return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);
  };

  /**
   * is.ge
   * Test if `value` is greater than or equal to `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean}
   * @api public
   */

  is.ge = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value >= other;
  };

  /**
   * is.gt
   * Test if `value` is greater than `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean}
   * @api public
   */

  is.gt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value > other;
  };

  /**
   * is.le
   * Test if `value` is less than or equal to `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean} if 'value' is less than or equal to 'other'
   * @api public
   */

  is.le = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value <= other;
  };

  /**
   * is.lt
   * Test if `value` is less than `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean} if `value` is less than `other`
   * @api public
   */

  is.lt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value < other;
  };

  /**
   * is.within
   * Test if `value` is within `start` and `finish`.
   *
   * @param {Number} value value to test
   * @param {Number} start lower bound
   * @param {Number} finish upper bound
   * @return {Boolean} true if 'value' is is within 'start' and 'finish'
   * @api public
   */
  is.within = function (value, start, finish) {
    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
      throw new TypeError('all arguments must be numbers');
    }
    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
    return isAnyInfinite || (value >= start && value <= finish);
  };

  /**
   * Test object.
   */

  /**
   * is.object
   * Test if `value` is an object.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is an object, false otherwise
   * @api public
   */
  is.object = function (value) {
    return toStr.call(value) === '[object Object]';
  };

  /**
   * is.primitive
   * Test if `value` is a primitive.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a primitive, false otherwise
   * @api public
   */
  is.primitive = function isPrimitive(value) {
    if (!value) {
      return true;
    }
    if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
      return false;
    }
    return true;
  };

  /**
   * is.hash
   * Test if `value` is a hash - a plain object literal.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a hash, false otherwise
   * @api public
   */

  is.hash = function (value) {
    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;
  };

  /**
   * Test regexp.
   */

  /**
   * is.regexp
   * Test if `value` is a regular expression.
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a regexp, false otherwise
   * @api public
   */

  is.regexp = function (value) {
    return toStr.call(value) === '[object RegExp]';
  };

  /**
   * Test string.
   */

  /**
   * is.string
   * Test if `value` is a string.
   *
   * @param {*} value value to test
   * @return {Boolean} true if 'value' is a string, false otherwise
   * @api public
   */

  is.string = function (value) {
    return toStr.call(value) === '[object String]';
  };

  /**
   * Test base64 string.
   */

  /**
   * is.base64
   * Test if `value` is a valid base64 encoded string.
   *
   * @param {*} value value to test
   * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
   * @api public
   */

  is.base64 = function (value) {
    return is.string(value) && (!value.length || base64Regex.test(value));
  };

  /**
   * Test base64 string.
   */

  /**
   * is.hex
   * Test if `value` is a valid hex encoded string.
   *
   * @param {*} value value to test
   * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
   * @api public
   */

  is.hex = function (value) {
    return is.string(value) && (!value.length || hexRegex.test(value));
  };

  /**
   * is.symbol
   * Test if `value` is an ES6 Symbol
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a Symbol, false otherise
   * @api public
   */

  is.symbol = function (value) {
    return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';
  };

  /**
   * is.bigint
   * Test if `value` is an ES-proposed BigInt
   *
   * @param {*} value value to test
   * @return {Boolean} true if `value` is a BigInt, false otherise
   * @api public
   */

  is.bigint = function (value) {
    // eslint-disable-next-line valid-typeof
    return typeof BigInt === 'function' && toStr.call(value) === '[object BigInt]' && typeof bigIntValueOf.call(value) === 'bigint';
  };

  module.exports = is;

  },{}],743:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],744:[function(require,module,exports){
  /* globals window, HTMLElement */

  'use strict';

  /**!
   * is
   * the definitive JavaScript type testing library
   *
   * @copyright 2013-2014 Enrico Marino / Jordan Harband
   * @license MIT
   */

  var objProto = Object.prototype;
  var owns = objProto.hasOwnProperty;
  var toStr = objProto.toString;
  var symbolValueOf;
  if (typeof Symbol === 'function') {
    symbolValueOf = Symbol.prototype.valueOf;
  }
  var isActualNaN = function (value) {
    return value !== value;
  };
  var NON_HOST_TYPES = {
    'boolean': 1,
    number: 1,
    string: 1,
    undefined: 1
  };

  var base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
  var hexRegex = /^[A-Fa-f0-9]+$/;

  /**
   * Expose `is`
   */

  var is = {};

  /**
   * Test general.
   */

  /**
   * is.type
   * Test if `value` is a type of `type`.
   *
   * @param {Mixed} value value to test
   * @param {String} type type
   * @return {Boolean} true if `value` is a type of `type`, false otherwise
   * @api public
   */

  is.a = is.type = function (value, type) {
    return typeof value === type;
  };

  /**
   * is.defined
   * Test if `value` is defined.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if 'value' is defined, false otherwise
   * @api public
   */

  is.defined = function (value) {
    return typeof value !== 'undefined';
  };

  /**
   * is.empty
   * Test if `value` is empty.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is empty, false otherwise
   * @api public
   */

  is.empty = function (value) {
    var type = toStr.call(value);
    var key;

    if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
      return value.length === 0;
    }

    if (type === '[object Object]') {
      for (key in value) {
        if (owns.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    return !value;
  };

  /**
   * is.equal
   * Test if `value` is equal to `other`.
   *
   * @param {Mixed} value value to test
   * @param {Mixed} other value to compare with
   * @return {Boolean} true if `value` is equal to `other`, false otherwise
   */

  is.equal = function equal(value, other) {
    if (value === other) {
      return true;
    }

    var type = toStr.call(value);
    var key;

    if (type !== toStr.call(other)) {
      return false;
    }

    if (type === '[object Object]') {
      for (key in value) {
        if (!is.equal(value[key], other[key]) || !(key in other)) {
          return false;
        }
      }
      for (key in other) {
        if (!is.equal(value[key], other[key]) || !(key in value)) {
          return false;
        }
      }
      return true;
    }

    if (type === '[object Array]') {
      key = value.length;
      if (key !== other.length) {
        return false;
      }
      while (key--) {
        if (!is.equal(value[key], other[key])) {
          return false;
        }
      }
      return true;
    }

    if (type === '[object Function]') {
      return value.prototype === other.prototype;
    }

    if (type === '[object Date]') {
      return value.getTime() === other.getTime();
    }

    return false;
  };

  /**
   * is.hosted
   * Test if `value` is hosted by `host`.
   *
   * @param {Mixed} value to test
   * @param {Mixed} host host to test with
   * @return {Boolean} true if `value` is hosted by `host`, false otherwise
   * @api public
   */

  is.hosted = function (value, host) {
    var type = typeof host[value];
    return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];
  };

  /**
   * is.instance
   * Test if `value` is an instance of `constructor`.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an instance of `constructor`
   * @api public
   */

  is.instance = is['instanceof'] = function (value, constructor) {
    return value instanceof constructor;
  };

  /**
   * is.nil / is.null
   * Test if `value` is null.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is null, false otherwise
   * @api public
   */

  is.nil = is['null'] = function (value) {
    return value === null;
  };

  /**
   * is.undef / is.undefined
   * Test if `value` is undefined.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is undefined, false otherwise
   * @api public
   */

  is.undef = is.undefined = function (value) {
    return typeof value === 'undefined';
  };

  /**
   * Test arguments.
   */

  /**
   * is.args
   * Test if `value` is an arguments object.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an arguments object, false otherwise
   * @api public
   */

  is.args = is.arguments = function (value) {
    var isStandardArguments = toStr.call(value) === '[object Arguments]';
    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
    return isStandardArguments || isOldArguments;
  };

  /**
   * Test array.
   */

  /**
   * is.array
   * Test if 'value' is an array.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an array, false otherwise
   * @api public
   */

  is.array = Array.isArray || function (value) {
    return toStr.call(value) === '[object Array]';
  };

  /**
   * is.arguments.empty
   * Test if `value` is an empty arguments object.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an empty arguments object, false otherwise
   * @api public
   */
  is.args.empty = function (value) {
    return is.args(value) && value.length === 0;
  };

  /**
   * is.array.empty
   * Test if `value` is an empty array.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an empty array, false otherwise
   * @api public
   */
  is.array.empty = function (value) {
    return is.array(value) && value.length === 0;
  };

  /**
   * is.arraylike
   * Test if `value` is an arraylike object.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an arguments object, false otherwise
   * @api public
   */

  is.arraylike = function (value) {
    return !!value && !is.bool(value)
      && owns.call(value, 'length')
      && isFinite(value.length)
      && is.number(value.length)
      && value.length >= 0;
  };

  /**
   * Test boolean.
   */

  /**
   * is.bool
   * Test if `value` is a boolean.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a boolean, false otherwise
   * @api public
   */

  is.bool = is['boolean'] = function (value) {
    return toStr.call(value) === '[object Boolean]';
  };

  /**
   * is.false
   * Test if `value` is false.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is false, false otherwise
   * @api public
   */

  is['false'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === false;
  };

  /**
   * is.true
   * Test if `value` is true.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is true, false otherwise
   * @api public
   */

  is['true'] = function (value) {
    return is.bool(value) && Boolean(Number(value)) === true;
  };

  /**
   * Test date.
   */

  /**
   * is.date
   * Test if `value` is a date.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a date, false otherwise
   * @api public
   */

  is.date = function (value) {
    return toStr.call(value) === '[object Date]';
  };

  /**
   * is.date.valid
   * Test if `value` is a valid date.
   *
   * @param {Mixed} value value to test
   * @returns {Boolean} true if `value` is a valid date, false otherwise
   */
  is.date.valid = function (value) {
    return is.date(value) && !isNaN(Number(value));
  };

  /**
   * Test element.
   */

  /**
   * is.element
   * Test if `value` is an html element.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an HTML Element, false otherwise
   * @api public
   */

  is.element = function (value) {
    return value !== undefined
      && typeof HTMLElement !== 'undefined'
      && value instanceof HTMLElement
      && value.nodeType === 1;
  };

  /**
   * Test error.
   */

  /**
   * is.error
   * Test if `value` is an error object.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an error object, false otherwise
   * @api public
   */

  is.error = function (value) {
    return toStr.call(value) === '[object Error]';
  };

  /**
   * Test function.
   */

  /**
   * is.fn / is.function (deprecated)
   * Test if `value` is a function.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a function, false otherwise
   * @api public
   */

  is.fn = is['function'] = function (value) {
    var isAlert = typeof window !== 'undefined' && value === window.alert;
    if (isAlert) {
      return true;
    }
    var str = toStr.call(value);
    return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
  };

  /**
   * Test number.
   */

  /**
   * is.number
   * Test if `value` is a number.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a number, false otherwise
   * @api public
   */

  is.number = function (value) {
    return toStr.call(value) === '[object Number]';
  };

  /**
   * is.infinite
   * Test if `value` is positive or negative infinity.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
   * @api public
   */
  is.infinite = function (value) {
    return value === Infinity || value === -Infinity;
  };

  /**
   * is.decimal
   * Test if `value` is a decimal number.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a decimal number, false otherwise
   * @api public
   */

  is.decimal = function (value) {
    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;
  };

  /**
   * is.divisibleBy
   * Test if `value` is divisible by `n`.
   *
   * @param {Number} value value to test
   * @param {Number} n dividend
   * @return {Boolean} true if `value` is divisible by `n`, false otherwise
   * @api public
   */

  is.divisibleBy = function (value, n) {
    var isDividendInfinite = is.infinite(value);
    var isDivisorInfinite = is.infinite(n);
    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
    return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);
  };

  /**
   * is.integer
   * Test if `value` is an integer.
   *
   * @param value to test
   * @return {Boolean} true if `value` is an integer, false otherwise
   * @api public
   */

  is.integer = is['int'] = function (value) {
    return is.number(value) && !isActualNaN(value) && value % 1 === 0;
  };

  /**
   * is.maximum
   * Test if `value` is greater than 'others' values.
   *
   * @param {Number} value value to test
   * @param {Array} others values to compare with
   * @return {Boolean} true if `value` is greater than `others` values
   * @api public
   */

  is.maximum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like');
    }
    var len = others.length;

    while (--len >= 0) {
      if (value < others[len]) {
        return false;
      }
    }

    return true;
  };

  /**
   * is.minimum
   * Test if `value` is less than `others` values.
   *
   * @param {Number} value value to test
   * @param {Array} others values to compare with
   * @return {Boolean} true if `value` is less than `others` values
   * @api public
   */

  is.minimum = function (value, others) {
    if (isActualNaN(value)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.arraylike(others)) {
      throw new TypeError('second argument must be array-like');
    }
    var len = others.length;

    while (--len >= 0) {
      if (value > others[len]) {
        return false;
      }
    }

    return true;
  };

  /**
   * is.nan
   * Test if `value` is not a number.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is not a number, false otherwise
   * @api public
   */

  is.nan = function (value) {
    return !is.number(value) || value !== value;
  };

  /**
   * is.even
   * Test if `value` is an even number.
   *
   * @param {Number} value value to test
   * @return {Boolean} true if `value` is an even number, false otherwise
   * @api public
   */

  is.even = function (value) {
    return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);
  };

  /**
   * is.odd
   * Test if `value` is an odd number.
   *
   * @param {Number} value value to test
   * @return {Boolean} true if `value` is an odd number, false otherwise
   * @api public
   */

  is.odd = function (value) {
    return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);
  };

  /**
   * is.ge
   * Test if `value` is greater than or equal to `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean}
   * @api public
   */

  is.ge = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value >= other;
  };

  /**
   * is.gt
   * Test if `value` is greater than `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean}
   * @api public
   */

  is.gt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value > other;
  };

  /**
   * is.le
   * Test if `value` is less than or equal to `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean} if 'value' is less than or equal to 'other'
   * @api public
   */

  is.le = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value <= other;
  };

  /**
   * is.lt
   * Test if `value` is less than `other`.
   *
   * @param {Number} value value to test
   * @param {Number} other value to compare with
   * @return {Boolean} if `value` is less than `other`
   * @api public
   */

  is.lt = function (value, other) {
    if (isActualNaN(value) || isActualNaN(other)) {
      throw new TypeError('NaN is not a valid value');
    }
    return !is.infinite(value) && !is.infinite(other) && value < other;
  };

  /**
   * is.within
   * Test if `value` is within `start` and `finish`.
   *
   * @param {Number} value value to test
   * @param {Number} start lower bound
   * @param {Number} finish upper bound
   * @return {Boolean} true if 'value' is is within 'start' and 'finish'
   * @api public
   */
  is.within = function (value, start, finish) {
    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
      throw new TypeError('NaN is not a valid value');
    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
      throw new TypeError('all arguments must be numbers');
    }
    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
    return isAnyInfinite || (value >= start && value <= finish);
  };

  /**
   * Test object.
   */

  /**
   * is.object
   * Test if `value` is an object.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is an object, false otherwise
   * @api public
   */
  is.object = function (value) {
    return toStr.call(value) === '[object Object]';
  };

  /**
   * is.primitive
   * Test if `value` is a primitive.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a primitive, false otherwise
   * @api public
   */
  is.primitive = function isPrimitive(value) {
    if (!value) {
      return true;
    }
    if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
      return false;
    }
    return true;
  };

  /**
   * is.hash
   * Test if `value` is a hash - a plain object literal.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a hash, false otherwise
   * @api public
   */

  is.hash = function (value) {
    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;
  };

  /**
   * Test regexp.
   */

  /**
   * is.regexp
   * Test if `value` is a regular expression.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a regexp, false otherwise
   * @api public
   */

  is.regexp = function (value) {
    return toStr.call(value) === '[object RegExp]';
  };

  /**
   * Test string.
   */

  /**
   * is.string
   * Test if `value` is a string.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if 'value' is a string, false otherwise
   * @api public
   */

  is.string = function (value) {
    return toStr.call(value) === '[object String]';
  };

  /**
   * Test base64 string.
   */

  /**
   * is.base64
   * Test if `value` is a valid base64 encoded string.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
   * @api public
   */

  is.base64 = function (value) {
    return is.string(value) && (!value.length || base64Regex.test(value));
  };

  /**
   * Test base64 string.
   */

  /**
   * is.hex
   * Test if `value` is a valid hex encoded string.
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
   * @api public
   */

  is.hex = function (value) {
    return is.string(value) && (!value.length || hexRegex.test(value));
  };

  /**
   * is.symbol
   * Test if `value` is an ES6 Symbol
   *
   * @param {Mixed} value value to test
   * @return {Boolean} true if `value` is a Symbol, false otherise
   * @api public
   */

  is.symbol = function (value) {
    return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';
  };

  module.exports = is;

  },{}],745:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Group = require('segmentio-facade').Group;
  var Identify = require('segmentio-facade').Identify;
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var obj = require('obj-case');

  /**
   * Expose `Pendo` integration.
   */

  var Pendo = (module.exports = integration('Pendo')
    .global('pendo')
    .option('apiKey', '')
    .tag(
      '<script src="https://cdn.pendo.io/agent/static/{{ apiKey }}/pendo.js">'
    ));

  /**
   * Either use this as a TagLoader and all the relevant Pendo information will
   * already be loaded in window.pendo_options. Or, if not, they're using this in
   * a Segment way and will call identify and group when that information is
   * available. In which case, we want to use the API.
   *
   * @api public
   */

  Pendo.prototype.initialize = function() {
    window.pendo = window.pendo || {};
    window.pendo_options = window.pendo_options || {
      apiKey: this.options.apiKey,
      usePendoAgentAPI: true
    };

    this.load(this.ready, { apiKey: this.options.apiKey });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Pendo.prototype.loaded = function() {
    return !!window.pendo;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Pendo.prototype.identify = function(identify) {
    var group = this.analytics.group();
    var identifyGroup = new Group({
      groupId: group.id(),
      traits: group.traits()
    });

    _identify(identify, identifyGroup);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Pendo.prototype.group = function(group) {
    var user = this.analytics.user();
    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });
    _identify(identify, group);
  };

  function isUserAnonymous(identify) {
    return !identify.userId();
  }
  function pendoifyAnonymousId(anonymousId) {
    return '_PENDO_T_' + anonymousId;
  }

  /**
   * Internal Identify. Identify and Group trigger the same general call.
   *
   * @param {Identify} identify
   * @param {Group} group
   */

  function _identify(identify, group) {
    // Collapse everything into an options block.
    var id = isUserAnonymous(identify)
      ? pendoifyAnonymousId(identify.anonymousId())
      : identify.userId();

    var vObj = extend({ id: id }, identify.traits());
    var options = { visitor: vObj };

    var groupTraits = group.traits();

    var parentAccount = obj.find(groupTraits, 'parentAccount');
    if (parentAccount) {
      obj.delete(groupTraits, 'parentAccount');
      options.parentAccount = parentAccount;
    }

    var account = extend({ id: group.groupId() }, groupTraits);
    options.account = account;

    // Pick up everything else
    extend(window.pendo_options, options);

    // Identify is smart. It will only identify if things actually changed.
    // Given we are passing an options object, it will also call updateOptions()
    // updateOptions() only fires a meta event if the metadata changes.
    window.pendo.identify(window.pendo_options);
  }

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":746,"obj-case":1143,"segmentio-facade":1158}],746:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":747,"./statics":748,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":750,"slug-component":1165}],747:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],748:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":749,"dup":51}],749:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],750:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],751:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_pq');

  /**
   * Expose `PerfectAudience` integration.
   */

  var PerfectAudience = (module.exports = integration('Perfect Audience')
    .assumesPageview()
    .global('_pq')
    .option('siteId', '')
    .tag('<script src="//tag.perfectaudience.com/serve/{{ siteId }}.js">'));

  /**
   * Initialize.
   *
   * http://support.perfectaudience.com/knowledgebase/articles/212490-visitor-tracking-api
   *
   * @api public
   */

  PerfectAudience.prototype.initialize = function() {
    window._pq = window._pq || [];
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  PerfectAudience.prototype.loaded = function() {
    return !!(window._pq && window._pq.push);
  };

  /**
   * Track.
   *
   * http://support.perfectaudience.com/knowledgebase/articles/212490-visitor-tracking-api
   *
   * @api public
   * @param {Track} event
   */

  PerfectAudience.prototype.track = function(track) {
    var total = track.total() || track.revenue();
    var orderId = track.orderId();
    var props = {};
    var sendProps = false;
    if (total) {
      props.revenue = total;
      sendProps = true;
    }
    if (orderId) {
      props.orderId = orderId;
      sendProps = true;
    }

    if (!sendProps) return push('track', track.event());
    return push('track', track.event(), props);
  };

  /**
   * Product viewed.
   *
   * http://support.perfectaudience.com/knowledgebase/articles/212490-visitor-tracking-api
   *
   * @api private
   * @param {Track} track
   */

  PerfectAudience.prototype.productViewed = function(track) {
    var product = track.productId() || track.id() || track.sku();
    push('track', track.event());
    push('trackProduct', product);
  };

  /**
   * Completed Purchase.
   *
   * http://support.perfectaudience.com/knowledgebase/articles/212490-visitor-tracking-api
   *
   * @api private
   * @param {Track} track
   */

  PerfectAudience.prototype.orderCompleted = function(track) {
    var total = track.total() || track.revenue();
    var orderId = track.orderId();
    var props = {};
    if (total) props.revenue = total;
    if (orderId) props.orderId = orderId;
    push('track', track.event(), props);
  };

  },{"@segment/analytics.js-integration":752,"global-queue":1127}],752:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":753,"./statics":754,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":756,"slug-component":1165}],753:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],754:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":755,"dup":51}],755:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],756:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],757:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var each = require('@ndhoule/each');

  /**
   * Expose `Perimeterx` integration.
   */

  var Perimeterx = (module.exports = integration('Perimeterx')
    .global('PX')
    .global('_pxAppId')
    .option('appId', '')
    .option('customTraits', {})
    .tag('<script src="//client.perimeterx.net/{{ appId }}/main.min.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Perimeterx.prototype.initialize = function() {
    var options = this.options;
    var self = this;
    window._pxAppId = options.appId || '';
    this.globals.push(options.appId + '_asyncInit', options.appId);
    window[options.appId + '_asyncInit'] = function(px) {
      px.Events.on('score', function(result) {
        var traits = {};
        traits.pxResult = result;
        self.analytics.identify(traits, { integrations: { Perimeterx: false } });
      });
    };

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */

  Perimeterx.prototype.loaded = function() {
    return !!window.PX;
  };

  /**
   * Identify.
   *
   * Users have the ability to send custom traits to perimeterx. At some point perimeterx checks the
   * window object for these traits so no outbound call is made to perimeterx here.
   *
   * @api public
   * @param {Object} identify
   */

  Perimeterx.prototype.identify = function(identify) {
    // iterate over customTraits and set is as pxParam
    // window._pxParam1 = "<param1>";
    var customTraits = this.options.customTraits;
    var traits = identify.traits();

    each(function(trait, key) {
      if (traits[key]) {
        window[trait] = traits[key];
      }
    }, customTraits);
  };

  },{"@ndhoule/each":10,"@segment/analytics.js-integration":758}],758:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":759,"./statics":760,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":762,"slug-component":1165}],759:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],760:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":761,"dup":51}],761:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],762:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],763:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_prum');

  /**
   * Expose `Pingdom` integration.
   */

  var Pingdom = (module.exports = integration('Pingdom')
    .assumesPageview()
    .global('_prum')
    .global('PRUM_EPISODES')
    .option('id', '')
    .tag('<script src="//rum-static.pingdom.net/prum.min.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Pingdom.prototype.initialize = function() {
    window._prum = window._prum || [];
    push('id', this.options.id);
    var date = new Date();
    push('mark', 'firstbyte', date.getTime());
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Pingdom.prototype.loaded = function() {
    return !!(window._prum && window._prum.push !== Array.prototype.push);
  };

  },{"@segment/analytics.js-integration":764,"global-queue":1127}],764:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":765,"./statics":766,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],765:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":767,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],766:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":768,"dup":42}],767:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],768:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],769:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var analyticsEvents = require('analytics-events');

  /**
   * Expose `Pinterest` integration.
   */

  var Pinterest = (module.exports = integration('Pinterest Tag')
    .global('pintrk')
    .option('tid', '')
    .option('pinterestCustomProperties', [])
    .option('useEnhancedMatchLoad', false)
    .mapping('pinterestEventMapping')
    .tag('<script src="https://s.pinimg.com/ct/core.js"></script>'));

  Pinterest.prototype.initialize = function() {
    // We require a Tag ID to run this integration.
    if (!this.options.tid) return;

    // Preparation for loading the Pinterest script.
    (function(e){if(!window.pintrk){window.pintrk=function(){window.pintrk.queue.push(Array.prototype.slice.call(arguments))};var n=window.pintrk;n.queue=[],n.version="3.0";}})(); // eslint-disable-line

    this.load(this.ready);
    var traits = this.analytics.user().traits();
    if (traits && traits.email && this.options.useEnhancedMatchLoad) {
      var email = this.analytics.user().traits().email;
      window.pintrk('load', this.options.tid, { em: email });
    } else {
      window.pintrk('load', this.options.tid);
    }
    window.pintrk('page'); // This is treated semantically different than our own page implementation.

    this.createPropertyMapping();
  };

  Pinterest.prototype.loaded = function() {
    return !!(window.pintrk && window.pintrk.queue);
  };

  Pinterest.prototype.identify = function(identify) {
    // Set the Enhanced Match email if present  in .identify() call. The 'set' method piggybacks onto events because the values you set are not useful unless they relate to one or more events.
    // Hence, after 'set' is called, nothing will appear in either the network or via the tag helper extension.
    // But when the next event is called, a hashed value for an 'em' parameter will be in a JSON object encoded in the URL, and you can also see the email box in the tag helper extension.
    if (identify.email()) {
      window.pintrk('set', { np: 'segment', em: identify.email() });
    }
  };

  Pinterest.prototype.page = function(page) {
    // If we have a category, the use ViewCategory. Otherwise, use a normal PageVisit.
    if (page.category()) {
      window.pintrk('track', 'ViewCategory', {
        category: page.category(),
        name: page.name() || ''
      });
    } else {
      window.pintrk('track', 'PageVisit', {
        name: page.name() || ''
      });
    }
  };

  Pinterest.prototype.track = function(track) {
    // Send a Pinterest Event if mapped. Otherwise, send the call as-is.
    var segmentEvent = track.event();
    var pinterestEvent = this.getPinterestEvent(segmentEvent);
    var pinterestObject = this.generatePropertiesObject(track);

    if (pinterestEvent) {
      window.pintrk('track', pinterestEvent, pinterestObject);
    } else {
      window.pintrk('track', segmentEvent, pinterestObject);
    }
  };

  Pinterest.prototype.getPinterestEvent = function(segmentEvent) {
    for (var mappedEvent in this.options.pinterestEventMapping) {
      if (mappedEvent.toLowerCase() === segmentEvent.toLowerCase()) {
        return this.options.pinterestEventMapping[mappedEvent];
      }
    }

    var eventMap = [
      // Segment Inbound Event (Regex) -> Pinterest Outbound Event
      [analyticsEvents.productsSearched, 'Search'],
      [analyticsEvents.productListFiltered, 'Search'],
      [analyticsEvents.productAdded, 'AddToCart'],
      [analyticsEvents.orderCompleted, 'Checkout'],
      [analyticsEvents.videoPlaybackStarted, 'WatchVideo']
    ];

    for (var index in eventMap) {
      if (!eventMap.hasOwnProperty(index)) continue;
      var eventRegex = eventMap[index][0];
      var pinterestEvent = eventMap[index][1];

      if (eventRegex.test(segmentEvent)) {
        return pinterestEvent;
      }
    }
  };

  /**
   * Generate the property mappings for the integration. Account for product information being nested in a `products` array.
   */

  Pinterest.prototype.createPropertyMapping = function() {
    this.propertyMap = {
      // Segment Property: Pinterest Property
      query: 'search_query',
      order_id: 'order_id',
      coupon: 'coupon',
      value: 'value',
      currency: 'currency'
    };

    // This is a second map to allow us to loop over specific potentially-nested properties.
    this.productPropertyMap = {
      // Segment Property: Pinterest Property
      name: 'product_name',
      product_id: 'product_id',
      sku: 'product_id',
      category: 'product_category',
      variant: 'product_variant',
      price: 'product_price',
      quantity: 'product_quantity',
      brand: 'product_brand'
    };
  };

  /**
   * Fill our Properties for the pintrk() call.
   */

  Pinterest.prototype.generatePropertiesObject = function(track) {
    // Generate the properties object to send with the call.
    var pinterestProps = {};
    var trackValue;
    for (var prop in this.propertyMap) {
      if (!this.propertyMap.hasOwnProperty(prop)) continue;
      trackValue = track.proxy('properties.' + prop);
      if (trackValue) pinterestProps[this.propertyMap[prop]] = trackValue;
    }

    // Determine if there's a 'products' Array, then add in the specific features on that decision.
    var products = track.proxy('properties.products');
    var lineItemsArray;
    if (Array.isArray(products)) {
      lineItemsArray = [];
      for (var i = 0; i < products.length; i++) {
        for (var productProperty in this.productPropertyMap) {
          if (!this.productPropertyMap.hasOwnProperty(productProperty)) continue;
          trackValue = products[i][productProperty];
          if (trackValue) {
            // Product values are added into a `line_items` array, with a nested object. If that doesn't exist, make it first.
            if (lineItemsArray[i] === undefined) lineItemsArray[i] = {};
            lineItemsArray[i][
              this.productPropertyMap[productProperty]
            ] = trackValue;
          }
        }
      }
      if (lineItemsArray.length) pinterestProps.line_items = lineItemsArray;
    } else {
      // There will only be a single layer, since we have, at most, one product.
      lineItemsArray = [{}];
      var propAdded = false;
      for (var productProp in this.productPropertyMap) {
        if (!this.productPropertyMap.hasOwnProperty(productProp)) continue;
        trackValue = track.proxy('properties.' + productProp);
        if (trackValue) {
          lineItemsArray[0][this.productPropertyMap[productProp]] = trackValue;
          propAdded = true;
        }
      }
      if (propAdded) pinterestProps.line_items = lineItemsArray;
    }

    // Finally, add in any custom properties defined by the user.
    var customProps = this.options.pinterestCustomProperties;
    for (var j = 0; j < customProps.length; j++) {
      var customProperty = customProps[j];
      trackValue = track.proxy('properties.' + customProperty);
      if (trackValue) pinterestProps[customProperty] = trackValue;
    }

    return pinterestProps;
  };

  },{"@segment/analytics.js-integration":770,"analytics-events":1106}],770:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":771,"./statics":772,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":774,"dup":40,"slug-component":1165}],771:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":773,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],772:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":776,"dup":42}],773:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],774:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":775,"_process":1149,"dup":43}],775:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":777}],776:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],777:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],778:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var push = require('global-queue')('_paq');

  /**
   * Expose `Piwik` integration.
   */

  var Piwik = (module.exports = integration('Piwik')
    .global('_paq')
    .option('url', null)
    .option('siteId', '')
    .option('customVariableLimit', 5)
    .mapping('goals')
    .tag('<script src="{{ url }}/piwik.js">'));

  /**
   * Initialize.
   *
   * http://piwik.org/docs/javascript-tracking/#toc-asynchronous-tracking
   *
   * @api public
   */

  Piwik.prototype.initialize = function() {
    window._paq = window._paq || [];
    push('setSiteId', this.options.siteId);
    push('setTrackerUrl', this.options.url + '/piwik.php');
    push('enableLinkTracking');
    this.load(this.ready);
  };

  /**
   * Check if Piwik is loaded.
   *
   * @api private
   */

  Piwik.prototype.loaded = function() {
    return !!(window._paq && window._paq.push !== Array.prototype.push);
  };

  /**
   * Page
   *
   * @api public
   * @param {Page} page
   */

  Piwik.prototype.page = function() {
    push('trackPageView');
  };

  /**
   * Identify
   *
   * @api public
   * @param {Identify} identify
   */

  Piwik.prototype.identify = function(identify) {
    if (!identify.userId()) return;
    // Ref: http://developer.piwik.org/guides/tracking-javascript-guide#user-id
    push('setUserId', identify.userId().toString());
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Piwik.prototype.track = function(track) {
    var goals = this.goals(track.event());
    var revenue = track.revenue();
    var category = track.category() || 'All';
    var action = track.event();
    var name = track.proxy('properties.name') || track.proxy('properties.label');
    var value = track.value() || track.revenue();

    var options = track.options('Piwik');
    var customVariables = options.customVars || options.cvar;

    if (!is.object(customVariables)) {
      customVariables = {};
    }

    for (var i = 1; i <= this.options.customVariableLimit; i += 1) {
      if (customVariables[i]) {
        push(
          'setCustomVariable',
          i.toString(),
          customVariables[i][0],
          customVariables[i][1],
          'page'
        );
      }
    }

    each(goals, function(goal) {
      push('trackGoal', goal, revenue);
    });

    push('trackEvent', category, action, name, value);
  };

  },{"@segment/analytics.js-integration":779,"component-each":1112,"global-queue":1127,"is":1131}],779:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":780,"./statics":781,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],780:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":782,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],781:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":783,"dup":42}],782:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],783:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],784:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_kiq');
  var when = require('do-when');

  /**
   * Expose `Qualaroo` integration.
   */

  var Qualaroo = (module.exports = integration('Qualaroo')
    .assumesPageview()
    .global('_kiq')
    .option('customerId', '')
    .option('siteToken', '')
    .option('track', false)
    .tag(
      '<script src="https://cl.qualaroo.com/ki.js/{{ customerId }}/{{ siteToken }}.js">'
    ));

  /**
   * Initialize.
   *
   * @api public
   * @param {Object} page
   */

  Qualaroo.prototype.initialize = function() {
    window._kiq = window._kiq || [];
    var loaded = this.loaded;
    var ready = this.ready;
    this.load(function() {
      when(loaded, ready);
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Qualaroo.prototype.loaded = function() {
    return !!(window._kiq && window._kiq.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   * http://help.qualaroo.com/customer/portal/articles/731085-identify-survey-nudge-takers
   * http://help.qualaroo.com/customer/portal/articles/731091-set-additional-user-properties
   *
   * @api public
   * @param {Identify} identify
   */

  Qualaroo.prototype.identify = function(identify) {
    var traits = identify.traits();
    var id = identify.userId();
    var email = identify.email();
    if (email) id = email;
    if (id) push('identify', id);
    if (traits) push('set', traits);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Qualaroo.prototype.track = function(track) {
    if (!this.options.track) return;
    var event = track.event();
    var traits = {};
    traits['Triggered: ' + event] = true;
    this.identify(new Identify({ traits: traits }));
  };

  },{"@segment/analytics.js-integration":785,"do-when":1125,"global-queue":1127,"segmentio-facade":1158}],785:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":786,"./statics":787,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":788,"dup":40,"slug-component":1165}],786:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":790,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],787:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":791,"dup":42}],788:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":789,"_process":1149,"dup":43}],789:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":792}],790:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],791:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],792:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],793:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_iva');

  /**
   * Expose `QuanticMind` integration.
   */

  var QuanticMind = (module.exports = integration('QuanticMind')
    .global('_iva')
    .option('clientId', '')
    .option('domain', '')
    .tag('<script src="//analytics.staticiv.com/iva.js">')
    .mapping('events'));

  /**
   * Initialize.
   *
   * @api public
   */

  QuanticMind.prototype.initialize = function() {
    var domain = this.options.domain;
    window._iva = window._iva || [];
    push('setClientId', this.options.clientId);
    var userId = this.analytics.user().anonymousId();
    if (userId) push('setUserId', userId);
    if (domain) push('setDomain', domain);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  QuanticMind.prototype.loaded = function() {
    return !!(window._iva && window._iva.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  QuanticMind.prototype.identify = function(identify) {
    push('setUserId', identify.anonymousId());
  };

  /**
   * Page.
   *
   * @param {Page} page
   */

  QuanticMind.prototype.page = function() {
    // they want every landing page to send a "click" event.
    push('trackEvent', 'click');
  };

  /**
   * Track.
   *
   * Tracks everything except 'sale' events.
   *
   * @param {Track} track
   */

  QuanticMind.prototype.track = function(track) {
    var user = this.analytics.user();
    var events = this.events(track.event());
    var value = track.revenue() || track.value() || 0;
    var eventId = track.orderId() || user.anonymousId() || '';
    each(events, function(event) {
      // 'sale' is a special event that will be routed to a table that is deprecated on QuanticMind's end.
      // They don't want a generic 'sale' event to go to their deprecated table.
      if (event !== 'sale') {
        push('trackEvent', event, value, eventId);
      }
    });
  };

  },{"@segment/analytics.js-integration":794,"component-each":1112,"global-queue":1127}],794:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":795,"./statics":796,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],795:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":797,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],796:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":798,"dup":42}],797:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],798:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],799:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Quora Conversion Pixel` integration.
   */

  var Quora = (module.exports = integration('Quora Conversion Pixel')
    .global('qp')
    .option('writeKey', '')
    .option('trackEvents', [])
    .tag('<script src="https://a.quora.com/qevents.js"></script>'));

  Quora.prototype.initialize = function() {
    // We require a write key to run this integration.
    if (!this.options.writeKey) return;

    (function () {if(window.qp) return; var n=window.qp=function(){n.qp?n.qp.apply(n,arguments):n.queue.push(arguments);}; n.queue=[];})() // eslint-disable-line

    this.load(this.ready);
    window.qp('init', this.options.writeKey);
    window.qp('track', 'ViewContent');
  };

  Quora.prototype.loaded = function() {
    return window.qp;
    // return !!(window.qp && window.qp.uuid)
  };

  Quora.prototype.track = function(track) {
    // Right now, Quora only supports a single kind of track event. If the user wants a specific event name to fire it, then do so.
    for (var i = 0; i < this.options.trackEvents.length; i++) {
      var currentPermittedEvent = this.options.trackEvents[i];
      if (currentPermittedEvent.toLowerCase() === track.event().toLowerCase()) {
        window.qp('track', 'Generic');
        return;
      }
    }
  };

  },{"@segment/analytics.js-integration":800}],800:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":801,"./statics":802,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":803,"dup":40,"slug-component":1165}],801:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":805,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],802:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":806,"dup":42}],803:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":804,"_process":1149,"dup":43}],804:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":807}],805:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],806:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],807:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],808:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var convertDates = require('@segment/convert-dates');
  var del = require('obj-case').del;
  var alias = require('@segment/alias');

  /**
   * Expose `Ramen` integration.
   */

  var Ramen = (module.exports = integration('Ramen')
    .global('Ramen')
    .global('_ramen')
    .option('organization_id', '')
    .tag('<script src="//cdn.ramen.is/assets/ramen.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Ramen.prototype.initialize = function() {
    window._ramen = window._ramen || [];
    /* eslint-disable */
    (function(){var a,b,c; a = function(f){return function(){window._ramen.push([f].concat(Array.prototype.slice.call(arguments,0))); }; }; b = ["boot","ready","identify","group","track","page","reset","ask"]; for (c = 0; c < b.length; c++) {window._ramen[b[c]] = a(b[c]); } })();
    /* eslint-enable */
    window._ramen.boot(this.options.organization_id, this.options);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Ramen.prototype.loaded = function() {
    return !!(window._ramen && window._ramen.push !== Array.prototype.push);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Ramen.prototype.group = function(group) {
    if (!this.identified) {
      window._ramen.identify();
      this.identified = true;
    }

    var props = group.traits({ createdAt: 'created', created: 'created_at' });
    if (group.groupId()) props.id = group.groupId();

    window._ramen.group(props);
  };

  /**
   * Page.
   *
   * @api public
   */

  Ramen.prototype.page = function() {
    if (!this.identified) {
      window._ramen.identify();
      this.identified = true;
    }

    window._ramen.page();
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Ramen.prototype.track = function(track) {
    if (!this.identified) {
      window._ramen.identify();
      this.identified = true;
    }

    window._ramen.track(track.event());
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Ramen.prototype.identify = function(identify) {
    // Ramen requires that `identify`'d users have an `id`.
    // For anonymous visitors, simply do not call `analytics.identify`
    // and the rest of the integration will handle it.
    if (!identify.userId()) return;

    var user;
    var traits;
    var opts;

    traits = identify.traits();
    opts = identify.options(this.name);

    // Setup the basic `user` attributes: id, email, created_at, and name
    // `null` values are OK. Ramen will ignore them.

    user = { id: identify.userId() };

    if (traits.email) {
      user.email = traits.email;
    }

    if (identify.created()) {
      user.created_at = identify.created();
    }

    if (identify.name()) {
      user.name = identify.name();
    }

    if (traits.company && traits.company.id) {
      user.company = alias(traits.company, {
        createdAt: 'created',
        created: 'created_at'
      });
    }

    // Clear out Ramen-specific values from traits, set traits to equal
    // `user.traits`
    del(traits, 'email');
    del(traits, 'name');
    del(traits, 'id');
    del(traits, 'created');
    del(traits, 'createdAt');
    del(traits, 'company');
    user.traits = traits;

    // Convert all timestamps to epoch seconds
    user = convertDates(user, function(date) {
      return Math.floor(date / 1000);
    });

    user.traits = alias(user.traits, { createdAt: 'created' });
    user.traits = alias(user.traits, { created: 'created_at' });

    // Rename `auth_hash_timestamp` to `timestamp` for secure mode
    opts = alias(opts, { auth_hash_timestamp: 'timestamp' });

    window._ramen.identify(user, opts);
    this.identified = true;
  };

  },{"@segment/alias":21,"@segment/analytics.js-integration":809,"@segment/convert-dates":1087,"obj-case":1143}],809:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":810,"./statics":811,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],810:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":812,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],811:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":813,"dup":42}],812:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],813:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],814:[function(require,module,exports){
  'use strict';

  // Spec: https://github.com/segmentio/analytics.js-private/issues/79

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Rockerbox`.
   */

  var Rockerbox = (module.exports = integration('Rockerbox')
    .option('source', '')
    .option('allAnSeg', '')
    .option('customerAnSeg', '')
    .option('conversionId', '')
    .option('segmentId', '')
    .mapping('events')
    .tag(
      'page',
      '<script src="https://getrockerbox.com/pixel?source={{ source }}&type=imp&an_seg={{ allAnSeg }}">'
    )
    .tag(
      'user',
      '<script src="https://getrockerbox.com/pixel?source={{ source }}&type=imp&an_seg={{ customerAnSeg }}">'
    )
    .tag(
      'appnexus',
      '<script src="https://secure.adnxs.com/px?id={{ conversionId }}&seg={{ segmentId }}&t=1&order_id={{ id }}">'
    )
    .tag(
      'track',
      '<script src="https://getrockerbox.com/pixel?source={{ source }}&type=conv&id={{ conversionId }}&an_seg={{ segmentId }}&order_type={{ id }}">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  Rockerbox.prototype.initialize = function() {
    this.ready();
  };

  /**
   * Page.
   *
   * @api public
   */

  Rockerbox.prototype.page = function() {
    var user = this.analytics.user();
    // order of query parameters is important
    this.load('page');
    if (user.id()) this.load('user');
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  Rockerbox.prototype.track = function(track) {
    var user = this.analytics.user();
    var events = this.events(track.event());
    var self = this;

    each(events, function(event) {
      var conversionId = event.conversionId;
      var segmentId = event.segmentId;
      var property = event.property || 'email';
      var id;

      switch (property) {
        case 'email':
          id = user && email(user);
          break;
        case 'orderId':
          id = track.orderId();
          break;
        case 'userId':
          id = user && user.id();
          break;
        case 'revenue':
          id = track.revenue();
          break;
        default:
        // No default case
      }

      var params = {
        conversionId: conversionId,
        segmentId: segmentId,
        id: id
      };

      // load 2 pixels, parameter order is important.
      self.load('appnexus', params);
      self.load('track', params);
    });
  };

  /**
   * Get email from user.
   *
   * @param {Object} user
   * @return {String}
   */

  function email(user) {
    var identify = new Identify({ userId: user.id(), traits: user.traits() });
    return identify.email();
  }

  },{"@segment/analytics.js-integration":815,"component-each":1112,"segmentio-facade":1158}],815:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":816,"./statics":817,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":818,"dup":40,"slug-component":1165}],816:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":820,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],817:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":821,"dup":42}],818:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":819,"_process":1149,"dup":43}],819:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":822}],820:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],821:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],822:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],823:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `RocketFuel`.
   */

  var RocketFuel = (module.exports = integration('Rocket Fuel')
    .option('accountId', '')
    .option('universalActionId', '')
    .tag(
      'universal',
      '<img src="//{{ universalActionId }}p.rfihub.com/ca.gif?rb={{ accountId }}&ca={{ universalActionId }}&ra={{ cacheBuster }}&custtype={{ custType }}"/>'
    )
    .tag(
      'conversion',
      '<img src="//p.rfihub.com/ca.gif?rb={{ accountId }}&ca={{ actionId }}&ra={{ cacheBuster }}"/>'
    )
    .tag(
      'completed order',
      '<img src="//p.rfihub.com/ca.gif?rb={{ accountId }}&ca={{ actionId }}&ra={{ cacheBuster }}&transid={{ orderId }}&revenue={{ orderTotal }}&pid={{ productIds }}"/>'
    )
    .mapping('events'));

  /**
   * Page load the universal pixel.
   *
   * @api public
   * @param {Page} page
   */

  RocketFuel.prototype.page = function() {
    var user = this.analytics.user();
    var custType = 'new';
    if (user.id()) custType = 'existing';

    this.load('universal', {
      custType: custType,
      cacheBuster: this.cacheBuster()
    });
  };

  /**
   * Track conversion events.
   *
   * @param {Track} track
   */

  RocketFuel.prototype.track = function(track) {
    var orderId = track.orderId();
    var total = (track.total() || 0).toFixed(2);
    var productIds = this.productIds(track.products());

    var events = this.events(track.event());
    var self = this;
    each(events, function(event) {
      if (orderId && total) {
        return self.load('completed order', {
          actionId: event,
          orderTotal: total,
          orderId: orderId,
          productIds: productIds,
          cacheBuster: self.cacheBuster()
        });
      }
      return self.load('conversion', {
        actionId: event,
        cacheBuster: self.cacheBuster()
      });
    });
  };

  /**
   * Join all the product IDs together for RocketFuel.
   *
   * @api private
   * @param {Object[]} products
   */

  // TODO: Refactor to use pluck(products, 'id').join(,)
  RocketFuel.prototype.productIds = function(products) {
    var ids = [];
    each(products, function(product) {
      ids.push(product.id);
    });
    return ids.join(',');
  };

  /**
   * Generate a random number for cachebusting.
   *
   * @api private
   */

  RocketFuel.prototype.cacheBuster = function() {
    return Math.round(Math.random() * 99999999);
  };

  },{"@segment/analytics.js-integration":824,"component-each":1112}],824:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":825,"./statics":826,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":827,"dup":40,"slug-component":1165}],825:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":829,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],826:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":830,"dup":42}],827:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":828,"_process":1149,"dup":43}],828:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":831}],829:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],830:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],831:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],832:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Rollbar` integration.
   */

  var RollbarIntegration = (module.exports = integration('Rollbar')
    .global('Rollbar')
    .global('rollbar')
    .option('identify', true)
    .option('accessToken', '')
    .option('environment', 'unknown')
    .option('captureUncaught', true)
    .option('captureUnhandledRejections', false)
    .option('sourceMapEnabled', false)
    .option('codeVersion', '')
    .option('guessUncaughtFrames', false)
    .option('ignoredMessages', [])
    .option('loadTimeout', 60000)
    .option('verbose', false));

  /**
   * Initialize.
   *
   * @api public
   */

  RollbarIntegration.prototype.initialize = function() {
    /**
     * Configuration option available.
     * https://docs.rollbar.com/docs/rollbarjs-configuration-reference#section-reference
     *
     */
    window._rollbarConfig = this.config = {
      accessToken: this.options.accessToken,
      captureUncaught: this.options.captureUncaught,
      captureUnhandledRejections: this.options.captureUnhandledRejections,
      verbose: this.options.verbose,
      payload: {
        environment: this.options.environment,
        client: {
          javascript: {
            source_map_enabled: this.options.sourceMapEnabled,
            code_version: this.options.codeVersion,
            guess_uncaught_frames: this.options.guessUncaughtFrames
          }
        }
      }
    };

    var msg = this.options.ignoredMessages;
    if (msg.length > 0) {
      var ret = [];
      // clean out array
      for (var x = 0; x < msg.length; x++) {
        if (msg[x] !== null && msg[x] !== '') ret.push(msg[x]);
      }
      window._rollbarConfig.ignoredMessages = ret;
    }

    /* eslint-disable */
    !function(r){var e={};function o(n){if(e[n])return e[n].exports;var t=e[n]={i:n,l:!1,exports:{}};return r[n].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=r,o.c=e,o.d=function(r,e,n){o.o(r,e)||Object.defineProperty(r,e,{enumerable:!0,get:n})},o.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},o.t=function(r,e){if(1&e&&(r=o(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var t in r)o.d(n,t,function(e){return r[e]}.bind(null,t));return n},o.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return o.d(e,"a",e),e},o.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},o.p="",o(o.s=0)}([function(r,e,o){"use strict";var n=o(1),t=o(5);_rollbarConfig=_rollbarConfig||{},_rollbarConfig.rollbarJsUrl=_rollbarConfig.rollbarJsUrl||"https://cdn.rollbar.com/rollbarjs/refs/tags/v2.21.1/rollbar.min.js",_rollbarConfig.async=void 0===_rollbarConfig.async||_rollbarConfig.async;var a=n.setupShim(window,_rollbarConfig),l=t(_rollbarConfig);window.rollbar=n.Rollbar,a.loadFull(window,document,!_rollbarConfig.async,_rollbarConfig,l)},function(r,e,o){"use strict";var n=o(2),t=o(3);function a(r){return function(){try{return r.apply(this,arguments)}catch(r){try{console.error("[Rollbar]: Internal error",r)}catch(r){}}}}var l=0;function i(r,e){this.options=r,this._rollbarOldOnError=null;var o=l++;this.shimId=function(){return o},"undefined"!=typeof window&&window._rollbarShims&&(window._rollbarShims[o]={handler:e,messages:[]})}var s=o(4),d=function(r,e){return new i(r,e)},c=function(r){return new s(d,r)};function u(r){return a((function(){var e=this,o=Array.prototype.slice.call(arguments,0),n={shim:e,method:r,args:o,ts:new Date};window._rollbarShims[this.shimId()].messages.push(n)}))}i.prototype.loadFull=function(r,e,o,n,t){var l=!1,i=e.createElement("script"),s=e.getElementsByTagName("script")[0],d=s.parentNode;i.crossOrigin="",i.src=n.rollbarJsUrl,o||(i.async=!0),i.onload=i.onreadystatechange=a((function(){if(!(l||this.readyState&&"loaded"!==this.readyState&&"complete"!==this.readyState)){i.onload=i.onreadystatechange=null;try{d.removeChild(i)}catch(r){}l=!0,function(){var e;if(void 0===r._rollbarDidLoad){e=new Error("rollbar.js did not load");for(var o,n,a,l,i=0;o=r._rollbarShims[i++];)for(o=o.messages||[];n=o.shift();)for(a=n.args||[],i=0;i<a.length;++i)if("function"==typeof(l=a[i])){l(e);break}}"function"==typeof t&&t(e)}()}})),d.insertBefore(i,s)},i.prototype.wrap=function(r,e,o){try{var n;if(n="function"==typeof e?e:function(){return e||{}},"function"!=typeof r)return r;if(r._isWrap)return r;if(!r._rollbar_wrapped&&(r._rollbar_wrapped=function(){o&&"function"==typeof o&&o.apply(this,arguments);try{return r.apply(this,arguments)}catch(o){var e=o;throw e&&("string"==typeof e&&(e=new String(e)),e._rollbarContext=n()||{},e._rollbarContext._wrappedSource=r.toString(),window._rollbarWrappedError=e),e}},r._rollbar_wrapped._isWrap=!0,r.hasOwnProperty))for(var t in r)r.hasOwnProperty(t)&&(r._rollbar_wrapped[t]=r[t]);return r._rollbar_wrapped}catch(e){return r}};for(var p="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleAnonymousErrors,handleUnhandledRejection,captureEvent,captureDomContentLoaded,captureLoad".split(","),f=0;f<p.length;++f)i.prototype[p[f]]=u(p[f]);r.exports={setupShim:function(r,e){if(r){var o=e.globalAlias||"Rollbar";if("object"==typeof r[o])return r[o];r._rollbarShims={},r._rollbarWrappedError=null;var l=new c(e);return a((function(){e.captureUncaught&&(l._rollbarOldOnError=r.onerror,n.captureUncaughtExceptions(r,l,!0),e.wrapGlobalEventHandlers&&t(r,l,!0)),e.captureUnhandledRejections&&n.captureUnhandledRejections(r,l,!0);var a=e.autoInstrument;return!1!==e.enabled&&(void 0===a||!0===a||"object"==typeof a&&a.network)&&r.addEventListener&&(r.addEventListener("load",l.captureLoad.bind(l)),r.addEventListener("DOMContentLoaded",l.captureDomContentLoaded.bind(l))),r[o]=l,l}))()}},Rollbar:c}},function(r,e,o){"use strict";function n(r,e,o,n){r._rollbarWrappedError&&(n[4]||(n[4]=r._rollbarWrappedError),n[5]||(n[5]=r._rollbarWrappedError._rollbarContext),r._rollbarWrappedError=null);var t=e.handleUncaughtException.apply(e,n);o&&o.apply(r,n),"anonymous"===t&&(e.anonymousErrorsPending+=1)}r.exports={captureUncaughtExceptions:function(r,e,o){if(r){var t;if("function"==typeof e._rollbarOldOnError)t=e._rollbarOldOnError;else if(r.onerror){for(t=r.onerror;t._rollbarOldOnError;)t=t._rollbarOldOnError;e._rollbarOldOnError=t}e.handleAnonymousErrors();var a=function(){var o=Array.prototype.slice.call(arguments,0);n(r,e,t,o)};o&&(a._rollbarOldOnError=t),r.onerror=a}},captureUnhandledRejections:function(r,e,o){if(r){"function"==typeof r._rollbarURH&&r._rollbarURH.belongsToShim&&r.removeEventListener("unhandledrejection",r._rollbarURH);var n=function(r){var o,n,t;try{o=r.reason}catch(r){o=void 0}try{n=r.promise}catch(r){n="[unhandledrejection] error getting `promise` from event"}try{t=r.detail,!o&&t&&(o=t.reason,n=t.promise)}catch(r){}o||(o="[unhandledrejection] error getting `reason` from event"),e&&e.handleUnhandledRejection&&e.handleUnhandledRejection(o,n)};n.belongsToShim=o,r._rollbarURH=n,r.addEventListener("unhandledrejection",n)}}}},function(r,e,o){"use strict";function n(r,e,o){if(e.hasOwnProperty&&e.hasOwnProperty("addEventListener")){for(var n=e.addEventListener;n._rollbarOldAdd&&n.belongsToShim;)n=n._rollbarOldAdd;var t=function(e,o,t){n.call(this,e,r.wrap(o),t)};t._rollbarOldAdd=n,t.belongsToShim=o,e.addEventListener=t;for(var a=e.removeEventListener;a._rollbarOldRemove&&a.belongsToShim;)a=a._rollbarOldRemove;var l=function(r,e,o){a.call(this,r,e&&e._rollbar_wrapped||e,o)};l._rollbarOldRemove=a,l.belongsToShim=o,e.removeEventListener=l}}r.exports=function(r,e,o){if(r){var t,a,l="EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(",");for(t=0;t<l.length;++t)r[a=l[t]]&&r[a].prototype&&n(e,r[a].prototype,o)}}},function(r,e,o){"use strict";function n(r,e){this.impl=r(e,this),this.options=e,function(r){for(var e=function(r){return function(){var e=Array.prototype.slice.call(arguments,0);if(this.impl[r])return this.impl[r].apply(this.impl,e)}},o="log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleAnonymousErrors,handleUnhandledRejection,_createItem,wrap,loadFull,shimId,captureEvent,captureDomContentLoaded,captureLoad".split(","),n=0;n<o.length;n++)r[o[n]]=e(o[n])}(n.prototype)}n.prototype._swapAndProcessMessages=function(r,e){var o,n,t;for(this.impl=r(this.options);o=e.shift();)n=o.method,t=o.args,this[n]&&"function"==typeof this[n]&&("captureDomContentLoaded"===n||"captureLoad"===n?this[n].apply(this,[t[0],o.ts]):this[n].apply(this,t));return this},r.exports=n},function(r,e,o){"use strict";r.exports=function(r){return function(e){if(!e&&!window._rollbarInitialized){for(var o,n,t=(r=r||{}).globalAlias||"Rollbar",a=window.rollbar,l=function(r){return new a(r)},i=0;o=window._rollbarShims[i++];)n||(n=o.handler),o.handler._swapAndProcessMessages(l,o.messages);window[t]=n,window._rollbarInitialized=!0}}}}]);
    /* eslint-enable */
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {Boolean}
   */

  RollbarIntegration.prototype.loaded = function() {
    return !!window._rollbarDidLoad;
  };

  /**
   * Load.
   *
   * @api public
   * @param {Function} callback
   */

  RollbarIntegration.prototype.load = function(callback) {
    var loadedCheck = this.loaded;
    var startTime = new Date().getTime();
    var timeout = this.options.loadTimeout;

    function timer() {
      if (loadedCheck()) {
        return callback();
      }
      if (new Date().getTime() - startTime >= timeout) {
        return callback(new Error('Rollbar timed out while loading'));
      }

      setTimeout(timer, 1);
    }
    timer();
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  RollbarIntegration.prototype.identify = function(identify) {
    // do stuff with `id` or `traits`
    if (!this.options.identify) return;

    // Don't allow identify without a user id
    var uid = identify.userId();
    if (uid === null || uid === undefined) return;

    var rollbar = window.Rollbar;
    var person = { id: uid };
    extend(person, identify.traits());
    rollbar.configure({ payload: { person: person } });
  };

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":833}],833:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":834,"./statics":835,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],834:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":836,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],835:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":837,"dup":42}],836:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],837:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],838:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Route` integration.
   */

  var Route = (module.exports = integration('Route')
    .global('_rq')
    .global('_route')
    .option('organizationId', '')
    .tag(
      '<script id="rtracker" data-organization-id="{{ organizationId }}" data-source="segment.com" src="//www.routecdn.com/tracker/route-tracker-min.js">'
    ));

  /**
   * Initialize Route.
   *
   * @api public
   */

  Route.prototype.initialize = function() {
    window._rq = window._rq || [];
    window._route = window._route || [];
    window._route.methods = ['identify', 'track', 'trackById'];
    window._route.factory = function(method) {
      return function() {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(method);
        window._rq.push(args);
        return window._rq;
      };
    };
    for (var i = 0; i < window._route.methods.length; i++) {
      var key = window._route.methods[i];
      window._route[key] = window._route.factory(key);
    }
    this.load(this.ready);
  };

  /**
   * Has the Route library been loaded yet?
   *
   * @api private
   * @return {Boolean}
   */

  Route.prototype.loaded = function() {
    return window._rq && window._rq.push !== Array.prototype.push;
  };

  /**
   * Identify a user.
   *
   * @api public
   * @param {Track} identify
   */

  Route.prototype.identify = function(identify) {
    window._route.identify(identify.traits());
  };

  /**
   * Track an event.
   *
   * @api public
   * @param {Track} track
   */

  Route.prototype.track = function(track) {
    window._route.track(track.event());
  };

  },{"@segment/analytics.js-integration":839}],839:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":840,"./statics":841,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],840:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":842,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],841:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":843,"dup":42}],842:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],843:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],844:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var objCase = require('obj-case');

  /**
   * Expose `SaaSquatch` integration.
   */

  var SaaSquatch = (module.exports = integration('SaaSquatch')
    .option('tenantAlias', '')
    .option('referralImage', '')
    .global('_sqh')
    .tag(
      '<script src="//d2rcp9ak152ke1.cloudfront.net/assets/javascripts/squatch.min.js">'
    ));

  /**
   * Initialize.
   *
   * @api public
   */

  SaaSquatch.prototype.initialize = function() {
    window._sqh = window._sqh || [];
    window._sqh.push([
      'init',
      {
        tenant_alias: this.options.tenantAlias
      }
    ]);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  SaaSquatch.prototype.loaded = function() {
    return window._sqh && window._sqh.push !== Array.prototype.push;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   */

  SaaSquatch.prototype.identify = function(identify) {
    var sqh = window._sqh;
    var opts = identify.options(this.name);
    var id = identify.userId();
    var email = identify.email();

    if (!(id || email)) return;
    if (this.called) return;

    var init = identify.traits();

    init.email = email;
    init.user_id = id;
    objCase.del(init, 'id');

    init.tenant_alias = this.options.tenantAlias;

    init.first_name = identify.firstName();
    init.last_name = identify.lastName();
    init.user_image = identify.avatar();

    // Pull SaaSquatch specific properties from options, but fallback to traits
    var properties = [
      'account_id',
      'payment_provider_id',
      'account_status',
      'referral_code',
      'user_referral_code',
      'checksum',
      'mode',
      'locale'
    ];
    for (var i = 0; i < properties.length; i++) {
      var prop = properties[i];
      var value = objCase.find(opts, prop) || objCase.find(init, prop);
      objCase.del(init, prop);
      if (value) {
        init[prop] = value;
      }
    }

    if (init.payment_provider_id === 'null') {
      init.payment_provider_id = null;
    }

    var image =
      objCase.find(opts, 'referralImage') ||
      objCase.find(init, 'referralImage') ||
      this.options.referralImage;
    if (image) {
      objCase.del(init, 'referralImage');
      init.fb_share_image = image;
    }

    sqh.push(['init', init]);
    this.called = true;
    this.load();
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  SaaSquatch.prototype.group = function(group) {
    var sqh = window._sqh;
    var id = group.groupId();
    var image = group.proxy('traits.referralImage') || this.options.referralImage;
    var opts = group.options(this.name);

    // tenant_alias is required.
    if (this.called) return;

    var init = {
      tenant_alias: this.options.tenantAlias,
      account_id: id
    };

    if (opts.checksum) init.checksum = opts.checksum;
    if (image) init.fb_share_image = image;

    sqh.push(['init', init]);
    this.called = true;
    this.load();
  };

  },{"@segment/analytics.js-integration":845,"obj-case":1143}],845:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":846,"./statics":847,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],846:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":848,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],847:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":849,"dup":42}],848:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],849:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],850:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Salesforce DMP` integration.
   */

  var SalesforceDMP = (module.exports = integration('Salesforce DMP')
    .option('confId', '')
    .option('trackFireEvents', [])
    .option('eventAttributeMap', {})
    .option('namespace', '')
    .tag('init', '<script src="//cdn.krxd.net/controltag/{{ confId }}.js">')
    .tag(
      'usermatch',
      '<img src="https://beacon.krxd.net/usermatch.gif?partner=segment_io&partner_uid={{ userId }}">'
    ));

  SalesforceDMP.prototype.initialize = function() {
    // We require a confid to run this integration.
    if (!this.options.confId) return;
    if (this.options.useV2LogicClient) {
      this.identify = this.identifyV2;
      this.page = this.pageV2;
      this.track = this.trackV2;
    }
    var self = this;

    window.Krux||((window.Krux=function(){window.Krux.q.push(arguments)}).q=[]) //eslint-disable-line

    this.load('init', function() {
      self.ready();
    });
  };

  SalesforceDMP.prototype.loaded = function() {
    return !!(window.Krux && window.Krux.q && window.Krux.ns);
  };

  SalesforceDMP.prototype.identify = function(identify) {
    // Identify should prefer the userId, if it exists.
    var userId = identify.userId() || identify.anonymousId();
    this.load('usermatch', { userId: userId });
  };

  SalesforceDMP.prototype.page = function(page) {
    // Page should prefer the anonId, if it exists.
    var userId = page.anonymousId() || page.userId();
    this.load('usermatch', { userId: userId });
  };

  SalesforceDMP.prototype.track = function(track) {
    // Track allows the user to re-fire the Krux pixel on specific events, as well
    // as modify the Krux datalayer, if they so choose.
    if (!this.options.namespace) return;

    // Initialize kruxDataLayer
    // Some customers manage this directly. Delete it between sessions if it doesn't pre-exist.
    var resetDataLayer = false;

    if (!window.kruxDataLayer) {
      resetDataLayer = true;
      window.kruxDataLayer = {};
    }

    // Verify that this event is one we want to fire on, if a whitelist exists.
    if (this.options.trackFireEvents.length) {
      for (var i = 0; i < this.options.trackFireEvents.length; i++) {
        var event = this.options.trackFireEvents[i];
        // Continue execution if we find the event in the list. Otherwise, bail out.
        if (event.toLowerCase() === track.event().toLowerCase()) break;
        if (i === this.options.trackFireEvents.length - 1) return;
      }
    }

    // Modify the dataLayer with any defined adjustments. It's okay if they choose to make none.
    for (var segmentProp in this.options.eventAttributeMap) {
      // { Segment Property -> Krux Property }
      var kruxKey = this.options.eventAttributeMap[segmentProp];
      var value = track.proxy('properties.' + segmentProp);
      if (value) window.kruxDataLayer[kruxKey] = value;
    }

    // This re-fires the Krux tag with the given namespace without counting it as a new page view.
    // Namespace starts with 'ns:'
    var namespace = this.options.namespace;
    if (namespace.length <= 3 || namespace.toLowerCase().slice(0, 3) !== 'ns:')
      namespace = 'ns:' + namespace;

    // This re-fires the pixel.gif. It will silently fail if `namespace` does not match the namespace on the main Krux instance!
    window.Krux(
      namespace,
      'page:load',
      function(err) {
        if (err) console.error(err);
        if (resetDataLayer) delete window.kruxDataLayer;
      },
      { pageView: false }
    );
  };

  /**
   * `Salesforce DMP` V2 Logic.
   */

  SalesforceDMP.prototype.identifyV2 = SalesforceDMP.prototype.trackV2 = function(
    msg
  ) {
    if (!this.options.namespace) return;
    var resetDataLayer;
    var type = msg.type();

    if (type === 'track') {
      // Verify that this event is one we want to fire on, if a whitelist exists.
      if (this.options.trackFireEvents.length > 0) {
        for (var i = 0; i < this.options.trackFireEvents.length; i++) {
          var event = this.options.trackFireEvents[i];
          // Continue execution if we find the event in the list. Otherwise, bail out.
          if (event.toLowerCase() === msg.event().toLowerCase()) {
            // Create window.kruxDataLayer
            resetDataLayer = createDataLayer();
            break;
          }
          if (i === this.options.trackFireEvents.length - 1) return;
        }
      } else {
        // if no track events are mapped in settings, return early for
        // efficiency: none of the following logic will send data to SFDMP
        return;
      }

      // Modify the dataLayer with any defined adjustments. It's okay if they choose to make none.
      for (var segmentProp in this.options.eventAttributeMap) {
        // { Segment Property -> Krux Property }
        var kruxKey = this.options.eventAttributeMap[segmentProp];
        var value = msg.proxy('properties.' + segmentProp);
        if (value) window.kruxDataLayer[kruxKey] = value;
      }

      for (segmentProp in this.options.contextTraitsMap) {
        // { Segment Context Property -> Krux Property }
        kruxKey = this.options.contextTraitsMap[segmentProp];
        value = msg.proxy('context.traits.' + segmentProp);
        if (value) window.kruxDataLayer[kruxKey] = value;
      }
    } else {
      resetDataLayer = createDataLayer();
    }

    if (window.kruxDataLayer) {
      if (this.options.sendEventNames && !window.kruxDataLayer.event_name) {
        var name;
        if (type === 'track') {
          name = msg.event();
        } else if (this.options.sendIdentifyAsEventName) {
          name = type;
        }
        if (name) window.kruxDataLayer.event_name = name;
      }

      if (msg.userId()) window.kruxDataLayer.segmentio_user_id = msg.userId();
      if (msg.anonymousId())
        window.kruxDataLayer.segmentio_anonymous_id = msg.anonymousId();
      if (msg.proxy('context.traits.crossDomainId'))
        window.kruxDataLayer.segmentio_xid = msg.proxy(
          'context.traits.crossDomainId'
        );
    }

    this.firePixel(resetDataLayer);
  };

  SalesforceDMP.prototype.pageV2 = function(page) {
    // Noop on page events because SFDMP's control tag auto-fires a call to the pixel endpoint on page load
  };

  SalesforceDMP.prototype.firePixel = function(resetDataLayer) {
    // This re-fires the Krux tag with the given namespace without counting it as a new page view.
    // Namespace starts with 'ns:'
    var namespace = this.options.namespace;
    if (namespace.length <= 3 || namespace.toLowerCase().slice(0, 3) !== 'ns:')
      namespace = 'ns:' + namespace;

    // This re-fires the pixel.gif. It will silently fail if `namespace` does not match the namespace on the main Krux instance!
    window.Krux(
      namespace,
      'page:load',
      function(err) {
        if (err) console.error(err);
        if (resetDataLayer) delete window.kruxDataLayer;
      },
      { pageView: false }
    );
  };

  /**
   * Initialize kruxDataLayer
   * Some customers manage this directly. Segment deletes it between sessions if it doesn't pre-exist.
   */

  function createDataLayer() {
    if (!window.kruxDataLayer) {
      window.kruxDataLayer = {};
      return true;
    }
    return false;
  }

  },{"@segment/analytics.js-integration":851}],851:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":852,"./statics":853,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":854,"dup":40,"slug-component":1165}],852:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":856,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],853:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":857,"dup":42}],854:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":855,"_process":1149,"dup":43}],855:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":858}],856:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],857:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],858:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],859:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Salesforce Live Agent` integration.
   */

  var SalesforceLiveAgent = (module.exports = integration('Salesforce Live Agent')
    .global('liveagent')
    .option('deploymentId', '')
    .option('orgId', '')
    .option('enableLogging', false)
    .option('liveAgentEndpointUrl', '')
    .option('hostname', '')
    .option('contactMappings', [])
    .option('caseMappings', [])
    .option('accountMappings', [])
    .tag(
      '<script src="https://{{ hostname }}.salesforceliveagent.com/content/g/js/36.0/deployment.js">'
    ));

  SalesforceLiveAgent.prototype.initialize = function() {
    this.load(
      function() {
        this.ready();
      }.bind(this)
    );
  };

  SalesforceLiveAgent.prototype.track = function(track) {
    if (track.event() !== 'Live Chat Conversation Started') return;

    var traits = this.analytics.user().traits();
    var group = this.analytics.group().traits();
    var properties = track.properties();
    var options = this.options;
    var caseMappings = options.caseMappings || [];
    var contactMappings = options.contactMappings || [];
    var accountMappings = options.accountMappings || [];
    var findOrCreate;

    function addCustomDetail(mapping, value) {
      var label = mapping.label;
      var displayToAgent = !!mapping.displayToAgent;
      var fieldName = mapping.fieldName;
      var doFind = !!mapping.doFind;
      var isExactMatch = !!mapping.isExactMatch;
      var doCreate = !!mapping.doCreate;
      window.liveagent.addCustomDetail(label, value, displayToAgent);
      findOrCreate.map(fieldName, label, doFind, isExactMatch, doCreate);
    }

    // Lookup user traits
    if (Object.keys(traits).length && contactMappings.length) {
      findOrCreate = window.liveagent.findOrCreate('Contact');
      contactMappings.forEach(function(mapping) {
        var m = mapping;
        m = m.value || m;
        var trait = m.trait;
        var value = traits[trait];
        addCustomDetail(m, value);
      });

      if (traits.firstName && traits.lastName) {
        window.liveagent.setName(traits.firstName + ' ' + traits.lastName);
      }
    }

    // Lookup case properties
    if (Object.keys(properties).length && caseMappings.length) {
      findOrCreate = window.liveagent.findOrCreate('Case');
      caseMappings.forEach(function(mapping) {
        var m = mapping.value || mapping;
        var propertyName = m.property;
        var value = properties[propertyName];
        addCustomDetail(m, value);
      });
    }

    // Lookup account properties
    if (Object.keys(group).length && accountMappings.length) {
      findOrCreate = window.liveagent.findOrCreate('Account');
      accountMappings.forEach(function(mapping) {
        var m = mapping.value || mapping;
        var propertyName = m.property;
        var value = group[propertyName];
        addCustomDetail(m, value);
      });
    }

    var endpoint =
      'https://' + options.liveAgentEndpointUrl + '.salesforceliveagent.com/chat';
    window.liveagent.init(endpoint, options.deploymentId, options.orgId);

    if (options.enableLogging) {
      window.liveagent.enableLogging();
    }
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  SalesforceLiveAgent.prototype.loaded = function() {
    return !!window.liveagent;
  };

  },{"@segment/analytics.js-integration":860}],860:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":861,"./statics":862,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":863,"dup":40,"slug-component":1165}],861:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":865,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],862:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":866,"dup":42}],863:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":864,"_process":1149,"dup":43}],864:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":867}],865:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],866:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],867:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],868:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');

  /**
   * Expose `SatisMeter` integration.
   */

  var SatisMeter = (module.exports = integration('SatisMeter')
    .global('satismeter')
    .option('token', '')
    .option('apiKey', '')
    .tag('<script src="https://app.satismeter.com/js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  SatisMeter.prototype.initialize = function() {
    var self = this;
    var options = this.options;
    this.load(function() {
      when(
        function() {
          return self.loaded();
        },
        function() {
          window.satismeter('load', {
            writeKey: options.apiKey || options.token,
            source: 'analytics.js'
          });
          self.ready();
        }
      );
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  SatisMeter.prototype.loaded = function() {
    return !!window.satismeter;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  SatisMeter.prototype.identify = function(identify) {
    window.satismeter('identify', {
      userId: identify.userId(),
      anonymousId: identify.anonymousId(),
      traits: this.analytics.user().traits()
    });
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  SatisMeter.prototype.page = function(page) {
    window.satismeter('page', {
      userId: this.analytics.user().id(),
      anonymousId: this.analytics.user().anonymousId(),
      name: page.name(),
      category: page.category(),
      properties: page.properties()
    });
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  SatisMeter.prototype.track = function(track) {
    window.satismeter('track', {
      userId: this.analytics.user().id(),
      anonymousId: this.analytics.user().anonymousId(),
      event: track.event(),
      properties: track.properties()
    });
  };

  /**
   * group.
   *
   * @api public
   * @param {group} group
   */

  SatisMeter.prototype.group = function(group) {
    window.satismeter('group', {
      userId: this.analytics.user().id(),
      anonymousId: this.analytics.user().anonymousId(),
      groupId: group.groupId(),
      traits: group.properties()
    });
  };

  },{"@segment/analytics.js-integration":869,"do-when":1125}],869:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":870,"./statics":871,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],870:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":872,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],871:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":873,"dup":42}],872:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],873:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],874:[function(require,module,exports){
  function ads(query) {
    var queryIds = {
      btid: 'dataxu',
      urid: 'millennial-media',
    }

    if (query.lastIndexOf('?', 0) === 0) {
      query = query.substring(1)
    }

    query = query.replace(/\?/g, '&')

    var parts = query.split('&')

    for (var i = 0; i < parts.length; i++) {
      var k = parts[i].split('=')[0]
      var v = parts[i].split('=')[1]

      if (queryIds[k]) {
        return {
          id: v,
          type: queryIds[k],
        }
      }
    }
  }

  module.exports = ads
  },{}],875:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var ads = require('./ads');
  var clone = require('component-clone');
  var cookie = require('component-cookie');
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var json = require('json3');
  var keys = require('@ndhoule/keys');
  var localstorage = require('yields-store');
  var protocol = require('@segment/protocol');
  var send = require('@segment/send-json');
  var topDomain = require('@segment/top-domain');
  var utm = require('./utm');
  var uuid = require('uuid').v4;
  var Queue = require('@segment/localstorage-retry');

  /**
   * Cookie options
   */

  var cookieOptions = {
    // 1 year
    maxage: 31536000000,
    secure: false,
    path: '/'
  };

  /**
   * Segment messages can be a maximum of 32kb.
   */
  var MAX_SIZE = 32 * 1000;

  /**
   * Queue options
   *
   * Attempt with exponential backoff for upto 10 times.
   * Backoff periods are: 1s, 2s, 4s, 8s, 16s, 32s, 64s, 128s (~2m), 256s (~4m),
   * 512s (~8.5m) and 1024s (~17m).
   */

  var queueOptions = {
    maxRetryDelay: 360000, // max interval of 1hr. Added as a guard.
    minRetryDelay: 1000, // first attempt (1s)
    backoffFactor: 2,
    maxAttempts: 10,
    maxItems: 100
  };

  /**
   * Expose `Segment` integration.
   */

  var Segment = (exports = module.exports = integration('Segment.io')
    .option('apiKey', '')
    .option('apiHost', 'api.segment.io/v1')
    .option('crossDomainIdServers', [])
    .option('deleteCrossDomainId', false)
    .option('saveCrossDomainIdInLocalStorage', true)
    .option('retryQueue', true)
    .option('addBundledMetadata', false)
    .option('unbundledIntegrations', []))
    .option('unbundledConfigIds', [])
    .option('maybeBundledConfigIds', {});

  /**
   * Get the store.
   *
   * @return {Function}
   */

  exports.storage = function() {
    return protocol() === 'file:' || protocol() === 'chrome-extension:'
      ? localstorage
      : cookie;
  };

  /**
   * Expose global for testing.
   */

  exports.global = window;

  /**
   * Send the given `obj` and `headers` to `url` with the specified `timeout` and
   * `fn(err, req)`. Exported for testing.
   *
   * @param {String} url
   * @param {Object} obj
   * @param {Object} headers
   * @param {long} timeout
   * @param {Function} fn
   * @api private
   */

  exports.sendJsonWithTimeout = function(url, obj, headers, timeout, fn) {
    // only proceed with our new code path when cors is supported. this is
    // unlikely to happen in production, but we're being safe to preserve backward
    // compatibility.
    if (send.type !== 'xhr') {
      send(url, obj, headers, fn);
      return;
    }

    var req = new XMLHttpRequest();
    req.onerror = fn;
    req.onreadystatechange = done;

    req.open('POST', url, true);

    req.timeout = timeout;
    req.ontimeout = fn;

    // TODO: Remove this eslint disable
    // eslint-disable-next-line guard-for-in
    for (var k in headers) {
      req.setRequestHeader(k, headers[k]);
    }
    req.send(json.stringify(obj));

    function done() {
      if (req.readyState === 4) {
        // Fail on 429 and 5xx HTTP errors
        if (req.status === 429 || (req.status >= 500 && req.status < 600)) {
          fn(new Error('HTTP Error ' + req.status + ' (' + req.statusText + ')'));
        } else {
          fn(null, req);
        }
      }
    }
  };

  /**
   * Initialize.
   *
   * https://github.com/segmentio/segmentio/blob/master/modules/segmentjs/segment.js/v1/segment.js
   *
   * @api public
   */

  Segment.prototype.initialize = function() {
    var self = this;

    if (this.options.retryQueue) {
      this._lsqueue = new Queue('segmentio', queueOptions, function(elem, done) {
        // apply sentAt at flush time and reset on each retry
        // so the tracking-api doesn't interpret a time skew
        var item = elem;
        item.msg.sentAt = new Date();

        // send with 10s timeout
        Segment.sendJsonWithTimeout(
          item.url,
          item.msg,
          item.headers,
          10 * 1000,
          function(err, res) {
            self.debug('sent %O, received %O', item.msg, [err, res]);
            if (err) return done(err);
            done(null, res);
          }
        );
      });

      this._lsqueue.start();
    }

    this.ready();

    this.analytics.on('invoke', function(msg) {
      var action = msg.action();
      var listener = 'on' + msg.action();
      self.debug('%s %o', action, msg);
      if (self[listener]) self[listener](msg);
      self.ready();
    });

    // Delete cross domain identifiers.
    this.deleteCrossDomainIdIfNeeded();

    // At this moment we intentionally do not want events to be queued while we retrieve the `crossDomainId`
    // so `.ready` will get called right away and we'll try to figure out `crossDomainId`
    // separately
    if (this.isCrossDomainAnalyticsEnabled()) {
      this.retrieveCrossDomainId();
    }
  };

  /**
   * Loaded.
   *
   * @api private
   * @return {boolean}
   */

  Segment.prototype.loaded = function() {
    return true;
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Segment.prototype.onpage = function(page) {
    this.enqueue('/p', page.json());
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Segment.prototype.onidentify = function(identify) {
    this.enqueue('/i', identify.json());
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Segment.prototype.ongroup = function(group) {
    this.enqueue('/g', group.json());
  };

  /**
   * ontrack.
   *
   * TODO: Document this.
   *
   * @api private
   * @param {Track} track
   */

  Segment.prototype.ontrack = function(track) {
    var json = track.json();
    // TODO: figure out why we need traits.
    delete json.traits;
    this.enqueue('/t', json);
  };

  /**
   * Alias.
   *
   * @api public
   * @param {Alias} alias
   */

  Segment.prototype.onalias = function(alias) {
    var json = alias.json();
    var user = this.analytics.user();
    json.previousId =
      json.previousId || json.from || user.id() || user.anonymousId();
    json.userId = json.userId || json.to;
    delete json.from;
    delete json.to;
    this.enqueue('/a', json);
  };

  /**
   * Normalize the given `msg`.
   *
   * @api private
   * @param {Object} msg
   */

  Segment.prototype.normalize = function(message) {
    var msg = message;
    this.debug('normalize %o', msg);
    var user = this.analytics.user();
    var global = exports.global;
    var query = global.location.search;
    var ctx = (msg.context = msg.context || msg.options || {});
    delete msg.options;
    msg.writeKey = this.options.apiKey;
    ctx.userAgent = navigator.userAgent;
    var locale = navigator.userLanguage || navigator.language;
    if (typeof ctx.locale === 'undefined' && typeof locale !== 'undefined') {
      ctx.locale = locale;
    }
    if (!ctx.library)
      ctx.library = { name: 'analytics.js', version: this.analytics.VERSION };
    if (this.isCrossDomainAnalyticsEnabled()) {
      var crossDomainId = this.getCachedCrossDomainId();
      if (crossDomainId) {
        if (!ctx.traits) {
          ctx.traits = { crossDomainId: crossDomainId };
        } else if (!ctx.traits.crossDomainId) {
          ctx.traits.crossDomainId = crossDomainId;
        }
      }
    }
    // if user provides campaign via context, do not overwrite with UTM qs param
    if (query && !ctx.campaign) {
      ctx.campaign = utm(query);
    }
    this.referrerId(query, ctx);
    msg.userId = msg.userId || user.id();
    msg.anonymousId = user.anonymousId();
    msg.sentAt = new Date();
    // Add _metadata.
    var failedInitializations = this.analytics.failedInitializations || [];
    if (failedInitializations.length > 0) {
      msg._metadata = { failedInitializations: failedInitializations };
    }
    if (this.options.addBundledMetadata) {
      var bundled = keys(this.analytics.Integrations);
      var maybeBundledConfigIds = this.options.maybeBundledConfigIds

      // Generate a list of bundled config IDs using the intersection of
      // bundled destination names and maybe bundled config IDs.
      var bundledConfigIds = []
      for (var i = 0; i < bundled.length; i++) {
        var name = bundled[i]
        if (!maybeBundledConfigIds) {
          break
        }
        if (!maybeBundledConfigIds[name]) {
          continue
        }

        for (var j = 0; j < maybeBundledConfigIds[name].length; j++) {
          var id = maybeBundledConfigIds[name][j]
          bundledConfigIds.push(id)
        }
      }


      msg._metadata = msg._metadata || {};
      msg._metadata.bundled = bundled;
      msg._metadata.unbundled = this.options.unbundledIntegrations;
      msg._metadata.bundledIds = bundledConfigIds;
    }
    this.debug('normalized %o', msg);
    this.ampId(ctx);
    return msg;
  };

  /**
   * Add amp id if it exists.
   *
   * @param {Object} ctx
   */

  Segment.prototype.ampId = function(ctx) {
    var ampId = this.cookie('_ga');
    if (ampId) {
      if (ampId.slice(0, 3) === 'amp') ctx.amp = { id: ampId };
    }
  };

  /**
   * Send `obj` to `path`.
   *
   * @api private
   * @param {string} path
   * @param {Object} obj
   * @param {Function} fn
   */

  Segment.prototype.enqueue = function(path, message, fn) {
    var url = 'https://' + this.options.apiHost + path;
    var headers = { 'Content-Type': 'text/plain' };
    var msg = this.normalize(message);

    // Print a log statement when messages exceed the maximum size. In the future,
    // we may consider dropping this event on the client entirely.
    if (json.stringify(msg).length > MAX_SIZE) {
      this.debug('message must be less than 32kb %O', msg);
    }

    this.debug('enqueueing %O', msg);

    var self = this;
    if (this.options.retryQueue) {
      this._lsqueue.addItem({
        url: url,
        headers: headers,
        msg: msg
      });
    } else {
      send(url, msg, headers, function(err, res) {
        self.debug('sent %O, received %O', msg, [err, res]);
        if (fn) {
          if (err) return fn(err);
          fn(null, res);
        }
      });
    }
  };

  /**
   * Gets/sets cookies on the appropriate domain.
   *
   * @api private
   * @param {string} name
   * @param {*} val
   */

  Segment.prototype.cookie = function(name, val) {
    var store = Segment.storage();
    if (arguments.length === 1) return store(name);
    var global = exports.global;
    var href = global.location.href;
    var domain = '.' + topDomain(href);
    if (domain === '.') domain = '';
    this.debug('store domain %s -> %s', href, domain);
    var opts = clone(cookieOptions);
    opts.domain = domain;
    this.debug('store %s, %s, %o', name, val, opts);
    store(name, val, opts);
    if (store(name)) return;
    delete opts.domain;
    this.debug('fallback store %s, %s, %o', name, val, opts);
    store(name, val, opts);
  };

  /**
   * Add referrerId to context.
   *
   * TODO: remove.
   *
   * @api private
   * @param {Object} query
   * @param {Object} ctx
   */

  Segment.prototype.referrerId = function(query, ctx) {
    var stored = this.cookie('s:context.referrer');
    var ad;

    if (stored) stored = json.parse(stored);
    if (query) ad = ads(query);

    ad = ad || stored;

    if (!ad) return;
    ctx.referrer = extend(ctx.referrer || {}, ad);
    this.cookie('s:context.referrer', json.stringify(ad));
  };

  /**
   * isCrossDomainAnalyticsEnabled returns true if cross domain analytics is enabled.
   * This field is not directly supplied, so it is inferred by inspecting the
   * `crossDomainIdServers` array in settings. If this array is null or empty,
   * it is assumed that cross domain analytics is disabled.
   *
   * @api private
   */
  Segment.prototype.isCrossDomainAnalyticsEnabled = function() {
    if (!this.options.crossDomainIdServers) {
      return false;
    }
    return this.options.crossDomainIdServers.length > 0;
  };

  /**
   * retrieveCrossDomainId.
   *
   * @api private
   * @param {function) callback => err, {crossDomainId, fromServer, timestamp}
   */
  Segment.prototype.retrieveCrossDomainId = function(callback) {
    if (!this.isCrossDomainAnalyticsEnabled()) {
      // Callback is only provided in tests.
      if (callback) {
        callback('crossDomainId not enabled', null);
      }
      return;
    }

    var cachedCrossDomainId = this.getCachedCrossDomainId();
    if (cachedCrossDomainId) {
      // Callback is only provided in tests.
      if (callback) {
        callback(null, {
          crossDomainId: cachedCrossDomainId
        });
      }
      return;
    }

    var self = this;
    var writeKey = this.options.apiKey;

    var domains = [];
    for (var i = 0; i < this.options.crossDomainIdServers.length; i++) {
      var domain = this.options.crossDomainIdServers[i];
      domains.push(domain);
    }

    getCrossDomainIdFromServerList(domains, writeKey, function(err, res) {
      if (err) {
        // Callback is only provided in tests.
        if (callback) {
          callback(err, null);
        }
        // We optimize for no conflicting xid as much as possible. So bail out if there is an
        // error and we cannot be sure that xid does not exist on any other domains.
        return;
      }

      var crossDomainId = null;
      var fromDomain = null;
      if (res) {
        crossDomainId = res.id;
        fromDomain = res.domain;
      } else {
        crossDomainId = uuid();
        fromDomain = window.location.hostname;
      }

      self.saveCrossDomainId(crossDomainId);
      self.analytics.identify({
        crossDomainId: crossDomainId
      });

      // Callback is only provided in tests.
      if (callback) {
        callback(null, {
          crossDomainId: crossDomainId,
          fromDomain: fromDomain
        });
      }
    });
  };

  /**
   * getCachedCrossDomainId returns the cross domain identifier stored on the client based on the `saveCrossDomainIdInLocalStorage` flag.
   * If `saveCrossDomainIdInLocalStorage` is false, it reads it from the `seg_xid` cookie.
   * If `saveCrossDomainIdInLocalStorage` is true, it reads it from the `seg_xid` key in localStorage.
   *
   * @return {string} crossDomainId
   */
  Segment.prototype.getCachedCrossDomainId = function() {
    if (this.options.saveCrossDomainIdInLocalStorage) {
      return localstorage('seg_xid');
    }
    return this.cookie('seg_xid');
  };

  /**
   * saveCrossDomainId saves the cross domain identifier. The implementation differs based on the `saveCrossDomainIdInLocalStorage` flag.
   * If `saveCrossDomainIdInLocalStorage` is false, it saves it as the `seg_xid` cookie.
   * If `saveCrossDomainIdInLocalStorage` is true, it saves it to localStorage (so that it can be accessed on the current domain)
   * and as a httpOnly cookie (so that can it can be provided to other domains).
   *
   * @api private
   */
  Segment.prototype.saveCrossDomainId = function(crossDomainId) {
    if (!this.options.saveCrossDomainIdInLocalStorage) {
      this.cookie('seg_xid', crossDomainId);
      return;
    }

    var self = this;

    // Save the cookie by making a request to the xid server for the current domain.
    var currentTld = getTld(window.location.hostname);
    for (var i = 0; i < this.options.crossDomainIdServers.length; i++) {
      var domain = this.options.crossDomainIdServers[i];
      if (getTld(domain) === currentTld) {
        var writeKey = this.options.apiKey;
        var url =
          'https://' +
          domain +
          '/v1/saveId?writeKey=' +
          writeKey +
          '&xid=' +
          crossDomainId;

        httpGet(url, function(err, res) {
          if (err) {
            self.debug('could not save id on %O, received %O', url, [err, res]);
            return;
          }

          localstorage('seg_xid', crossDomainId);
        });
        return;
      }
    }
  };

  /**
   * Deletes any state persisted by cross domain analytics.
   * * seg_xid (and metadata) from cookies
   * * seg_xid from localStorage
   * * crossDomainId from traits in localStorage
   *
   * The deletion logic is run only if deletion is enabled for this project, and only
   * deletes the data that actually exists.
   *
   * @api private
   */
  Segment.prototype.deleteCrossDomainIdIfNeeded = function() {
    // Only continue if deletion is enabled for this project.
    if (!this.options.deleteCrossDomainId) {
      return;
    }

    // Delete the xid cookie if it exists. We also delete associated metadata.
    if (this.cookie('seg_xid')) {
      this.cookie('seg_xid', null);
      this.cookie('seg_xid_fd', null);
      this.cookie('seg_xid_ts', null);
    }

    // Delete the xid from localStorage if it exists.
    if (localstorage('seg_xid')) {
      localstorage('seg_xid', null);
    }

    // Delete the crossDomainId trait in localStorage if it exists.
    if (this.analytics.user().traits().crossDomainId) {
      // This intentionally uses an internal API, so that
      // we can avoid interacting with lower level localStorage APIs, and instead
      // leverage existing functionality inside analytics.js.

      var traits = this.analytics.user().traits();
      delete traits.crossDomainId;
      this.analytics.user()._setTraits(traits);
    }
  };

  /**
   * getCrossDomainIdFromServers
   * @param {Array} domains
   * @param {string} writeKey
   * @param {function} callback => err, {domain, id}
   */
  function getCrossDomainIdFromServerList(domains, writeKey, callback) {
    // Should not happen but special case
    if (domains.length === 0) {
      callback(null, null);
    }
    var crossDomainIdFound = false;
    var finishedRequests = 0;
    var error = null;
    for (var i = 0; i < domains.length; i++) {
      var domain = domains[i];

      getCrossDomainIdFromSingleServer(domain, writeKey, function(err, res) {
        finishedRequests++;
        if (err) {
          // if request against a particular domain fails, we won't early exit
          // but rather wait and see if requests to other domains succeed
          error = err;
        } else if (res && res.id && !crossDomainIdFound) {
          // If we found an xid from any of the servers, we'll just early exit and callback
          crossDomainIdFound = true;
          callback(null, res);
        }
        if (finishedRequests === domains.length && !crossDomainIdFound) {
          // Error is non-null if we encountered an issue, otherwise error will be null
          // meaning that no domains in the list has an xid for current user
          callback(error, null);
        }
      });
    }
  }

  /**
   * getCrossDomainId
   * @param {Array} domain
   * @param {string} writeKey
   * @param {function} callback => err, {domain, id}
   */
  function getCrossDomainIdFromSingleServer(domain, writeKey, callback) {
    var endpoint = 'https://' + domain + '/v1/id/' + writeKey;
    getJson(endpoint, function(err, res) {
      if (err) {
        callback(err, null);
      } else {
        callback(null, {
          domain: domain,
          id: (res && res.id) || null
        });
      }
    });
  }

  /**
   * getJson
   * @param {string} url
   * @param {function} callback => err, json
   */
  function getJson(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.withCredentials = true;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status >= 200 && xhr.status < 300) {
          callback(null, xhr.responseText ? json.parse(xhr.responseText) : null);
        } else {
          callback(xhr.statusText || 'Unknown Error', null);
        }
      }
    };
    xhr.send();
  }

  /**
   * get makes a get request to the given URL.
   * @param {string} url
   * @param {function} callback => err, response
   */
  function httpGet(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.withCredentials = true;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status >= 200 && xhr.status < 300) {
          callback(null, xhr.responseText);
        } else {
          callback(xhr.statusText || xhr.responseText || 'Unknown Error', null);
        }
      }
    };
    xhr.send();
  }

  /**
   * getTld
   * Get domain.com from subdomain.domain.com, etc.
   * @param {string} domain
   * @return {string} tld
   */
  function getTld(domain) {
    return domain
      .split('.')
      .splice(-2)
      .join('.');
  }

  },{"./ads":874,"./utm":876,"@ndhoule/extend":13,"@ndhoule/keys":16,"@segment/analytics.js-integration":877,"@segment/localstorage-retry":1095,"@segment/protocol":1100,"@segment/send-json":1101,"@segment/top-domain":882,"component-clone":1110,"component-cookie":884,"json3":1134,"uuid":890,"yields-store":1187}],876:[function(require,module,exports){
  function utm(query) {
    if (query.lastIndexOf('?', 0) === 0) {
      query = query.substring(1)
    }

    query = query.replace(/\?/g, '&')

    var split = query.split('&')

    var acc = {}
    for (var i = 0; i < split.length; i++) {
      var k = split[i].split('=')[0]
      var v = split[i].split('=')[1] || ''

      if (k.indexOf('utm_') !== -1 && k.length > 4) {
        var utmParam = k.substr(4)
        if (utmParam === 'campaign') {
          utmParam = 'name'
        }
        acc[utmParam] = decodeURIComponent(v.replace(/\+/g, ' '))
      }
    }

    return acc
  }

  module.exports = utm
  },{}],877:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":878,"./statics":879,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":880,"dup":40,"slug-component":1165}],878:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":883,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],879:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":887,"dup":42}],880:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":881,"_process":1149,"dup":43}],881:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":888}],882:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var parse = require('component-url').parse;
  var cookie = require('component-cookie');

  /**
   * Get the top domain.
   *
   * The function constructs the levels of domain and attempts to set a global
   * cookie on each one when it succeeds it returns the top level domain.
   *
   * The method returns an empty string when the hostname is an ip or `localhost`.
   *
   * Example levels:
   *
   *      domain.levels('http://www.google.co.uk');
   *      // => ["co.uk", "google.co.uk", "www.google.co.uk"]
   *
   * Example:
   *
   *      domain('http://localhost:3000/baz');
   *      // => ''
   *      domain('http://dev:3000/baz');
   *      // => ''
   *      domain('http://127.0.0.1:3000/baz');
   *      // => ''
   *      domain('http://segment.io/baz');
   *      // => 'segment.io'
   *
   * @param {string} url
   * @return {string}
   * @api public
   */
  function domain(url) {
    var cookie = exports.cookie;
    var levels = exports.levels(url);

    // Lookup the real top level one.
    for (var i = 0; i < levels.length; ++i) {
      var cname = '__tld__';
      var domain = levels[i];
      var opts = { domain: '.' + domain };

      cookie(cname, 1, opts);
      if (cookie(cname)) {
        cookie(cname, null, opts);
        return domain;
      }
    }

    return '';
  }

  /**
   * Levels returns all levels of the given url.
   *
   * @param {string} url
   * @return {Array}
   * @api public
   */
  domain.levels = function(url) {
    var host = parse(url).hostname;
    var parts = host.split('.');
    var last = parts[parts.length - 1];
    var levels = [];

    // Ip address.
    if (parts.length === 4 && last === parseInt(last, 10)) {
      return levels;
    }

    // Localhost.
    if (parts.length <= 1) {
      return levels;
    }

    // Create levels.
    for (var i = parts.length - 2; i >= 0; --i) {
      levels.push(parts.slice(i).join('.'));
    }

    return levels;
  };

  /**
   * Expose cookie on domain.
   */
  domain.cookie = cookie;

  /*
   * Exports.
   */

  exports = module.exports = domain;

  },{"component-cookie":884,"component-url":1121}],883:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],884:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var debug = require('debug')('cookie');

  /**
   * Set or get cookie `name` with `value` and `options` object.
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @return {Mixed}
   * @api public
   */

  module.exports = function(name, value, options){
    switch (arguments.length) {
      case 3:
      case 2:
        return set(name, value, options);
      case 1:
        return get(name);
      default:
        return all();
    }
  };

  /**
   * Set cookie `name` to `value`.
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @api private
   */

  function set(name, value, options) {
    options = options || {};
    var str = encode(name) + '=' + encode(value);

    if (null == value) options.maxage = -1;

    if (options.maxage) {
      options.expires = new Date(+new Date + options.maxage);
    }

    if (options.path) str += '; path=' + options.path;
    if (options.domain) str += '; domain=' + options.domain;
    if (options.expires) str += '; expires=' + options.expires.toUTCString();
    if (options.secure) str += '; secure';

    document.cookie = str;
  }

  /**
   * Return all cookies.
   *
   * @return {Object}
   * @api private
   */

  function all() {
    var str;
    try {
      str = document.cookie;
    } catch (err) {
      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error(err.stack || err);
      }
      return {};
    }
    return parse(str);
  }

  /**
   * Get cookie `name`.
   *
   * @param {String} name
   * @return {String}
   * @api private
   */

  function get(name) {
    return all()[name];
  }

  /**
   * Parse cookie `str`.
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function parse(str) {
    var obj = {};
    var pairs = str.split(/ *; */);
    var pair;
    if ('' == pairs[0]) return obj;
    for (var i = 0; i < pairs.length; ++i) {
      pair = pairs[i].split('=');
      obj[decode(pair[0])] = decode(pair[1]);
    }
    return obj;
  }

  /**
   * Encode.
   */

  function encode(value){
    try {
      return encodeURIComponent(value);
    } catch (e) {
      debug('error `encode(%o)` - %o', value, e)
    }
  }

  /**
   * Decode.
   */

  function decode(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
      debug('error `decode(%o)` - %o', value, e)
    }
  }

  },{"debug":885}],885:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":886,"_process":1149,"dup":43}],886:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":888}],887:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],888:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],889:[function(require,module,exports){
  (function (global){(function (){

  var rng;

  var crypto = global.crypto || global.msCrypto; // for IE 11
  if (crypto && crypto.getRandomValues) {
    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
    // Moderately fast, high quality
    var _rnds8 = new Uint8Array(16);
    rng = function whatwgRNG() {
      crypto.getRandomValues(_rnds8);
      return _rnds8;
    };
  }

  if (!rng) {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var  _rnds = new Array(16);
    rng = function() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    };
  }

  module.exports = rng;


  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{}],890:[function(require,module,exports){
  //     uuid.js
  //
  //     Copyright (c) 2010-2012 Robert Kieffer
  //     MIT License - http://opensource.org/licenses/mit-license.php

  // Unique ID creation requires a high quality random # generator.  We feature
  // detect to determine the best RNG source, normalizing to a function that
  // returns 128-bits of randomness, since that's what's usually required
  var _rng = require('./rng');

  // Maps for number <-> hex string conversion
  var _byteToHex = [];
  var _hexToByte = {};
  for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
  }

  // **`parse()` - Parse a UUID into it's component bytes**
  function parse(s, buf, offset) {
    var i = (buf && offset) || 0, ii = 0;

    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
      if (ii < 16) { // Don't overflow!
        buf[i + ii++] = _hexToByte[oct];
      }
    });

    // Zero out remaining bytes if string was short
    while (ii < 16) {
      buf[i + ii++] = 0;
    }

    return buf;
  }

  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
  function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return  bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  // random #'s we need to init node and clockseq
  var _seedBytes = _rng();

  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
  var _nodeId = [
    _seedBytes[0] | 0x01,
    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
  ];

  // Per 4.2.2, randomize (14 bit) clockseq
  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

  // Previous uuid creation time
  var _lastMSecs = 0, _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};

    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    var node = options.node || _nodeId;
    for (var n = 0; n < 6; n++) {
      b[i + n] = node[n];
    }

    return buf ? buf : unparse(b);
  }

  // **`v4()` - Generate random UUID**

  // See https://github.com/broofa/node-uuid for API details
  function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options == 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || _rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || unparse(rnds);
  }

  // Export public API
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  uuid.parse = parse;
  uuid.unparse = unparse;

  module.exports = uuid;

  },{"./rng":889}],891:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var foldl = require('@ndhoule/foldl');

  /**
   * Expose `Sentry` integration.
   */

  var Sentry = (module.exports = integration('Sentry')
    .global('Sentry')
    .option('config', '')
    .option('environment', null)
    .option('serverName', null)
    .option('release', null)
    .option('ignoreErrors', []) // still exists, but not documented on Sentry's website
    .option('ignoreUrls', [])
    .option('whitelistUrls', [])
    .option('includePaths', []) // maps to Sentry.Integrations.RewriteFrames plugin
    .option('maxMessageLength', null) // deprecated
    .option('logger', null)
    .option('customVersionProperty', null)
    .option('debug', false)
    .tag(
      'sentry',
      '<script src="https://browser.sentry-cdn.com/5.12.1/bundle.min.js" integrity="sha384-y+an4eARFKvjzOivf/Z7JtMJhaN6b+lLQ5oFbBbUwZNNVir39cYtkjW1r6Xjbxg3" crossorigin="anonymous"></script>'
    )
    // Sentry.Integrations.RewriteFrames plugin: https://docs.sentry.io/platforms/javascript/#rewriteframes
    .tag(
      'plugin',
      '<script src="https://browser.sentry-cdn.com/5.12.1/rewriteframes.min.js" crossorigin="anonymous"></script>'
    ));

  /**
   * Initialize.
   * https://docs.sentry.io/error-reporting/quickstart/?platform=browser
   *
   * @api public
   */

  Sentry.prototype.initialize = function() {
    var customRelease = this.options.customVersionProperty
      ? window[this.options.customVersionProperty]
      : null;

    var config = {
      dsn: this.options.config,
      environment: this.options.environment,
      release: customRelease || this.options.release,
      serverName: this.options.serverName,
      whitelistUrls: this.options.whitelistUrls,
      blacklistUrls: this.options.ignoreUrls,
      // ignoreErrors still exists, but is not documented on Sentry's website
      // https://github.com/getsentry/sentry-javascript/blob/master/packages/core/src/integrations/inboundfilters.ts#L12
      ignoreErrors: this.options.ignoreErrors,
      integrations: [],
      debug: this.options.debug
    };

    var logger = this.options.logger;
    var includePaths = [];
    if (this.options.includePaths.length > 0) {
      includePaths = this.options.includePaths.map(function(path) {
        var regex;
        try {
          regex = new RegExp(path);
        } catch (e) {
          // do nothing
        }
        return regex;
      });
    }

    var self = this;
    this.load('sentry', function() {
      self.load('plugin', function() {
        // values from `includePaths` tells the Sentry app which frames in a StackTrace to display in the user's
        // dashboard. we use the Sentry.Integrations.RewriteFrames plugin to check each frame in a stacktrace and reassign
        // the value of frame.in_app to true/false depending on whether we find a match: https://docs.sentry.io/platforms/javascript/#rewriteframes
        if (includePaths.length > 0) {
          config.integrations.push(
            new window.Sentry.Integrations.RewriteFrames({
              iteratee: function(frame) {
                for (var i = 0; i < includePaths.length; i++) {
                  try {
                    if (frame.filename.match(includePaths[i])) {
                      frame.in_app = true; // eslint-disable-line
                      return frame;
                    }
                  } catch (e) {
                    // do nothing
                  }
                }
                frame.in_app = false; // eslint-disable-line
                return frame;
              }
            })
          );
        }

        window.Sentry.init(reject(config));

        if (logger) {
          window.Sentry.setTag('logger', logger);
        }

        self.ready();
      });
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Sentry.prototype.loaded = function() {
    return is.object(window.Sentry);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Sentry.prototype.identify = function(identify) {
    window.Sentry.setUser(identify.traits());
  };

  /**
   * Clean out null values
   */

  function reject(obj) {
    return foldl(
      function(result, val, key) {
        var payload = result;

        // strip any null or empty string values
        if (val !== null && val !== '' && !is.array(val)) {
          payload[key] = val;
        }
        // strip any empty arrays
        if (is.array(val)) {
          var ret = [];
          // strip if there's only an empty string or null in the array since the settings UI lets you save additional rows even though some may be empty strings
          for (var x = 0; x < val.length; x++) {
            if (val[x] !== null && val[x] !== '') ret.push(val[x]);
          }
          if (!is.empty(ret)) {
            payload[key] = ret;
          }
        }
        return payload;
      },
      {},
      obj
    );
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":892,"is":1131}],892:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":893,"./statics":894,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],893:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":895,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],894:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":896,"dup":42}],895:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],896:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],897:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Track = require('segmentio-facade').Track;
  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `ShareASale`.
   */

  var ShareASale = (module.exports = integration('ShareASale')
    .option('merchantId', '')
    .option('currency', 'USD')
    .option('createLeads', false)
    .option('useTotalAsAmount', false)
    .tag(
      'orderCompleted',
      '<img src="https://shareasale.com/sale.cfm?amount={{ orderTotal }}&tracking={{ orderId }}&transtype=sale&merchantID={{ merchantId }}{{ repeat }}&skulist={{ skulist }}&quantitylist={{ quantitylist }}&pricelist={{ pricelist }}&currency={{ currency }}&couponcode={{ couponcode }}">'
    )
    .tag(
      'leadCreated',
      '<img src="https://shareasale.com/sale.cfm?amount=0.00&tracking={{ userId }}&transtype=lead&merchantID={{ merchantId }}">'
    ));

  /**
   * Track order completed.
   *
   * @param {Track} track
   */

  ShareASale.prototype.orderCompleted = function(track) {
    var orderId = track.orderId();
    var isRepeat = track.proxy('properties.repeat');
    var subtotal = (track.subtotal() || 0).toFixed(2);
    var discount = (track.discount() || 0).toFixed(2);
    var orderTotal =
      this.options.useTotalAsAmount && track.total()
        ? track.total().toFixed(2)
        : (subtotal - discount).toFixed(2);
    var products = track.products();
    var currency = track.currency() || this.options.currency;
    var coupon = track.coupon() || '';
    var skus = [];
    var quantities = [];
    var prices = [];

    if (!orderId) {
      this.debug('must pass `orderId`');
      return;
    }

    if (!subtotal) {
      this.debug('must pass `subtotal`, `total`, or `revenue`');
      return;
    }

    each(products, function(product) {
      var track = new Track({ properties: product });
      skus.push(track.sku());
      quantities.push(track.quantity());
      prices.push(track.price());
    });

    var repeat = '';
    if (typeof isRepeat === 'boolean') {
      repeat = isRepeat ? '&newcustomer=0' : '&newcustomer=1';
    }

    this.load('orderCompleted', {
      orderTotal: orderTotal,
      orderId: orderId,
      skulist: skus.join(','),
      quantitylist: quantities.join(','),
      pricelist: prices.join(','),
      currency: currency,
      couponcode: coupon,
      repeat: repeat
    });
  };

  /**
   * Identify Leads
   *
   * @param {Facade} identify
   */

  ShareASale.prototype.identify = function(identify) {
    var userId = identify.userId();
    var opts = this.options;

    // identify leads created
    if (opts.createLeads) {
      if (!userId) {
        this.debug('must pass `userId`');
        return;
      }

      this.load('leadCreated', {
        userId: userId
      });
    }
  };

  },{"@segment/analytics.js-integration":898,"component-each":1112,"segmentio-facade":1158}],898:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":899,"./statics":900,"@ndhoule/defaults":8,"component-bind":1109,"debug":901,"dup":49,"extend":904,"slug-component":1165}],899:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],900:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":903,"dup":51}],901:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":902,"_process":1149,"dup":43}],902:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":905}],903:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],904:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],905:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],906:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var defaults = require('@ndhoule/defaults');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Simplereach` integration.
   */

  var SimpleReach = (module.exports = integration('SimpleReach')
    .global('__reach_config')
    .global('SPR')
    .option('pid', '')
    .tag('<script src="//d8rk54i4mohrb.cloudfront.net/js/reach.js">'));

  /**
   * Initialize.
   * http://www.simplereach.com/docs/#standardImplementation
   * Some adjustments made to standard implementation
   *
   * @api public
   */

  SimpleReach.prototype.initialize = function() {
    window.__reach_config = window.__reach_config || {};
    defaults(window.__reach_config, {
      pid: this.options.pid,
      reach_tracking: false
    });
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  SimpleReach.prototype.loaded = function() {
    return !!window.SPR;
  };

  /**
   * Page.
   *
   * http://www.simplereach.com/docs/ajax/
   *
   * @api public
   */

  SimpleReach.prototype.page = function(page) {
    defaults(window.__reach_config, {
      url: page.url(),
      title: page.title()
    });

    if (window.__reach_config.url === false) {
      window.__reach_config.url = page.url();
    }

    window.SPR.collect(window.__reach_config);
  };

  /**
   * Page.
   *
   * http://www.simplereach.com/docs/ajax/
   *
   * @api public
   */
  SimpleReach.prototype.track = function(track) {
    window.SPR.collect({
      pid: this.options.pid,
      reach_tracking: false,
      url: track.proxy('context.page.url'),
      title: track.proxy('context.page.title'),
      ctx_revenue: track.revenue(),
      ctx_order_id: track.orderId(),
      ctx_event_name: track.event()
    });
  };

  },{"@ndhoule/defaults":8,"@segment/analytics.js-integration":907}],907:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":908,"./statics":909,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],908:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":910,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],909:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":911,"dup":42}],910:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],911:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],912:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Simplifi`.
   *
   * - Order of the URL parameters is important.
   */

  var Simplifi = (module.exports = integration('Simpli.fi')
    .option('advertiserId', '')
    .option('optInSegment', '')
    .option('optOutSegment', '')
    .tag(
      'opt-in',
      '<script src="//i.simpli.fi/dpx.js?cid={{ advertiserId }}&action=100&segment={{ optInSegment }}&m=1"></script>'
    )
    .tag(
      'opt-out',
      '<script src="//i.simpli.fi/dpx.js?cid={{ advertiserId }}&action=101&segment={{ optOutSegment }}&m=1"></script>'
    )
    .tag(
      'conversion',
      '<script src="//i.simpli.fi/dpx.js?cid={{ advertiserId }}&conversion={{ conversionId }}&campaign_id={{ campaignId }}&m=1&tid={{ tid }}&sifi_tuid={{ sifi_tuid }}">'
    )
    .mapping('events'));

  /**
   * Loaded.
   *
   * @api public
   * @return {boolean}
   */

  Simplifi.prototype.loaded = function() {
    return true;
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Simplifi.prototype.identify = function(identify) {
    if (!identify.userId()) return this.debug('id required');
    this.load('opt-out');
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Simplifi.prototype.page = function() {
    var user = this.analytics.user();
    // opt-in anonymous users.
    // opt-out registered users.
    if (user.id()) {
      this.load('opt-out');
    } else {
      this.load('opt-in');
    }
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  Simplifi.prototype.track = function(track) {
    var events = this.events(track.event());
    var self = this;
    each(events, function(event) {
      return self.conversion(track, event);
    });
  };

  /**
   * Tracks a conversion.
   *
   * @param {Track} track
   * @param {Object} event
   */

  Simplifi.prototype.conversion = function(track, event) {
    // campaign id defaults to 0 if this conversion event is
    // not tied to any one campaign.
    var campaignId = event.campaignId || 0;

    // then track event.
    this.load('conversion', {
      conversionId: event.conversionId,
      campaignId: campaignId,
      tid: event.tid,
      sifi_tuid: event.sifi_tuid
    });
  };

  },{"@segment/analytics.js-integration":913,"component-each":1112}],913:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":914,"./statics":915,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":916,"dup":40,"slug-component":1165}],914:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":918,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],915:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":919,"dup":42}],916:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":917,"_process":1149,"dup":43}],917:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":920}],918:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],919:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],920:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],921:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var tick = require('next-tick');

  /**
   * Expose `SnapEngage` integration.
   */

  var SnapEngage = (module.exports = integration('SnapEngage')
    .assumesPageview()
    .global('SnapABug')
    .global('SnapEngage')
    .option('apiKey', '')
    .option('listen', false)
    .tag('<script src="//www.snapengage.com/cdn/js/{{ apiKey }}.js">'));

  /**
   * Integration object for root events.
   */

  var integrationContext = {
    name: 'snapengage',
    version: '1.0.0'
  };

  /**
   * Initialize.
   *
   * http://help.snapengage.com/installation-guide-getting-started-in-a-snap/
   *
   * @api public
   */

  SnapEngage.prototype.initialize = function() {
    var self = this;
    this.load(function() {
      if (self.options.listen) self.attachListeners();
      tick(self.ready);
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  SnapEngage.prototype.loaded = function() {
    return is.object(window.SnapABug) && is.object(window.SnapEngage);
  };

  /**
   * Identify.
   *
   * @api private
   * @param {Identify} identify
   */

  SnapEngage.prototype.identify = function(identify) {
    var email = identify.email();
    if (!email) return;
    window.SnapABug.setUserEmail(email);
  };

  /**
   * Listen for events.
   *
   * https://developer.snapengage.com/javascript-api/setcallback/
   *
   * @api private
   */

  SnapEngage.prototype.attachListeners = function() {
    var self = this;

    // Callback is passed `email, message, type`
    // TODO: Eventually this might pass information about the chat to Segment
    window.SnapEngage.setCallback('StartChat', function() {
      self.analytics.track(
        'Live Chat Conversation Started',
        {},
        { context: { integration: integrationContext } }
      );
    });

    // Callback is passed `agent, message`
    // TODO: Eventually this might pass information about the message to Segment
    window.SnapEngage.setCallback('ChatMessageReceived', function(agent) {
      self.analytics.track(
        'Live Chat Message Received',
        { agentUsername: agent },
        { context: { integration: integrationContext } }
      );
    });

    // Callback is passed `message`
    // TODO: Eventually this might pass information about the message to Segment
    window.SnapEngage.setCallback('ChatMessageSent', function() {
      self.analytics.track(
        'Live Chat Message Sent',
        {},
        { context: { integration: integrationContext } }
      );
    });

    // Callback is passed `type, status`
    // TODO: Eventually this might pass information about the status to Segment
    window.SnapEngage.setCallback('Close', function() {
      self.analytics.track(
        'Live Chat Conversation Ended',
        {},
        { context: { integration: integrationContext } }
      );
    });
  };

  },{"@segment/analytics.js-integration":922,"is":1131,"next-tick":1142}],922:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":923,"./statics":924,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],923:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":925,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],924:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":926,"dup":42}],925:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],926:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],927:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');

  /**
   * Expose `Spinnakr` integration.
   */

  var Spinnakr = (module.exports = integration('Spinnakr')
    .assumesPageview()
    .global('_spinnakr_site_id')
    .global('_spinnakr')
    .option('siteId', '')
    .tag('<script src="//d3ojzyhbolvoi5.cloudfront.net/js/so.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Spinnakr.prototype.initialize = function() {
    window._spinnakr_site_id = this.options.siteId;
    var loaded = bind(this, this.loaded);
    var ready = this.ready;
    this.load(function() {
      when(loaded, ready);
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Spinnakr.prototype.loaded = function() {
    return !!window._spinnakr;
  };

  },{"@segment/analytics.js-integration":928,"component-bind":1109,"do-when":1125}],928:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":929,"./statics":930,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],929:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":931,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],930:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":932,"dup":42}],931:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],932:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],933:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var Track = require('segmentio-facade').Track;
  var foldl = require('@ndhoule/foldl');
  var each = require('component-each');

  /**
   * Expose `Steelhouse`.
   */

  var Steelhouse = (module.exports = integration('Steelhouse')
    .option('advertiserId', '')
    .mapping('events')
    .tag(
      'page',
      '<script src="//dx.steelhousemedia.com/spx?dxver=4.0.0&shaid={{ advertiserId }}&tdr={{ referrer }}&plh={{ location }}&cb={{ cacheBuster }}">'
    )
    .tag(
      'conversion',
      '<script src="//dx.steelhousemedia.com/spx?conv=1&shaid={{ advertiserId }}&tdr={{ referrer }}&plh={{ location }}&cb={{ cacheBuster }}&shoid={{ orderId }}&shoamt={{ total }}&shocur={{ currency }}&shopid={{ productIds }}&shoq={{ quantities }}&shoup={{ prices }}&shpil=">'
    ));

  /**
   * Page load the retargeting pixel.
   *
   * @api public
   * @param {Page} page
   */

  Steelhouse.prototype.page = function(page) {
    var referrer = page.referrer() || '';
    var href = page.url() || '';

    this.load('page', {
      // following the lead of their snippet in these substring lengths
      referrer: safeEncode(referrer.substring(0, 2048)),
      location: safeEncode(href.substring(0, 2048)),
      advertiserId: this.options.advertiserId,
      cacheBuster: this.cacheBuster()
    });
  };

  /**
   * Track conversion events.
   *
   * @api public
   * @param {Track} track
   */

  Steelhouse.prototype.track = function(track) {
    var referrer = track.proxy('context.page.referrer') || '';
    var href = track.proxy('context.page.url') || '';

    var productInfo = foldl(
      function(info, product) {
        product = new Track({ properties: product });
        info.skus.push(product.sku());
        info.quantities.push(product.quantity());
        info.prices.push(product.price());
        return info;
      },
      { skus: [], quantities: [], prices: [] },
      track.products()
    );

    var advertiserId = this.options.advertiserId;
    var events = this.events(track.event());
    var self = this;

    each(events, function() {
      self.load('conversion', {
        // following the lead of their snippet in these substring lengths
        referrer: safeEncode(referrer.substring(0, 512)),
        location: safeEncode(href.substring(0, 512)),
        quantities: productInfo.quantities.join(','),
        productIds: productInfo.skus.join(','),
        prices: productInfo.prices.join(','),
        currency: track.currency() || '',
        orderId: track.orderId() || '',
        total: track.total() || '',
        advertiserId: advertiserId,
        cacheBuster: self.cacheBuster()
      });
    });
  };

  /**
   * Generate a random number for cachebusting.
   *
   * @api private
   */

  Steelhouse.prototype.cacheBuster = function() {
    return Math.round(Math.random() * 99999999);
  };

  /**
   * Safely encode string
   *
   * @api private
   */

  function safeEncode(string) {
    try {
      return encodeURIComponent(string);
    } catch (e) {
      return '';
    }
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":934,"component-each":1112,"segmentio-facade":1158}],934:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":935,"./statics":936,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":937,"dup":40,"slug-component":1165}],935:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":939,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],936:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":940,"dup":42}],937:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":938,"_process":1149,"dup":43}],938:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":941}],939:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],940:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],941:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],942:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');

  /**
   * Expose `Stripe` integration.
   */

  var StripeRadar = (module.exports = integration('Stripe Radar')
    .option('apiKey', '')
    .tag('<script src="https://js.stripe.com/v2/">'));

  /**
   * Initialize.
   *
   * @api public
   */

  StripeRadar.prototype.initialize = function() {
    var self = this;
    // Prevent double loading
    if (window.Stripe && window.Stripe.setPublishableKey) {
      window.Stripe.setPublishableKey(this.options.apiKey);
      this.ready();
    } else {
      this.load(function() {
        // https://stripe.com/docs/stripe.js?#setting-publishable-key
        when(self.loaded, function() {
          window.Stripe.setPublishableKey(self.options.apiKey);
          self.ready();
        });
      });
    }
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  StripeRadar.prototype.loaded = function() {
    return window.Stripe && window.Stripe.setPublishableKey;
  };

  },{"@segment/analytics.js-integration":943,"do-when":1125}],943:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":944,"./statics":945,"@ndhoule/defaults":8,"component-bind":1109,"debug":946,"dup":49,"extend":949,"slug-component":1165}],944:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],945:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":948,"dup":51}],946:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":947,"_process":1149,"dup":43}],947:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":950}],948:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],949:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],950:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],951:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `SupportHero` integration.
   */

  var SupportHero = (module.exports = integration('SupportHero')
    .assumesPageview()
    .global('supportHeroWidget')
    .option('token', '')
    .option('track', false)
    .tag(
      '<script src="https://d29l98y0pmei9d.cloudfront.net/js/widget.min.js?k={{ token }}">'
    ));

  /**
   * Initialize Support Hero.
   *
   * @api public
   */

  SupportHero.prototype.initialize = function() {
    window.supportHeroWidget = {};
    window.supportHeroWidget.setUserId =
      window.supportHeroWidget.setUserId || function() {};
    window.supportHeroWidget.setUserTraits =
      window.supportHeroWidget.setUserTraits || function() {};
    this.load(this.ready);
  };

  /**
   * Has the Support Hero library been loaded yet?
   *
   * @api private
   * @return {boolean}
   */

  SupportHero.prototype.loaded = function() {
    return !!window.supportHeroWidget;
  };

  /**
   * Identify a user.
   *
   * @api public
   * @param {Facade} identify
   */

  SupportHero.prototype.identify = function(identify) {
    var id = identify.userId();
    var traits = identify.traits();
    if (id) {
      window.supportHeroWidget.setUserId(id);
    }
    if (traits) {
      window.supportHeroWidget.setUserTraits(traits);
    }
  };

  },{"@segment/analytics.js-integration":952}],952:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":953,"./statics":954,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],953:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":955,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],954:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":956,"dup":42}],955:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],956:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],957:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `tag-injector` integration.
   */

  var TagInjector = (module.exports = integration('Tag Injector').option(
    'tags',
    []
  ));

  /**
   * Initialize.
   *
   * @api public
   */

  TagInjector.prototype.initialize = function() {
    var documentHead = document.getElementsByTagName('head')[0];
    if (documentHead !== undefined) {
      for (var i = 0; i < this.options.tags.length; i++) {
        var tag = this.options.tags[i];
        documentHead.appendChild(createElementFromTag(tag));
      }
    }

    // Typically, integrations do `this.load(this.ready)`. But `this.load()` will
    // fetch this integration's tags, of which there are none in this case.
    //
    // Therefore, to avoid crashes, we simply call `this.ready()`.
    //
    // For context: https://segment.atlassian.net/browse/GA-210
    this.hasLoaded = true;
    this.ready();
  };

  /**
   * Loaded?
   *
   * @api public
   * @return {boolean}
   */
  TagInjector.prototype.loaded = function() {
    return this.hasLoaded === true;
  };

  function createElementFromTag(tag) {
    var element = document.createElement('script');
    element.setAttribute('data-injected-by', 'segment');

    if (tag.tagKind === 'url') {
      element.src = tag.tagValue;
    } else if (tag.tagKind === 'variable') {
      var scriptBody = mergeVariableTagBody(tag);
      element.appendChild(document.createTextNode(scriptBody));
    }

    return element;
  }

  function mergeVariableTagBody(tag) {
    var target = tag.variableName;
    var source = tag.tagValue;

    return [
      'window.' + target + ' = ' + 'window.' + target + ' || {}',
      '(function merge (target, source) {',
      '  for (var property in source) {',
      '    if (typeof source[property] === "object") {',
      '      target[property] = target[property] || source[property];',
      '      merge(target[property], source[property]);',
      '    } else {',
      '      target[property] = source[property];',
      '    }',
      '  }',
      '})(window.' + target + ' || {},' + source + ')'
    ].join(';\n');
  }

  },{"@segment/analytics.js-integration":958}],958:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":959,"./statics":960,"@ndhoule/defaults":8,"component-bind":1109,"debug":961,"dup":49,"extend":964,"slug-component":1165}],959:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],960:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":963,"dup":51}],961:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":962,"_process":1149,"dup":43}],962:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":965}],963:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],964:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],965:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],966:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var is = require('is');
  var keys = require('@ndhoule/keys');
  var push = require('global-queue')('_tlq');

  /**
   * Expose `Taplytics` integration.
   */

  var Taplytics = (module.exports = integration('Taplytics')
    .global('_tlq')
    .global('Taplytics')
    .option('apiKey', '')
    .option('options', {})
    .tag('<script id="taplytics" src="//cdn.taplytics.com/taplytics.min.js">')
    .assumesPageview());

  /**
   * Initialize Taplytics.
   *
   * @api public
   */

  Taplytics.prototype.initialize = function() {
    var options = this.options.options;
    var apiKey = this.options.apiKey;

    window._tlq = window._tlq || [];

    push('init', apiKey, options);

    this.load(this.ready);
  };

  /**
   * Has the Taplytics library been loaded yet?
   *
   * @api private
   * @return {boolean}
   */

  Taplytics.prototype.loaded = function() {
    return window.Taplytics && is.object(window.Taplytics._in);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Facade} identify
   */

  Taplytics.prototype.identify = function(identify) {
    var userId = identify.userId();
    var attrs = identify.traits() || {};

    if (userId) attrs.id = userId;

    if (keys(attrs).length) {
      push('identify', attrs);
    }
  };

  /**
   * Group.
   *
   * @api public
   * @param {Facade} group
   */

  Taplytics.prototype.group = function(group) {
    var attrs = {};
    var groupId = group.groupId();
    var traits = group.traits();
    var user = this.analytics.user();
    var userId = user.id();

    if (groupId) attrs.groupId = groupId;
    if (traits) attrs.groupTraits = traits;
    if (userId) attrs.id = userId;

    if (keys(attrs).length) push('identify', attrs);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Facade} track
   */

  Taplytics.prototype.track = function(track) {
    var properties = track.properties() || {};
    var total = track.revenue() || track.total() || 0;

    push('track', track.event(), total, properties);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Facade} page
   */

  Taplytics.prototype.page = function(page) {
    var category = page.category() || undefined;
    var name = page.fullName() || undefined;
    var properties = page.properties() || {};

    push('page', category, name, properties);
  };

  /**
   * Reset a user and log them out.
   *
   * @api private
   */

  Taplytics.prototype.reset = function() {
    push('reset');
  };

  },{"@ndhoule/keys":16,"@segment/analytics.js-integration":967,"global-queue":1127,"is":1131}],967:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":968,"./statics":969,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],968:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":970,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],969:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":971,"dup":42}],970:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],971:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],972:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_tsq');
  var slug = require('slug-component');

  /**
   * Expose `Tapstream` integration.
   */

  var Tapstream = (module.exports = integration('Tapstream')
    .assumesPageview()
    .global('_tsq')
    .option('accountName', '')
    .option('trackAllPages', true)
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .tag('<script src="//cdn.tapstream.com/static/js/tapstream.js">'));

  /**
   * Initialize.
   *
   * @api public
   */

  Tapstream.prototype.initialize = function() {
    window._tsq = window._tsq || [];
    push('setAccountName', this.options.accountName);
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Tapstream.prototype.loaded = function() {
    return !!(window._tsq && window._tsq.push !== Array.prototype.push);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Tapstream.prototype.page = function(page) {
    var category = page.category();
    var opts = this.options;
    var name = page.fullName();

    // all pages
    if (opts.trackAllPages) {
      this.track(page.track());
    }

    // named pages
    if (name && opts.trackNamedPages) {
      this.track(page.track(name));
    }

    // categorized pages
    if (category && opts.trackCategorizedPages) {
      this.track(page.track(category));
    }
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Tapstream.prototype.track = function(track) {
    var props = track.properties();
    // needs events as slugs
    push('fireHit', slug(track.event()), [props.url]);
  };

  },{"@segment/analytics.js-integration":973,"global-queue":1127,"slug-component":1165}],973:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":974,"./statics":975,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],974:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":976,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],975:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":977,"dup":42}],976:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],977:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],978:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Page = require('segmentio-facade').Page;
  var convert = require('@segment/convert-dates');
  var extend = require('@ndhoule/extend');
  var integration = require('@segment/analytics.js-integration');
  var iso = require('@segment/to-iso-string');

  /**
   * Expose `Totango` integration.
   */

  var Totango = (module.exports = integration('Totango')
    .assumesPageview()
    .global('totango')
    .global('totango_options')
    .global('__totango3')
    .option('disableHeartbeat', false)
    .option('serviceId', null)
    .option('trackNamedPages', true)
    .option('trackCategorizedPages', true)
    .tag('<script src="//tracker.totango.com/totango4.0.3.js">'));

  /**
   * Initialize.
   *
   * http://help.totango.com/installing-totango/quick-start-installing-totango-on-your-web-app-using-javascript/
   *
   * @param {Object} page
   */

  Totango.prototype.initialize = function(page) {
    page = page || new Page({});

    /* eslint-disable */
    window.totango = {
      go:function(){return -1;},
      setAccountAttributes:function(){},
      identify:function(){},
      track:function(t,o,n,a){window.totango_tmp_stack.push({activity:t,module:o,org:n,user:a}); return -1;}};
    /* eslint-enable */

    window.totango_options = {
      allow_empty_accounts: false,
      service_id: this.options.serviceId,
      disable_heartbeat: this.options.disableHeartbeat,
      module: page.category()
    };

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  Totango.prototype.loaded = function() {
    return !!window.__totango3;
  };

  /**
   * Page.
   *
   * @param {Page} page
   */

  Totango.prototype.page = function(page) {
    var user = this.analytics.user();
    var group = this.analytics.group();
    var opts = this.options;
    var category = page.category();
    var name = page.fullName();
    if (category && opts.trackCategorizedPages) this.track(page.track(category));
    if (name && opts.trackNamedPages) this.track(page.track(name));
    this._category = category;
    if (!user.id() || !group.id())
      return this.debug('must identify and group first');
    if (!category) return this.debug('category required');
    this.go({ module: category });
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   */

  Totango.prototype.identify = function(identify) {
    if (!identify.userId()) return this.debug('id required');
    var traits = identify.traits({ created: 'Create Date' });
    this.go({
      user: convert(traits, iso),
      username: traits.id
    });
  };

  /**
   * Group.
   *
   * @param {Group} group
   */

  Totango.prototype.group = function(group) {
    if (!group.groupId()) return this.debug('id required');
    var traits = group.traits({ created: 'Create Date' });
    var options = { account: convert(traits, iso) };
    var totangoOptions = group.integrations().Totango;

    if (totangoOptions) {
      if (totangoOptions.parent) {
        options.account.parent = convert(totangoOptions.parent, iso);
      }

      if (totangoOptions.product) {
        options.product = convert(totangoOptions.product, iso);
      }

      if (totangoOptions.hasOwnProperty('enableHierarchy')) {
        options.enableHierarchy = totangoOptions.enableHierarchy;
      }
    }

    this.go(options);
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  Totango.prototype.track = function(track) {
    var props = track.properties();
    window.totango.track(track.event(), props.category || this._category);
  };

  /**
   * Helper for `totango.go` to always mix in the right options.
   *
   * @param {Object} options
   */

  Totango.prototype.go = function(options) {
    var defs = {
      allow_empty_accounts: false,
      service_id: this.options.serviceId,
      disable_heartbeat: this.options.disableHeartbeat
    };

    options = options || {};
    options = extend({}, defs, options);

    window.totango.go(options);
  };

  },{"@ndhoule/extend":13,"@segment/analytics.js-integration":979,"@segment/convert-dates":1087,"@segment/to-iso-string":1103,"segmentio-facade":1158}],979:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":980,"./statics":981,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":982,"dup":40,"slug-component":1165}],980:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":984,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],981:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":985,"dup":42}],982:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":983,"_process":1149,"dup":43}],983:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":986}],984:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],985:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],986:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],987:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');
  var useHttps = require('use-https');

  /**
   * Expose `TvSquared` integration.
   */

  var TvSquared = (module.exports = integration('TV Squared')
    // NOTE(ndhoule): `tv2track.js` introduces the JSON2 global
    .global('JSON2')
    .global('_tvq')
    .option('brandId', '')
    .option('hostname', '')
    .option('clientId', 0)
    .option('customMetrics', [])
    .option('trackWhitelist', [])
    .tag('<script src="{{ tvSquaredUrl }}/tv2track.js">'));

  /**
   * Initialize TV Squared.
   *
   * @param {Facade} page
   *
   */

  TvSquared.prototype.initialize = function() {
    window._tvq = window._tvq || [];
    var url = useHttps() ? 'https://' : 'http://';

    if (this.options.clientId) {
      url += 'collector-' + this.options.clientId + '.tvsquared.com';
    } else {
      url += this.options.hostname;
    }

    window._tvq.push(['setSiteId', this.options.brandId]);
    window._tvq.push(['setTrackerUrl', url + '/tv2track.php']);

    this.load({ tvSquaredUrl: url }, this.ready);
  };

  /**
   * Has the TV Squared library been loaded yet?
   *
   * @return {Boolean}
   */

  TvSquared.prototype.loaded = function() {
    return !!window._tvq;
  };

  /**
   * Page
   *
   * @param {Facade} page
   */

  TvSquared.prototype.page = function() {
    window._tvq.push(['trackPageView']);
  };

  /**
   * Track an event.
   *
   * @param {Facade} track
   */

  TvSquared.prototype.track = function(track) {
    var event = track.event();

    // FIXME: Our Segment.com UI currently has a bug that will keep at least one empty string in an input array if it's activated, but then all deleted.
    // This parses empty inputs to avoid trying to send 'properties.' through track.proxy().
    var whitelist = this.options.trackWhitelist.slice();
    for (var i = 0; i < whitelist.length; i++) {
      if (whitelist[i] === '') {
        whitelist.splice(i, 1);
      }
    }

    // This should only run if there's a whitelist. If there's no whitelist, all events will be sent.
    for (i = 0; i < whitelist.length; i++) {
      // If there is a whitelist and we find the event, break out and continue.
      if (event.toUpperCase() === whitelist[i].toUpperCase()) break;
      // Otherwise, if we're at the last element, it's not in the whitelist. Return early.
      if (i === whitelist.length - 1) return;
    }

    var session = { user: track.userId() || track.anonymousId() || '' };
    var action = {
      // Without a standardized way to bubble up errors client-side, we'll fallback to empty strings for now so they end up in TVSquared.
      rev: track.revenue() || '',
      prod: track.proxy('properties.productType') || '',
      id: track.orderId() || '',
      promo: track.proxy('properties.promo') || ''
    };

    var cmArr = this.options.customMetrics.slice();
    // FIXME: Our Segment.com UI currently has a bug that will keep at least one empty string in an input array if it's activated, but then all deleted.
    // This parses empty inputs to avoid trying to send 'properties.' through track.proxy().
    for (i = 0; i < cmArr.length; i++) {
      if (cmArr[i] === '') {
        cmArr.splice(i, 1);
      }
    }
    if (cmArr.length) {
      // If the user has specified they want to use specific additional metrics, then we'll try to find them.
      for (var j = 0; j < cmArr.length; j++) {
        var key = cmArr[j];
        var value = track.proxy('properties.' + key);
        if (value) {
          action[key] = value;
        }
      }
    }

    window._tvq.push([
      function() {
        this.setCustomVariable(5, 'session', JSON.stringify(session), 'visit');
      }
    ]);
    window._tvq.push([
      function() {
        this.setCustomVariable(5, event, JSON.stringify(action), 'page');
      }
    ]);
    window._tvq.push(['trackPageView']);
  };

  },{"@segment/analytics.js-integration":988,"use-https":1180}],988:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":989,"./statics":990,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":991,"dup":40,"slug-component":1165}],989:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":993,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],990:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":994,"dup":42}],991:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":992,"_process":1149,"dup":43}],992:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":995}],993:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],994:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],995:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],996:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var defaults = require('@ndhoule/defaults');
  var foldl = require('@ndhoule/foldl');
  var each = require('component-each');
  var get = require('obj-case');
  var Track = require('segmentio-facade').Track;
  var extend = require('@ndhoule/extend');

  /**
   * Expose `TwitterAds`.
   */

  var TwitterAds = (module.exports = integration('Twitter Ads')
    .option('page', '')
    .option('universalTagPixelId', '')
    .option('identifier', 'productId')
    .tag(
      'singleTag',
      '<img src="//analytics.twitter.com/i/adsct?txn_id={{ pixelId }}&p_id=Twitter&tw_sale_amount={{ revenue }}&tw_order_quantity={{ quantity }}"/>'
    )
    .tag('universalTag', '<script src="//static.ads-twitter.com/uwt.js">')
    .mapping('events'));

  /**
   * Initialize.
   *
   * @api public
   */

  TwitterAds.prototype.initialize = function() {
    var self = this;

    // load universal website tag
    if (this.options.universalTagPixelId) {
      /* eslint-disable */
      (function(e,t,n,s,u,a){e.twq||(s=e.twq=function(){s.exe?s.exe.apply(s,arguments):s.queue.push(arguments);
  },s.version='1.1',s.queue=[])})(window,document,'script');
      /* eslint-disable */

      this.load('universalTag', function() {
        window.twq('init', self.options.universalTagPixelId);
        self.ready();
      });
    } else {
      this.ready();
    }
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  TwitterAds.prototype.page = function(page) {
    if (this.options.universalTagPixelId) {
      window.twq('track', 'PageView');
    }
    if (this.options.page) {
      this.load('singleTag', {
        pixelId: this.options.page,
        revenue: 0, // default
        quantity: 0 // default
      });
    }
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  TwitterAds.prototype.track = function(track) {
    this.fireLegacyConversionTags(track);
  };

  /**
   * Products Searched
   *
   * Required params: None
   *
   * @api public
   * @param {Track} track
   */

  TwitterAds.prototype.productsSearched = function(track) {
    this.fireLegacyConversionTags(track);

    if (this.options.universalTagPixelId) {
      var payload = setStatus(track.properties());
      window.twq('track', 'Search', payload);
    }
  };

  /**
   * Product Viewed
   *
   * Required params: `content_ids`, `content_type`
   *
   * @api public
   * @param {Track} product
   */

  TwitterAds.prototype.productViewed = function(product) {
    this.fireLegacyConversionTags(product);

    if (this.options.universalTagPixelId) {
      var props = product.properties();
      var identifier = this.options.identifier; // sku or productId
      var payload = {
        content_ids: [product[identifier]()],
        content_type: 'product', // Must be hardcoded
        content_name: product.name(),
        content_category: product.category()
      };

      payload = extend(payload, setStatus(props));

      window.twq('track', 'ViewContent', payload);
    }
  };

  /**
   * Product Added
   *
   * Required params: `content_ids`, `content_type`
   *
   * @api public
   * @param {Track} product
   */

  TwitterAds.prototype.productAdded = function(product) {
    this.fireLegacyConversionTags(product);

    if (this.options.universalTagPixelId) {
      var props = product.properties();
      var identifier = this.options.identifier; // sku or productId
      var payload = {
        content_ids: [product[identifier]()],
        content_type: 'product', // Must be hardcoded
        content_name: product.name()
      };

      payload = extend(payload, setStatus(props));

      window.twq('track', 'AddToCart', payload);
    }
  };

  /**
   * Order Completed.
   *
   * Required params: `value`, `currency`, `content_type`, `content_ids`
   *
   * @api public
   * @param {Track} track
   */

  TwitterAds.prototype.orderCompleted = function(track) {
    var identifier = this.options.identifier; // 'sku' or 'productId'
    // add up all the quantities of each product
    var sumOfQuantities = foldl(function(cartQuantity, product) {
      return cartQuantity + (get(product, 'quantity') || 0);
    }, 0, track.products());

    this.fireLegacyConversionTags(track, { quantity: sumOfQuantities });

    // Advanced Conversion Tracking
    // If you do not predefine these events, Twitter still collects them but you won't be able to
    // attribute this event inside your running campaigns
    if (this.options.universalTagPixelId) {
      var payload = {
        currency: track.currency(), // Defaults to 'USD'
        content_type: 'product', // Must be hardcoded
        order_id: track.orderId(),
        num_items: sumOfQuantities.toString() // Twitter requires string value
      };

      if (track.revenue()) payload.value = track.revenue().toFixed(2);

      payload = extend(payload, setStatus(track.properties()));

      // Content Ids and Name needs some data massaging
      var content = foldl(function(ret, item) {
        var product = new Track({ properties: item });
        var contentId = product[identifier]();
        ret.ids.push(contentId);
        ret.names.push(product.name());

        return ret;
      }, { ids: [], names: [] }, track.products());

      // Sorting for browser consistency
      payload.content_ids = content.ids.sort();
      payload.content_name = content.names.sort().join(', '); // Twitter confirmed this is the recommended way to send multiple product names

      window.twq('track', 'Purchase', payload);
    }
  };

  /**
   * Product Added To Wishlist
   *
   * Required params: None
   *
   * @api public
   * @param {Track} product
   */

  TwitterAds.prototype.productAddedToWishlist = function(product) {
    this.fireLegacyConversionTags(product);

    if (this.options.universalTagPixelId) {
      var props = product.properties();
      var identifier = this.options.identifier; // sku or productId
      var payload = {
        content_name: product.name(),
        content_category: product.category(),
        content_ids: [product[identifier]()]
      };

      payload = extend(payload, setStatus(props));

      window.twq('track', 'AddToWishlist', payload);
    }
  };

  /**
   * Checkout Started
   *
   * Required params: None
   *
   * @api public
   * @param {Track} track
   */

  TwitterAds.prototype.checkoutStarted = function(track) {
    // add up all the quantities of each product
    var sumOfQuantities = foldl(function(cartQuantity, product) {
      return cartQuantity + (get(product, 'quantity') || 0);
    }, 0, track.products());

    this.fireLegacyConversionTags(track, { quantity: sumOfQuantities });

    if (this.options.universalTagPixelId) {
      var identifier = this.options.identifier; // sku or productId

      // Content Ids and Name needs some data massaging
      var content = foldl(function(ret, item) {
        var product = new Track({ properties: item });
        var contentId = product[identifier]();
        ret.ids.push(contentId);
        ret.names.push(product.name());
        ret.categories.push(product.category());

        return ret;
      }, { ids: [], names: [], categories: [] }, track.products());

      // Sorting for browser consistency
      var payload = {
        content_ids: content.ids.sort(),
        content_name: content.names.sort().join(', '), // Twitter confirmed this is the recommended way to send multiple product names
        content_category: content.categories.join(', ')
      };

      payload = extend(payload, setStatus(track.properties()));

      window.twq('track', 'InitiateCheckout', payload);
    }
  };

  /**
   * Payment Info Entered
   *
   * Required params: None
   *
   * @api public
   * @param {Track} track
   */

  TwitterAds.prototype.paymentInfoEntered = function(track) {
    this.fireLegacyConversionTags(track);

    var payload = extend({}, setStatus(track.properties()));

    if (this.options.universalTagPixelId) window.twq('track', 'AddPaymentInfo', payload);
  };

  /**
   * Track Legacy Conversion Tags
   *
   * @api private
   * @param {Object} track
   * @param {Object} override
   */

  TwitterAds.prototype.fireLegacyConversionTags = function(track, override) {
    // Only fire events that are mapped in settings
    var events = this.events(track.event());
    var self = this;

    // Fire conversion tag(s) for each mapped event
    each(events, function(pixelId) {
      var tagParams= {
        pixelId: pixelId,
        quantity: track.proxy('properties.quantity') || 0,
        revenue: track.revenue() || 0
      };

      // Allow for overriding default tag params mapping
      if (override) tagParams = defaults(override, tagParams);

      self.load('singleTag', tagParams);
    });
  }

  /**
   * Set status
   *
   * @api private
   * @param {Object} properties
   * @return {Object} ret
   */

  function setStatus(properties) {
    return properties.status ? { status: properties.status } : {};
  }

  },{"@ndhoule/defaults":8,"@ndhoule/extend":13,"@ndhoule/foldl":14,"@segment/analytics.js-integration":997,"component-each":1112,"obj-case":1143,"segmentio-facade":1158}],997:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":998,"./statics":999,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":1001,"slug-component":1165}],998:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],999:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1000,"dup":51}],1000:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1001:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],1002:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var Identify = require('segmentio-facade').Identify;
  var clone = require('component-clone');
  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose Userlike integration.
   */

  var Userlike = (module.exports = integration('Userlike')
    .assumesPageview()
    .global('userlikeConfig')
    .global('userlikeData')
    .option('secretKey', '')
    .option('listen', false)
    .tag(
      '<script src="//userlike-cdn-widgets.s3-eu-west-1.amazonaws.com/{{ secretKey }}.js">'
    ));

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'userlike',
    version: '1.0.0'
  };

  /**
   * Initialize.
   *
   * @api public
   */

  Userlike.prototype.initialize = function() {
    var self = this;
    var segmentBaseInfo = clone(this.options);
    var user = this.analytics.user();
    var identify = new Identify({
      userId: user.id(),
      traits: user.traits()
    });

    // FIXME: Should this be a global? Waiting for answer from Userlike folks as
    // of 5/19/2015
    //
    // https://github.com/thomassittig/analytics.js-integrations/commit/e8fb4c067abe7f8549d0e0153504fd24a9aa4b53
    // segmentBaseInfo = clone(this.options);

    segmentBaseInfo.visitor = {
      name: identify.name(),
      email: identify.email()
    };

    if (!window.userlikeData) window.userlikeData = { custom: {} };
    window.userlikeData.custom.segmentio = segmentBaseInfo;

    this.load(function() {
      if (self.options.listen) self.attachListeners();
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  Userlike.prototype.loaded = function() {
    return !!(window.userlikeConfig && window.userlikeData);
  };

  /**
   * Listen for chat events.
   *
   * TODO: As of 4/17/2015, Userlike doesn't give access to the message body in events.
   * Revisit this/send it when they do.
   */

  Userlike.prototype.attachListeners = function() {
    var self = this;
    window.userlikeTrackingEvent = function(eventName, globalCtx, sessionCtx) {
      if (eventName === 'chat_started') {
        self.analytics.track(
          'Live Chat Conversation Started',
          {
            agentId: sessionCtx.operator_id,
            agentName: sessionCtx.operator_name
          },
          { context: { integration: integrationContext } }
        );
      }
      if (eventName === 'message_operator_terminating') {
        self.analytics.track(
          'Live Chat Message Sent',
          {
            agentId: sessionCtx.operator_id,
            agentName: sessionCtx.operator_name
          },
          { context: { integration: integrationContext } }
        );
      }
      if (eventName === 'message_client_terminating') {
        self.analytics.track(
          'Live Chat Message Received',
          {
            agentId: sessionCtx.operator_id,
            agentName: sessionCtx.operator_name
          },
          { context: { integration: integrationContext } }
        );
      }
      if (eventName === 'chat_quit') {
        self.analytics.track(
          'Live Chat Conversation Ended',
          {
            agentId: sessionCtx.operator_id,
            agentName: sessionCtx.operator_name
          },
          { context: { integration: integrationContext } }
        );
      }
    };
  };

  },{"@segment/analytics.js-integration":1003,"component-clone":1110,"segmentio-facade":1158}],1003:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1004,"./statics":1005,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1004:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1006,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1005:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1007,"dup":42}],1006:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1007:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1008:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var alias = require('@segment/alias');
  var convertDates = require('@segment/convert-dates');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('UserVoice');
  var unix = require('to-unix-timestamp');

  /**
   * Expose `UserVoice` integration.
   */

  var UserVoice = (module.exports = integration('UserVoice')
    .assumesPageview()
    .global('UserVoice')
    .global('showClassicWidget')
    .option('apiKey', '')
    .option('classic', false)
    .option('forumId', null)
    .option('showWidget', true)
    .option('mode', 'contact')
    .option('accentColor', '#448dd6')
    .option('screenshotEnabled', true)
    .option('smartvote', true)
    .option('trigger', null)
    .option('triggerPosition', 'bottom-right')
    .option('triggerColor', '#ffffff')
    .option('triggerBackgroundColor', 'rgba(46, 49, 51, 0.6)')
    // BACKWARD COMPATIBILITY: classic options
    .option('classicMode', 'full')
    .option('primaryColor', '#cc6d00')
    .option('linkColor', '#007dbf')
    .option('defaultMode', 'support')
    .option('tabLabel', 'Feedback & Support')
    .option('tabColor', '#cc6d00')
    .option('tabPosition', 'middle-right')
    .option('tabInverted', false)
    .option('customTicketFields', {})
    .tag('<script src="//widget.uservoice.com/{{ apiKey }}.js">'));

  /**
   * When in "classic" mode, on `construct` swap all of the method to point to
   * their classic counterparts.
   *
   * @api private
   */

  UserVoice.on('construct', function(integration) {
    if (!integration.options.classic) return;
    /* eslint-disable no-param-reassign */
    integration.group = undefined;
    integration.identify = integration.identifyClassic;
    integration.initialize = integration.initializeClassic;
    /* eslint-enable no-param-reassign */
  });

  /**
   * Initialize.
   *
   * @api public
   */

  UserVoice.prototype.initialize = function() {
    var options = this.options;
    var opts = formatOptions(options);
    push('set', opts);
    push('autoprompt', {});

    if (options.showWidget) {
      if (options.trigger) {
        push('addTrigger', options.trigger, opts);
      } else {
        push('addTrigger', opts);
      }
    }

    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  UserVoice.prototype.loaded = function() {
    return !!(window.UserVoice && window.UserVoice.push !== Array.prototype.push);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  UserVoice.prototype.identify = function(identify) {
    var traits = identify.traits({ created: 'created_at' });
    traits = convertDates(traits, unix);
    push('identify', traits);
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  UserVoice.prototype.group = function(group) {
    var traits = group.traits({ created: 'created_at' });
    traits = convertDates(traits, unix);
    push('identify', { account: traits });
  };

  /**
   * Initialize (classic).
   *
   * @api private
   */

  UserVoice.prototype.initializeClassic = function() {
    var options = this.options;
    // part of public api
    window.showClassicWidget = showClassicWidget;
    if (options.showWidget)
      showClassicWidget('showTab', formatClassicOptions(options));
    this.load(this.ready);
  };

  /**
   * Identify (classic).
   *
   * @api private
   * @param {Identify} identify
   */

  UserVoice.prototype.identifyClassic = function(identify) {
    push('setCustomFields', identify.traits());
  };

  /**
   * Format the options for UserVoice.
   *
   * @api private
   * @param {Object} options
   * @return {Object}
   */

  function formatOptions(options) {
    return alias(options, {
      forumId: 'forum_id',
      accentColor: 'accent_color',
      smartvote: 'smartvote_enabled',
      triggerColor: 'trigger_color',
      triggerBackgroundColor: 'trigger_background_color',
      triggerPosition: 'trigger_position',
      screenshotEnabled: 'screenshot_enabled',
      customTicketFields: 'ticket_custom_fields'
    });
  }

  /**
   * Format the classic options for UserVoice.
   *
   * @api private
   * @param {Object} options
   * @return {Object}
   */

  function formatClassicOptions(options) {
    return alias(options, {
      forumId: 'forum_id',
      classicMode: 'mode',
      primaryColor: 'primary_color',
      tabPosition: 'tab_position',
      tabColor: 'tab_color',
      linkColor: 'link_color',
      defaultMode: 'default_mode',
      tabLabel: 'tab_label',
      tabInverted: 'tab_inverted'
    });
  }

  /**
   * Show the classic version of the UserVoice widget. This method is usually part
   * of UserVoice classic's public API.
   *
   * @api private
   * @param {String} type ('showTab' or 'showLightbox')
   * @param {Object} options (optional)
   */

  function showClassicWidget(type, options) {
    var t = type || 'showLightbox';
    push(t, 'classic_widget', options);
  }

  },{"@segment/alias":21,"@segment/analytics.js-integration":1009,"@segment/convert-dates":1087,"global-queue":1127,"to-unix-timestamp":1175}],1009:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1010,"./statics":1011,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1010:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1012,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1011:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1013,"dup":42}],1012:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1013:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1014:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var cookie = require('component-cookie');
  var integration = require('@segment/analytics.js-integration');
  var push = require('global-queue')('_veroq');

  /**
   * Expose `Vero` integration.
   */

  var Vero = (module.exports = integration('Vero')
    .global('_veroq')
    .option('apiKey', '')
    .tag('<script src="//d3qxef4rp70elm.cloudfront.net/m.js">'));

  /**
   * Initialize.
   *
   * https://github.com/getvero/vero-api/blob/master/sections/js.md
   *
   * @api public
   */

  Vero.prototype.initialize = function() {
    // clear default cookie so vero parses correctly.
    // this is for the tests.
    // basically, they have window.addEventListener('unload')
    // which then saves their "command_store", which is an array.
    // so we just want to create that initially so we can reload the tests.
    if (!cookie('__veroc4')) cookie('__veroc4', '[]');
    push('init', { api_key: this.options.apiKey });
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Vero.prototype.loaded = function() {
    return !!(window._veroq && window._veroq.push !== Array.prototype.push);
  };

  /**
   * Page.
   *
   * https://www.getvero.com/knowledge-base#/questions/71768-Does-Vero-track-pageviews
   *
   * @api public
   * @param {Page} page
   */

  Vero.prototype.page = function(page) {
    push('trackPageview');
    var tags = page.options('Vero').tags;
    if (tags) this.addOrRemoveTags(tags);
  };

  /**
   * Identify.
   *
   * https://www.getvero.com/api/http/#users
   * https://github.com/getvero/vero-api/blob/master/sections/js.md#user-identification
   *
   * @api public
   * @param {Identify} identify
   */

  Vero.prototype.identify = function(identify) {
    var traits = identify.traits();
    var email = identify.email();
    var id = identify.userId();
    // userId OR email address are required by Vero's API. When userId isn't present,
    // email will be used as the userId.
    if (!id && !email) return;
    push('user', traits);
    // check for tags and either add or remove.
    var tags = identify.options('Vero').tags;
    if (tags) this.addOrRemoveTags(tags);
  };

  /**
   * Track.
   *
   * https://www.getvero.com/api/http/#actions
   * https://github.com/getvero/vero-api/blob/master/sections/js.md#tracking-events
   *
   * @api public
   * @param {Track} track
   */

  Vero.prototype.track = function(track) {
    var regex = /[uU]nsubscribe/;

    if (track.event().match(regex)) {
      push('unsubscribe', { id: track.properties().id });
    } else {
      push('track', track.event(), track.properties(), { source: 'segment' });
    }
    // check for tags and either add or remove.
    var tags = track.options('Vero').tags;
    if (tags) this.addOrRemoveTags(tags);
  };

  /**
   * Order Completed.
   *
   * https://www.getvero.com/api/http/#actions
   * https://github.com/getvero/vero-api/blob/master/sections/js.md#tracking-events
   *
   * @api public
   * @param {Track} track
   */

  Vero.prototype.orderCompleted = function(track) {
    var products = track.properties().products;
    if (products && Array.isArray(products)) {
      for (var x = 0; x < products.length; x++) {
        push('track', 'Ordered Product', products[x], { source: 'segment' });
      }
    }

    push('track', track.event(), track.properties(), { source: 'segment' });
    var tags = track.options('Vero').tags;
    if (tags) this.addOrRemoveTags(tags);
  };

  /**
   * Alias.
   *
   * https://www.getvero.com/api/http/#users
   * https://github.com/getvero/vero-api/blob/master/sections/api/users.md
   *
   * @api public
   * @param {Alias} alias
   */

  Vero.prototype.alias = function(alias) {
    var to = alias.to();

    if (alias.from()) {
      push('reidentify', to, alias.from());
    } else {
      push('reidentify', to);
    }
    var tags = alias.options('Vero').tags;
    if (tags) this.addOrRemoveTags(tags);
  };

  /**
   * AddOrRemoveTags.
   *
   * http://developers.getvero.com/?javascript#tags
   *
   * @api public
   * @param {Object} tags
   */

  Vero.prototype.addOrRemoveTags = function(tags) {
    var payload = {};
    if (!tags.action || !tags.values) return;
    var action = tags.action;
    payload[action] = tags.values;
    if (tags.id) {
      payload.id = tags.id;
    }
    push('tags', payload);
  };

  },{"@segment/analytics.js-integration":1015,"component-cookie":1111,"global-queue":1127}],1015:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1016,"./statics":1017,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1016:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1018,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1017:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1019,"dup":42}],1018:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1019:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1020:[function(require,module,exports){
  /* eslint-disable strict */

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');

  var allowedExperimentTypes = ['VISUAL_AB', 'VISUAL', 'SPLIT_URL', 'SURVEY'];

  /**
   * Expose `VWO` integration.
   */

  var VWO = (module.exports = integration('Visual Website Optimizer')
    .global('_vis_opt_queue')
    .global('_vis_opt_revenue_conversion')
    .global('_vwo_exp')
    .global('_vwo_exp_ids')
    .global('VWO')
    .option('accountId')
    .option('useAsyncSmartCode', false)
    .option('settingsTolerance', 2000)
    .option('libraryTolerance', 2500)
    .option('useExistingJQuery', false)
    .option('replay', true)
    .option('listen', false)
    .option('experimentNonInteraction', false)
    .option('isSpa', false)
    .option('trackOnlyAbExperiments', false));

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'visual-website-optimizer',
    version: '1.0.0'
  };

  /**
   * Initialize.
   */

  VWO.prototype.initialize = function() {
    if (this.options.useAsyncSmartCode) {
      /* eslint-disable */
      var account_id = this.options.accountId;
      var settings_tolerance = this.options.settingsTolerance;
      var library_tolerance = this.options.libraryTolerance;
      var use_existing_jquery = this.options.useExistingJQuery;
      var isSPA = this.options.isSpa;
      window._vwo_code=(function(){f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random()+'&f='+(+isSPA));return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
      /* eslint-enable */
    }

    var self = this;

    if (this.options.replay) {
      tick(function() {
        self.replay();
      });
    }

    if (this.options.listen) {
      tick(function() {
        self.roots();
      });
    }

    if (this.options.useAsyncSmartCode) {
      enqueue(function() {
        self.ready();
      });
    } else {
      self.ready();
    }
  };

  /**
   * Completed Purchase.
   *
   * https://vwo.com/knowledge/vwo-revenue-tracking-goal
   */

  VWO.prototype.orderCompleted = function(track) {
    var total = track.total() || track.revenue() || 0;
    enqueue(function() {
      window._vis_opt_revenue_conversion(total);
    });
  };

  /**
   * Replay the experiments the user has seen as traits to all other integrations.
   * Wait for the next tick to replay so that the `analytics` object and all of
   * the integrations are fully initialized.
   */

  VWO.prototype.replay = function() {
    var analytics = this.analytics;

    experiments(function(err, traits) {
      if (traits) analytics.identify(traits);
    });
  };

  /**
   * Replay the experiments the user has seen as traits to all other integrations.
   * Wait for the next tick to replay so that the `analytics` object and all of
   * the integrations are fully initialized.
   */

  VWO.prototype.roots = function() {
    var analytics = this.analytics;
    var self = this;
    var identifyCalled = false;
    var experimentsTracked = {};
    rootExperiments(function(err, data) {
      each(data, function(experimentId, variationName) {
        var uuid = window.VWO.data.vin.uuid;
        var props = {
          experimentId: experimentId,
          variationName: variationName,
          vwoUserId: uuid
        };

        if (self.options.experimentNonInteraction) props.nonInteraction = 1;

        if(identifyCalled === false) {
          analytics.identify({vwoUserId: uuid});
          identifyCalled = true;
        }
        if (!experimentsTracked[experimentId]) {
          analytics.track('Experiment Viewed', props, {
            context: { integration: integrationContext }
          });
          experimentsTracked[experimentId] = true;
        }
      });
    }, this.options.trackOnlyAbExperiments);
  };

  /**
   * Get dictionary of experiment keys and variations.
   *
   * http://visualwebsiteoptimizer.com/knowledge/integration-of-vwo-with-kissmetrics/
   *
   * @param {Function} fn
   * @return {Object}
   */

  function rootExperiments(fn, trackOnlyAbExperiments) {
    enqueue(function() {
      var data = {};
      var experimentIds = window._vwo_exp_ids;
      if (!experimentIds) return fn();
      each(experimentIds, function(experimentId) {
        var variationName = variation(experimentId, trackOnlyAbExperiments);
        if (variationName) data[experimentId] = variationName;
      });
      fn(null, data);
    });
  }

  /**
   * Get dictionary of experiment keys and variations.
   *
   * http://visualwebsiteoptimizer.com/knowledge/integration-of-vwo-with-kissmetrics/
   *
   * @param {Function} fn
   * @return {Object}
   */

  function experiments(fn) {
    enqueue(function() {
      var data = {};
      var ids = window._vwo_exp_ids;
      if (!ids) return fn();
      each(ids, function(id) {
        var name = variation(id);
        if (name) data['Experiment: ' + id] = name;
      });
      fn(null, data);
    });
  }

  /**
   * Add a `fn` to the VWO queue, creating one if it doesn't exist.
   *
   * @param {Function} fn
   */

  function enqueue(fn) {
    window._vis_opt_queue = window._vis_opt_queue || [];
    window._vis_opt_queue.push(fn);
  }

  /**
   * Check whether the experiment type is one of allowed types.
   *
   * @param {Object} experiment
   * @return {Boolean}
   */
  function isValidExperimentType(experiment) {
    if (!experiment || !experiment.type) {
      return false;
    }
    return allowedExperimentTypes.indexOf(experiment.type.toUpperCase()) !== -1;
  }

  /**
   * Get the chosen variation's name from an experiment `id`.
   *
   * http://visualwebsiteoptimizer.com/knowledge/integration-of-vwo-with-kissmetrics/
   *
   * @param {String} id
   * @return {String}
   */

  function variation(id, trackOnlyAbExperiments) {
    var experiments = window._vwo_exp;
    if (!experiments) return null;
    var experiment = experiments[id];

    if (!experiment || !Object.keys(experiment).length) {
      // if falsey value or empty object
      // This will avoid further errors.
      return null;
    }

    if (
      trackOnlyAbExperiments &&
      !isValidExperimentType(experiment, trackOnlyAbExperiments)
    ) {
      return null;
    }

    var variationId = experiment.combination_chosen;

    // Send data only if experiment is marked ready by VWO and User is not previewing the VWO campaign
    if (experiment.ready && !window._vis_debug && variationId) {
      return experiment.comb_n[variationId];
    }
    return null;
  }

  },{"@segment/analytics.js-integration":1021,"component-each":1112,"next-tick":1142}],1021:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":1022,"./statics":1023,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":1025,"slug-component":1165}],1022:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1023:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1024,"dup":51}],1024:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1025:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],1026:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var useHttps = require('use-https');
  var remove = require('obj-case').del;

  /**
   * Expose `WebEngage` integration.
   */

  var WebEngage = (module.exports = integration('WebEngage')
    .readyOnInitialize()
    .global('webengage')
    .option('licenseCode', '')
    .tag(
      'http',
      '<script src="http://cdn.widgets.webengage.com/js/webengage-min-v-6.0.js">'
    )
    .tag(
      'https',
      '<script src="https://ssl.widgets.webengage.com/js/webengage-min-v-6.0.js">'
    ));

  /**
   * Initialize.
   *
   * http://docs.webengage.com/docs/web-sdk-integration#section-integration-code
   * @api public
   */

  WebEngage.prototype.initialize = function() {
    /* eslint-disable */

    !function(e,t,n){function o(e,t){e[t[t.length-1]]=function(){r.__queue.push([t.join("."),arguments])}}var i,s,r=e[n],g=" ",l="init options track screen onReady".split(g),a="feedback survey notification".split(g),c="options render clear abort".split(g),p="Open Close Submit Complete View Click".split(g),u="identify login logout setAttribute".split(g);if(!r||!r.__v){for(e[n]=r={__queue:[],__v:"6.0",user:{}},i=0;i<l.length;i++)o(r,[l[i]]);for(i=0;i<a.length;i++){for(r[a[i]]={},s=0;s<c.length;s++)o(r[a[i]],[a[i],c[s]]);for(s=0;s<p.length;s++)o(r[a[i]],[a[i],"on"+p[s]])}for(i=0;i<u.length;i++)o(r.user,["user",u[i]]);}}(window,document,"webengage");

    window.webengage.ixP = 'Segment';
    /* eslint-enable */

    window.webengage.init(this.options.licenseCode);

    var name = useHttps() ? 'https' : 'http';
    this.load(name, this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  WebEngage.prototype.loaded = function() {
    return !!window.webengage;
  };

  /**
   * Identify.
   *
   * http://docs.webengage.com/docs/web-sdk-user#section-webengage-user-login
   *
   * @api public
   * @param {Identify} identify
   */

  WebEngage.prototype.identify = function(identify) {
    var traits = identify.traits();
    var id = identify.userId();
    var mappedTraits = mapTraits(traits);
    // handle names
    if (identify.firstName()) mappedTraits.we_first_name = identify.firstName();
    if (identify.lastName()) mappedTraits.we_last_name = identify.lastName();
    remove(mappedTraits, 'name');
    remove(mappedTraits, 'firstName');
    remove(mappedTraits, 'lastName');

    if (id) window.webengage.user.login(id);

    if (traits) window.webengage.user.setAttribute(mappedTraits);
  };

  /**
   * Track.
   *
   * http://docs.webengage.com/docs/web-sdk-events#section-webengage-track
   *
   * @api public
   * @param {Track} track
   */

  WebEngage.prototype.track = function(track) {
    var event = track.event();
    var properties = track.properties();
    window.webengage.track(event, properties);
  };

  /**
   * Page.
   *
   * http://docs.webengage.com/docs/web-sdk-integration#section-webengage-screen
   * @param {Page} page
   */

  WebEngage.prototype.page = function(page) {
    var name = page.name() || '';
    var properties = page.properties();

    window.webengage.screen(name, properties);
  };

  /**
   * Map traits to their WebEngage attributes.
   *
   * http://docs.webengage.com/docs/web-sdk-user#section-reserved-attributes
   *
   * @param {Object} traits
   * @return {Object} mapped
   * @api private
   */

  function mapTraits(traits) {
    var aliases = {
      email: 'we_email',
      gender: 'we_gender',
      birthday: 'we_birth_date',
      phone: 'we_phone',
      company: 'we_company'
    };

    var mapped = {};
    for (var k in traits) {
      if (aliases.hasOwnProperty(k)) {
        mapped[aliases[k]] = traits[k];
      } else {
        mapped[k] = traits[k];
      }
    }

    if (
      Object.prototype.toString.call(mapped.we_birth_date) === '[object Date]'
    ) {
      var date = mapped.we_birth_date;

      mapped.we_birth_date =
        date.getUTCFullYear() +
        '-' +
        pad(date.getUTCMonth() + 1) +
        '-' +
        pad(date.getUTCDate());
    }

    return mapped;
  }

  /**
   * Pad single digit numbers with a leading 0.
   *
   * @param {number} number
   * @return {number}
   * @api private
   */

  function pad(number) {
    return number < 10 ? '0' + number : number;
  }

  },{"@segment/analytics.js-integration":1027,"obj-case":1143,"use-https":1180}],1027:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1028,"./statics":1029,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1028:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1030,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1029:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1031,"dup":42}],1030:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1031:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1032:[function(require,module,exports){
  'use strict';

  var integration = require('@segment/analytics.js-integration');
  var reject = require('reject');
  var when = require('do-when');

  /**
   * Expose `Wigzo` integration
   */

  var Wigzo = (module.exports = integration('Wigzo')
    .global('wigzo')
    .option('orgToken', '')
    .tag('tracker', '<script src="https://app.wigzo.com/wigzo.compressed.js">'));

  /**
   * Initialize Wigzo
   */

  Wigzo.prototype.initialize = function() {
    var orgToken = this.options.orgToken;
    var self = this;

    /* eslint-disable */
    // setup the tracker globals
    window.WigzoObject = 'wigzo';
    window.wigzo = window.wigzo || function() {
      window.wigzo.q = window.wigzo.q || [];
      window.wigzo.q.push(arguments);
    };
    window.wigzo.l = new Date().getTime();
    /* eslint-enable */

    window.wigzo.integrationSource = 'Segment';
    window.wigzo('configure', orgToken);

    this.load('tracker', function() {
      // make sure necessary functions and objects exist
      when(self.loaded, self.ready);
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Wigzo.prototype.loaded = function() {
    return !!window.wigzo;
  };

  /**
   * Product Added
   *
   * @param {Track} track
   */

  Wigzo.prototype.productAdded = function(track) {
    var productId = track.productId();
    if (productId) window.wigzo.track('addtocart', productId);
  };

  /**
   * Wishlist Product Added to Cart
   *
   * @param {Track} track
   */

  Wigzo.prototype.productAddedFromWishlistToCart = function(track) {
    var productId = track.productId();
    if (productId) window.wigzo.track('addtocart', productId);
  };

  /**
   * Product Removed
   *
   * @param {Track} track
   */

  Wigzo.prototype.productRemoved = function(track) {
    var productId = track.productId();
    if (productId) window.wigzo.track('removedfromcart', productId);
  };

  /**
   * Products Searched
   *
   * @param {Track} track
   */

  Wigzo.prototype.productsSearched = function(track) {
    var props = track.properties();
    if (props.query) {
      window.wigzo.track('search', props.query);
    }
  };

  /**
   * Product Added to Wishlist
   *
   * @param {Track} track
   */

  Wigzo.prototype.productAddedToWishlist = function(track) {
    var productId = track.productId();
    if (productId) window.wigzo.track('wishlist', productId);
  };

  /**
   * Checkout Started
   *
   * @param {Track} track
   */

  Wigzo.prototype.checkoutStarted = function(track) {
    var productList = track.products();
    var addedProductIds = [];
    for (var i = 0; i < productList.length; i++) {
      var item = productList[i];
      addedProductIds.push(item.product_id || item.productId);
    }

    if (addedProductIds.length)
      window.wigzo.track('checkoutstarted', addedProductIds);
  };

  /**
   * Completed Order
   *
   * @param {Track} track
   */

  Wigzo.prototype.orderCompleted = function(track) {
    var productList = track.products();
    var addedProductIds = [];
    for (var i = 0; i < productList.length; i++) {
      var item = productList[i];
      addedProductIds.push(item.product_id || item.productId);
    }

    if (addedProductIds.length) window.wigzo.track('buy', addedProductIds);
  };

  /**
   * Product Review
   *
   * @param {Track} track
   */
  Wigzo.prototype.productReviewed = function(track) {
    window.wigzo.track('review', track.properties());
  };

  /**
   * Product Clicked
   *
   * @param {Track} track
   */
  Wigzo.prototype.productClicked = function(track) {
    var options = track.options(this.name);
    var traits = reject({
      productId: track.productId(),
      title: track.name(),
      price: track.currency() + ' ' + track.price(),
      category: track.category(),
      canonicalUrl: track.proxy('context.page.url'),
      /* custom props */
      image: options.imageUrl,
      description: options.description,
      language: options.language
    });
    window.wigzo.index(traits);
  };

  /**
   * Product Viewed
   *
   * @param {Track} track
   */
  Wigzo.prototype.productViewed = function(track) {
    var options = track.options(this.name);
    var traits = reject({
      productId: track.productId(),
      title: track.name(),
      price: track.currency() + ' ' + track.price(),
      category: track.category(),
      canonicalUrl: track.proxy('context.page.url'),
      /* custom props */
      image: options.imageUrl,
      description: options.description,
      language: options.language
    });
    window.wigzo.index(traits);
  };

  /**
   * Identify.
   *
   * @api public
   * @param {Identify} identify
   */

  Wigzo.prototype.identify = function(identify) {
    var id = identify.userId();
    if (id) window.wigzo.USER_IDENTIFIER = id;

    var traits = reject({
      email: identify.email(),
      phone: identify.phone(),
      fullName: identify.name()
    });
    window.wigzo.identify(traits);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Wigzo.prototype.track = function(track) {
    window.wigzo.track(track.event(), track.properties());
  };

  /**
   * Page.
   *
   * @param {Page} page
   */

  Wigzo.prototype.page = function(page) {
    var pageData = reject({
      canonicalUrl: page.url(),
      title: page.name()
    });
    window.wigzo.track('view', pageData);
  };

  },{"@segment/analytics.js-integration":1033,"do-when":1125,"reject":1150}],1033:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":1034,"./statics":1035,"@ndhoule/defaults":8,"component-bind":1109,"debug":1123,"dup":49,"extend":1037,"slug-component":1165}],1034:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1035:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1036,"dup":51}],1036:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1037:[function(require,module,exports){
  arguments[4][80][0].apply(exports,arguments)
  },{"dup":80}],1038:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');

  /**
   * Expose `Wishpond` integration.
   */

  var Wishpond = (module.exports = integration('Wishpond')
    .global('Wishpond')
    .option('siteId', '')
    .option('apiKey', '')
    .tag('<script id="wishpond-tracker" src="//cdn.wishpond.net/connect.js">'));

  /**
   * Initialize.
   *
   * http://developers.wishpond.com/#introduction
   *
   * @api public
   */

  Wishpond.prototype.initialize = function() {
    window.Wishpond = window.Wishpond || [];
    window.Wishpond.merchantId = this.options.siteId;
    window.Wishpond.writeKey = this.options.apiKey;
    /* eslint-disable */
    (function(){
      var a,b,c;
      a = function(f){return function(){window.Wishpond.push([f].concat(Array.prototype.slice.call(arguments,0)));};};
      b = ['identify', 'track'];
      for (c = 0; c < b.length; c++) {window.Wishpond[b[c]] = a(b[c]);}}
    )();
    /* eslint-enable */
    this.load(this.ready);
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Wishpond.prototype.loaded = function() {
    return !!window.Wishpond.Logger;
  };

  /**
   * Identify.
   *
   * http://developers.wishpond.com/#identify
   *
   * @api public
   * @param {Identify} identify
   */

  Wishpond.prototype.identify = function(identify) {
    if (!identify.userId()) return this.debug('user id required');

    window.Wishpond.Tracker.identify(
      identify.userId(),
      identify.traits({
        createdAt: 'created_at',
        updatedAt: 'updated_at',
        firstName: 'first_name',
        lastName: 'last_name',
        phoneNumber: 'phone_number',
        leadScore: 'lead_score'
      })
    );
  };

  /**
   * Track.
   *
   * http://developers.wishpond.com/#tracking-events
   *
   * @api public
   * @param {Track} track
   */

  Wishpond.prototype.track = function(track) {
    window.Wishpond.Tracker.track(track.event(), track.properties());
  };

  },{"@segment/analytics.js-integration":1039}],1039:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1040,"./statics":1041,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1040:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1042,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1041:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1043,"dup":42}],1042:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1043:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1044:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var each = require('component-each');
  var integration = require('@segment/analytics.js-integration');
  var toSnakeCase = require('to-snake-case');
  var is = require('is');
  var foldl = require('@ndhoule/foldl');
  var isostring = require('isostring');
  var time = require('unix-time');

  /**
   * Expose `Woopra` integration.
   */

  var Woopra = (module.exports = integration('Woopra')
    .global('woopra')
    .option('domain', '')
    .option('cookieName', 'wooTracker')
    .option('cookieDomain', null)
    .option('cookiePath', '/')
    .option('ping', true)
    .option('pingInterval', 12000)
    .option('idleTimeout', 300000)
    .option('downloadTracking', true)
    .option('outgoingTracking', true)
    .option('outgoingIgnoreSubdomain', true)
    .option('downloadPause', 200)
    .option('outgoingPause', 400)
    .option('ignoreQueryUrl', true)
    .option('hideCampaign', false)
    .tag('<script src="//static.woopra.com/js/w.js">'));

  /**
   * Initialize.
   *
   * http://www.woopra.com/docs/setup/javascript-tracking/
   */

  Woopra.prototype.initialize = function() {
    /* eslint-disable */
    (function() {
      var i,
        s,
        z,
        w = window,
        d = document,
        a = arguments,
        q = 'script',
        f = ['config', 'track', 'identify', 'visit', 'push', 'call'],
        c = function() {
          var i,
            self = this;
          self._e = [];
          for (i = 0; i < f.length; i++) {
            (function(f) {
              self[f] = function() {
                self._e.push(
                  [f].concat(Array.prototype.slice.call(arguments, 0))
                );
                return self;
              };
            })(f[i]);
          }
        };
      w._w = w._w || {};
      for (i = 0; i < a.length; i++) {
        w._w[a[i]] = w[a[i]] = w[a[i]] || new c();
      }
    })('woopra');
    /* eslint-enable */

    this.load(this.ready);
    each(this.options, function(key, value) {
      key = toSnakeCase(key);
      if (value == null) return;
      if (value === '') return;
      window.woopra.config(key, value);
    });
  };

  /**
   * Loaded?
   *
   * @return {Boolean}
   */

  Woopra.prototype.loaded = function() {
    return !!(window.woopra && window.woopra.loaded);
  };

  /**
   * Page.
   *
   * @param {String} category (optional)
   */

  Woopra.prototype.page = function(page) {
    setContext(page);

    var props = page.properties();
    var name = page.fullName();
    if (name) props.title = name;
    window.woopra.track('pv', props);
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   */

  Woopra.prototype.identify = function(identify) {
    setContext(identify);

    var traits = identify.traits();

    // Woopra likes timestamps in milliseconds
    // Ref: https://www.woopra.com/docs/manual/configure-schema/
    each(traits, function(key, val) {
      if (isostring(val) || is.date(val)) {
        traits[key] = time(val) * 1000;
      }
    });

    if (identify.name()) traits.name = identify.name();
    // `push` sends it off async
    window.woopra.identify(traits).push();
  };

  /**
   * Track.
   *
   * @param {Track} track
   */

  Woopra.prototype.track = function(track) {
    setContext(track);
    window.woopra.track(track.event(), stringifyNested(track.properties()));
  };

  /**
   * Stringify nested objects.
   *
   * Undocumented aspect of Woopra's API, but apparently required. Breaks
   * on `Completed Order` `properties.products`.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function stringifyNested(obj) {
    return foldl(
      function(results, value, key) {
        if (is.array(obj[key])) {
          results[key] = json.stringify(obj[key]);
        } else {
          results[key] = obj[key];
        }
        return results;
      },
      {},
      obj
    );
  }

  function setContext(event) {
    var options = event.options();
    if (options) {
      window.woopra.config({ context: options });
    }
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":1045,"component-each":1112,"is":1131,"isostring":1132,"to-snake-case":1172,"unix-time":1179}],1045:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1046,"./statics":1047,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1048,"dup":40,"slug-component":1165}],1046:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1050,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1047:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1051,"dup":42}],1048:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":1049,"_process":1149,"dup":43}],1049:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":1052}],1050:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1051:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1052:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],1053:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var foldl = require('@ndhoule/foldl');
  var is = require('is');
  var integration = require('@segment/analytics.js-integration');
  var omit = require('omit');

  /**
   * Expose `Wootric` integration.
   */

  var Wootric = (module.exports = integration('Wootric')
    .assumesPageview()
    .option('accountToken', '')
    .global('wootricSettings')
    .global('wootric_survey_immediately')
    .global('wootric')
    .tag('library', '<script src="//cdn.wootric.com/wootric-sdk.js"></script>'));

  /**
   * Initialize Wootric.
   *
   * @api public
   */

  Wootric.prototype.initialize = function() {
    window.wootricSettings = window.wootricSettings || {};
    window.wootricSettings.account_token = this.options.accountToken;
    window.wootricSettings.version = 'wootric-segment-js-2.3.0';

    var self = this;
    this.load('library', function() {
      self.ready();
    });
  };

  /**
   * Has the Wootric library been loaded yet?
   *
   * @api private
   * @return {boolean}
   */

  Wootric.prototype.loaded = function() {
    // We are always ready since we are just setting a global variable in initialize
    return !!window.wootric;
  };

  /**
   * Identify a user.
   *
   * @api public
   * @param {Facade} identify
   */

  Wootric.prototype.identify = function(identify) {
    var userId = identify.userId();
    var anonymousId = identify.anonymousId();
    var traits = identify.traits();
    var email = identify.email();
    var createdAt = identify.created();
    var language = traits.language;

    window.wootricSettings.segment_user_id = userId || anonymousId;
    if (language) window.wootricSettings.language = language;

    survey(email, createdAt, traits, null);
  };

  /**
   * Track.
   *
   * @api public
   * @param {Track} track
   */

  Wootric.prototype.track = function(track) {
    var properties = track.properties();
    var email = track.email();
    var eventName = track.event();
    var language = properties.language;

    if (language) {
      window.wootricSettings.language = language;
    }

    survey(email, null, properties, eventName);
  };

  /**
   * Page.
   *
   * @api public
   * @param {Page} page
   */

  Wootric.prototype.page = function(page) {
    window.wootricSettings.page_info = page.properties();
    window.wootric('page');
  };

  /**
   * Group.
   *
   * @api public
   * @param {Group} group
   */

  Wootric.prototype.group = function(group) {
    window.wootricSettings.group_info = group.traits();
    window.wootric('group');
  };

  /**
   * Convert trait key to Wootric format.
   *
   * @param {string} trait
   * @param {*} value
   */

  function convertKey(key, value) {
    if (is.date(value) && !key.endsWith('_date')) return key + '_date';
    return key;
  }

  /**
   * Convert a date to unix timestamp.
   *
   * @api private
   * @param {Date} date
   * @return {number}
   */

  function convertDate(date) {
    return Math.round(date.getTime() / 1000);
  }

  if (!String.prototype.endsWith) {
    /* eslint-disable */
    String.prototype.endsWith = function(searchString, position) {
      var subjectString = this.toString();
      if (
        typeof position !== 'number' ||
        !isFinite(position) ||
        Math.floor(position) !== position ||
        position > subjectString.length
      ) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.lastIndexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    /* eslint-enable */
  }

  /**
   * Survey end user
   *
   * @param {String} email
   * @param {Date} createdAt
   * @param {Object} properties
   * @param {String} eventName
   */

  function survey(email, createdAt, properties, eventName) {
    if (createdAt && createdAt.getTime)
      window.wootricSettings.created_at = Math.round(createdAt.getTime() / 1000);
    if (email) {
      window.wootricSettings.email = email;
    }

    window.wootricSettings.event_name = eventName;

    // Convert keys to Wootric format
    var newProperties = foldl(
      function(results, value, key) {
        var r = results;
        r[convertKey(key, value)] = is.date(value) ? convertDate(value) : value;
        return r;
      },
      {},
      properties
    );

    window.wootricSettings.properties = omit(
      ['created', 'createdAt', 'email'],
      newProperties
    );

    window.wootric('run');
  }

  },{"@ndhoule/foldl":14,"@segment/analytics.js-integration":1054,"is":1131,"omit":1145}],1054:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":1055,"./statics":1056,"@ndhoule/defaults":8,"component-bind":1109,"debug":1057,"dup":49,"extend":1059,"slug-component":1165}],1055:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1056:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1060,"dup":51}],1057:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":1058,"_process":1149,"dup":43}],1058:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":1061}],1059:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],1060:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1061:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],1062:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var bind = require('component-bind');
  var integration = require('@segment/analytics.js-integration');
  var tick = require('next-tick');
  var when = require('do-when');

  /**
   * Expose `Yandex` integration.
   */

  var Yandex = (module.exports = integration('Yandex Metrica')
    .assumesPageview()
    .global('yandex_metrika_callbacks')
    .global('Ya')
    .option('type', 0)
    .option('counterId', null)
    .option('clickmap', false)
    .option('webvisor', false)
    .option('trackHash', false)
    .option('trackLinks', false)
    .option('accurateTrackBounce', false)
    .tag('<script src="//mc.yandex.ru/metrika/watch.js">'));

  /**
   * Initialize.
   *
   * https://tech.yandex.com/metrika/
   * http://help.yandex.com/metrica/objects/creating-object.xml
   *
   * @api public
   */

  Yandex.prototype.initialize = function() {
    var id = this.options.counterId;
    var type = this.options.type;
    var clickmap = this.options.clickmap;
    var webvisor = this.options.webvisor;
    var trackHash = this.options.trackHash;
    var trackLinks = this.options.trackLinks;
    var accurateTrackBounce = this.options.accurateTrackBounce;

    push(function() {
      window['yaCounter' + id] = new window.Ya.Metrika({
        id: id,
        type: type,
        clickmap: clickmap,
        webvisor: webvisor,
        trackHash: trackHash,
        trackLinks: trackLinks,
        accurateTrackBounce: accurateTrackBounce
      });
    });

    var loaded = bind(this, this.loaded);
    var ready = this.ready;
    this.load(function() {
      when(loaded, function() {
        tick(ready);
      });
    });
  };

  /**
   * Loaded?
   *
   * @api private
   * @return {boolean}
   */

  Yandex.prototype.loaded = function() {
    return !!(window.Ya && window.Ya.Metrika);
  };

  /**
   * Push a new callback on the global Yandex queue.
   *
   * @api private
   * @param {Function} callback
   */

  function push(callback) {
    window.yandex_metrika_callbacks = window.yandex_metrika_callbacks || [];
    window.yandex_metrika_callbacks.push(callback);
  }

  },{"@segment/analytics.js-integration":1063,"component-bind":1109,"do-when":1125,"next-tick":1142}],1063:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1064,"./statics":1065,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1123,"dup":40,"slug-component":1165}],1064:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1066,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1065:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1067,"dup":42}],1066:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1067:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1068:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var integration = require('@segment/analytics.js-integration');
  var reject = require('reject');
  var extend = require('extend');

  /**
   * Expose `Youbora` integration.
   */

  var Youbora = (module.exports = integration('Youbora')
    .option('accountCode', '')
    .tag(
      'youbora-dashjs',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/dashjs/6.1.0/sp.min.js">'
    )
    .tag(
      'youbora-html5',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/html5/6.1.3/sp.min.js">'
    )
    .tag(
      'youbora-jwplayer',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/jwplayer7/6.1.2/sp.min.js">'
    )
    .tag(
      'youbora-theoplayer',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/theoplayer2/6.1.2/sp.min.js">'
    )
    .tag(
      'youbora-theplatform',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/theplatform/6.1.0/sp.min.js">'
    )
    .tag(
      'youbora-videojs',
      '<script src="https://smartplugin.youbora.com/v6/js/adapters/videojs5/6.1.7/sp.min.js">'
    )
    .tag(
      'youbora-main',
      '<script src="https://smartplugin.youbora.com/v6/js/lib/6.1.12/youboralib.min.js">'
    ));

  Youbora.prototype.loaded = function() {
    return !!window.youbora;
  };

  /**
   * Initialize.
   *
   * @api public
   */

  Youbora.prototype.initialize = function() {
    var self = this;
    this.load('youbora-main', function() {
      self.hookPlayers();
      self.pluginMap = {};
      self.ready();
    });
  };

  /**
   * Video Playback/Content Events
   * http://developer.nicepeopleatwork.com/wp-content/uploads/2017/01/Ingestion_API_Product-Doc_YOUBORA-2.pdf
   * @param {Facade} Track
   */

  Youbora.prototype.videoPlaybackStarted = function(track) {
    var youbora = window.youbora;
    var sessionId = track.proxy('properties.session_id');
    var plugin = new youbora.Plugin({
      accountCode: this.options.accountCode,
      username: this.analytics.user().id()
    });
    // for each video player instance maintain a mapping between a distinguishing 'session id' and an object containing the corresponding
    // youbora plugin as well as that player's playback data
    this.pluginMap[sessionId] = {
      plugin: plugin,
      data: track.properties() || {} // updated with event properties as they come in; youbora getter functions will read from this object
    };

    var adapter = new youbora.Adapter();
    var adsAdapter = new youbora.Adapter();

    // implement youbora getter functions, which retrieve playback data throughout video playback
    var data = this.pluginMap[sessionId].data;
    adapter.getBitrate = function() {
      return data.bitrate;
    };
    adapter.getPlayhead = function() {
      return data.position;
    };
    adapter.getFramesPerSecond = function() {
      return data.framerate;
    };
    adsAdapter.getPosition = function() {
      if (
        data.ad_type === 'pre' ||
        data.ad_type === 'mid' ||
        data.ad_type === 'post'
      ) {
        return data.ad_type;
      }
    };

    plugin.setAdapter(adapter);
    plugin.setAdsAdapter(adsAdapter);

    var options = reject({
      // filter out undefined values
      'content.isLive': track.proxy('properties.livestream'),
      'content.resource': track.proxy('context.page.url')
    });

    plugin.setOptions(options);
    plugin.fireInit();
    adapter.monitorPlayhead();
  };

  Youbora.prototype.videoContentStarted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;
    var adapter = plugin.getAdapter();

    var metadata = reject({
      content_id: track.proxy('properties.asset_id'),
      genre: track.proxy('properties.genre'),
      owner: track.proxy('properties.publisher')
    });

    var options = reject({
      'content.title': track.proxy('properties.title'),
      'content.title2': track.proxy('properties.program'),
      'content.duration': track.proxy('properties.total_length'),
      'content.metadata': metadata
    });

    plugin.setOptions(options);
    adapter.fireStart();
    adapter.fireJoin();
  };

  Youbora.prototype.videoContentPlaying = function(track) {
    var sessionId = track.proxy('properties.session_id');
    var pluginObj = this.pluginMap[sessionId];
    if (!pluginObj) return;

    Object.assign(pluginObj.data, track.properties());
  };

  Youbora.prototype.videoPlaybackBufferStarted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().fireBufferBegin();
    } else {
      plugin.getAdapter().fireBufferBegin();
    }
  };

  Youbora.prototype.videoPlaybackBufferCompleted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().fireBufferEnd();
    } else {
      plugin.getAdapter().fireBufferEnd();
    }
  };

  Youbora.prototype.videoPlaybackPaused = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().firePause();
    } else {
      plugin.getAdapter().firePause();
    }
  };

  Youbora.prototype.videoPlaybackResumed = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().fireResume();
    } else {
      plugin.getAdapter().fireResume();
    }
  };

  Youbora.prototype.videoPlaybackSeekStarted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().fireSeekBegin();
    } else {
      plugin.getAdapter().fireSeekBegin();
    }
  };

  Youbora.prototype.videoPlaybackSeekCompleted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    if (track.proxy('properties.ad_asset_id')) {
      plugin.getAdsAdapter().fireSeekEnd();
    } else {
      plugin.getAdapter().fireSeekEnd();
    }
  };

  Youbora.prototype.videoPlaybackCompleted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    plugin.fireStop();
  };

  Youbora.prototype.videoPlaybackInterrupted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    plugin.fireError();
  };

  // /**
  //  * Video Ad Events
  //  * http://developer.nicepeopleatwork.com/data-services/collection/data-collection-api-reference/?module=nqs7#/Smart_Ads
  //  * @param {Facade} Track
  //  */

  Youbora.prototype.videoAdStarted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    plugin.setOptions({
      'ad.title': track.proxy('properties.title')
    });
    plugin.getAdsAdapter().fireStart();
  };

  Youbora.prototype.videoAdCompleted = function(track) {
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    plugin.getAdsAdapter().fireStop();
  };

  // use track only for video ad clicked events since it's not on our spec
  Youbora.prototype.track = function(track) {
    if (track.event() !== 'Video Ad Clicked') return;
    var plugin = this.updatePlayerData(track);
    if (!plugin) return;

    plugin.getAdsAdapter().fireClick();
  };

  /**
   * Hook Players
   * If a customer is using a Youbora-supported video library then load the appropriate Youbora library and
   * connect Youbora to the supported video players (passed in as options by the customer)
   */

  Youbora.prototype.hookPlayers = function() {
    if (!this.options.players) return;

    var self = this;
    var players = this.options.players;

    if (Array.isArray(players.dashjs)) {
      this.load('youbora-dashjs', function() {
        players.dashjs.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.DashJS(playerObj.player)
          );
        });
      });
    }
    if (Array.isArray(players.html5)) {
      this.load('youbora-html5', function() {
        players.html5.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.Html5(playerObj.player)
          );
        });
      });
    }
    if (Array.isArray(players.jwplayer)) {
      this.load('youbora-jwplayer', function() {
        players.jwplayer.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.JWPlayer7(playerObj.player)
          );
        });
      });
    }
    if (Array.isArray(players.theoplayer)) {
      this.load('youbora-theoplayer', function() {
        players.theoplayer.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.TheoPlayer2(playerObj.player)
          );
        });
      });
    }
    if (Array.isArray(players.theplatform)) {
      this.load('youbora-theplatform', function() {
        players.theplatform.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.ThePlatform(playerObj.player)
          );
        });
      });
    }
    if (Array.isArray(players.videojs)) {
      this.load('youbora-videojs', function() {
        players.videojs.forEach(function(playerObj) {
          self.hookPlayer(
            playerObj.options,
            new window.youbora.adapters.Videojs5(playerObj.player)
          );
        });
      });
    }
  };

  /**
   * Hook Player
   * Connect Youbora to a video player
   */

  Youbora.prototype.hookPlayer = function(playerOptions, adapter, adsAdapter) {
    var plugin = new window.youbora.Plugin({
      accountCode: this.options.accountCode,
      username: this.analytics.user().id()
    });
    plugin.removeAdsAdapter();
    plugin.setOptions(playerOptions);
    plugin.setAdapter(adapter);
    if (adsAdapter) plugin.setAdsAdapter(adsAdapter);
  };

  /**
   * Hook Player
   * Retrieve the right plugin based off the given session Id and also update that plugin's playback data using the properties received
   */

  Youbora.prototype.updatePlayerData = function(track) {
    var sessionId = track.proxy('properties.session_id');
    if (!sessionId) return;
    var pluginObj = this.pluginMap[sessionId];
    if (!pluginObj) return;

    extend(pluginObj.data, track.properties()); // update playback data

    return pluginObj.plugin;
  };

  },{"@segment/analytics.js-integration":1069,"extend":1126,"reject":1150}],1069:[function(require,module,exports){
  arguments[4][49][0].apply(exports,arguments)
  },{"./protos":1070,"./statics":1071,"@ndhoule/defaults":8,"component-bind":1109,"debug":1072,"dup":49,"extend":1126,"slug-component":1165}],1070:[function(require,module,exports){
  arguments[4][50][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1106,"component-emitter":1114,"dup":50,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1071:[function(require,module,exports){
  arguments[4][51][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1074,"dup":51}],1072:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":1073,"_process":1149,"dup":43}],1073:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":1075}],1074:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1075:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],1076:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var fmt = require('@segment/fmt');
  var integration = require('@segment/analytics.js-integration');
  var when = require('do-when');
  var reject = require('reject');

  /**
   * Expose `Zopim`.
   */

  var Zopim = (module.exports = integration('Zopim')
    .global('$zopim')
    .option('zopimId', '')
    .option('listen', false)
    .readyOnLoad());

  /**
   * The context for this integration.
   */

  var integrationContext = {
    name: 'zopim',
    version: '1.0.0'
  };

  /**
   * Initialize the integration.
   */

  Zopim.prototype.initialize = function() {
    var self = this;
    this.load(function() {
      if (self.options.listen) self.attachListeners();
      self.ready();
    });
  };

  /**
   * Loaded?
   *
   * @return {boolean}
   */

  Zopim.prototype.loaded = function() {
    return !!(window.$zopim && typeof window.$zopim.livechat === 'object');
  };

  /**
   * Load the Zopim script
   *
   * @param {Function} done Callback to invoke when the script is loaded.
   */

  Zopim.prototype.load = function(done) {
    var zopimId = this.options.zopimId;
    var scriptUrl = fmt('//v2.zopim.com/?%s', zopimId);

    /* eslint-disable */
    window.$zopim || (function(d, s) { var z = (window.$zopim = function(c) { z._.push(c); }), $ = (z.s = d.createElement(s)), e = d.getElementsByTagName(s)[0]; z.set = function(o) { z.set._.push(o); }; z._ = []; z.set._ = []; $.async = !0; $.setAttribute('charset', 'utf-8'); $.src = scriptUrl; z.t = +new Date(); $.type = 'text/javascript'; e.parentNode.insertBefore($, e); })(document, 'script');
    /* eslint-enable */

    when(this.loaded, done);
  };

  /**
   * Listen for chat events.
   */

  // FIXME: Zopim has no support for message received/sent, add those handlers
  // when they do
  Zopim.prototype.attachListeners = function() {
    var self = this;

    // Zopim has not yet loaded, bail out
    if (!window.$zopim.livechat) return;
    if (!window.$zopim.livechat.setOnChatStart) return;

    window.$zopim.livechat.setOnChatStart(function() {
      self.analytics.track(
        'Live Chat Conversation Started',
        {},
        { context: { integration: integrationContext } }
      );
    });

    window.$zopim.livechat.setOnChatEnd(function() {
      self.analytics.track(
        'Live Chat Conversation Ended',
        {},
        { context: { integration: integrationContext } }
      );
    });
  };

  /**
   * Identify.
   *
   * @param {Identify} identify
   */

  Zopim.prototype.identify = function(identify) {
    window.$zopim.livechat.set(
      reject({
        email: identify.email(),
        name: identify.name() || identify.firstName(),
        phone: identify.phone()
      })
    );
  };

  },{"@segment/analytics.js-integration":1077,"@segment/fmt":1089,"do-when":1125,"reject":1150}],1077:[function(require,module,exports){
  arguments[4][40][0].apply(exports,arguments)
  },{"./protos":1078,"./statics":1079,"@ndhoule/clone":7,"@ndhoule/defaults":8,"@ndhoule/extend":13,"component-bind":1109,"debug":1080,"dup":40,"slug-component":1165}],1078:[function(require,module,exports){
  arguments[4][41][0].apply(exports,arguments)
  },{"@ndhoule/after":5,"@ndhoule/each":10,"@ndhoule/every":12,"@ndhoule/foldl":14,"@segment/fmt":1089,"@segment/load-script":1093,"analytics-events":1082,"component-emitter":1114,"dup":41,"is":1131,"load-iframe":1136,"next-tick":1142,"to-no-case":1171}],1079:[function(require,module,exports){
  arguments[4][42][0].apply(exports,arguments)
  },{"@ndhoule/each":10,"@ndhoule/includes":15,"component-emitter":1114,"domify":1083,"dup":42}],1080:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":1081,"_process":1149,"dup":43}],1081:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":1084}],1082:[function(require,module,exports){
  arguments[4][45][0].apply(exports,arguments)
  },{"dup":45}],1083:[function(require,module,exports){
  arguments[4][46][0].apply(exports,arguments)
  },{"dup":46}],1084:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],1085:[function(require,module,exports){
  var utf8Encode = require('utf8-encode');
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  module.exports = encode;
  function encode(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;

      input = utf8Encode(input);

      while (i < input.length) {

          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);

          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;

          if (isNaN(chr2)) {
              enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
              enc4 = 64;
          }

          output = output +
              keyStr.charAt(enc1) + keyStr.charAt(enc2) +
              keyStr.charAt(enc3) + keyStr.charAt(enc4);

      }

      return output;
  }
  },{"utf8-encode":1181}],1086:[function(require,module,exports){
  'use strict';

  /**
   * Get the current page's canonical URL.
   *
   * @return {string|undefined}
   */
  function canonical() {
    var tags = document.getElementsByTagName('link');
    // eslint-disable-next-line no-cond-assign
    for (var i = 0, tag; tag = tags[i]; i++) {
      if (tag.getAttribute('rel') === 'canonical') {
        return tag.getAttribute('href');
      }
    }
  }

  /*
   * Exports.
   */

  module.exports = canonical;

  },{}],1087:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var clone = require('@ndhoule/clone');
  var each = require('@ndhoule/each');
  var type = require('component-type');

  /**
   * Recursively convert an `obj`'s dates to new values.
   *
   * @param {Object} obj
   * @param {Function} convert
   * @return {Object}
   */
  function convertDates(obj, convert) {
    obj = clone(obj);
    each(function(val, key) {
      if (type(val) === 'date') {
        obj[key] = convert(val);
      }
      if (type(val) === 'object' || type(val) === 'array') {
        obj[key] = convertDates(val, convert);
      }
    }, obj);
    return obj;
  }

  /*
   * Exports.
   */

  module.exports = convertDates;

  },{"@ndhoule/clone":7,"@ndhoule/each":10,"component-type":1120}],1088:[function(require,module,exports){
  'use strict';

  /**
   * Module dependencies.
   */

  var debug = require('debug')('cookie');

  /**
   * Set or get cookie `name` with `value` and `options` object.
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @return {Mixed}
   * @api public
   */

  module.exports = function(name, value, options) {
    switch (arguments.length) {
      case 3:
      case 2:
        return set(name, value, options);
      case 1:
        return get(name);
      default:
        return all();
    }
  };

  /**
   * Set cookie `name` to `value`.
   *
   * @param {String} name
   * @param {String} value
   * @param {Object} options
   * @api private
   */

  function set(name, value, options) {
    options = options || {};
    var str = encode(name) + '=' + encode(value);

    if (value == null) options.maxage = -1;

    if (options.maxage) {
      options.expires = new Date(+new Date() + options.maxage);
    }

    if (options.path) str += '; path=' + options.path;
    if (options.domain) str += '; domain=' + options.domain;
    if (options.expires) str += '; expires=' + options.expires.toUTCString();
    if (options.sameSite) str += '; SameSite=' + options.sameSite;
    if (options.secure) str += '; secure';

    document.cookie = str;
  }

  /**
   * Return all cookies.
   *
   * @return {Object}
   * @api private
   */

  function all() {
    var str;
    try {
      str = document.cookie;
    } catch (err) {
      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error(err.stack || err);
      }
      return {};
    }
    return parse(str);
  }

  /**
   * Get cookie `name`.
   *
   * @param {String} name
   * @return {String}
   * @api private
   */

  function get(name) {
    return all()[name];
  }

  /**
   * Parse cookie `str`.
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function parse(str) {
    var obj = {};
    var pairs = str.split(/ *; */);
    var pair;
    if (pairs[0] == '') return obj; // eslint-disable-line eqeqeq
    for (var i = 0; i < pairs.length; ++i) {
      pair = pairs[i].split('=');
      obj[decode(pair[0])] = decode(pair[1]);
    }
    return obj;
  }

  /**
   * Encode.
   */

  function encode(value) {
    try {
      return encodeURIComponent(value);
    } catch (e) {
      debug('error `encode(%o)` - %o', value, e);
    }
  }

  /**
   * Decode.
   */

  function decode(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
      debug('error `decode(%o)` - %o', value, e);
    }
  }

  },{"debug":1123}],1089:[function(require,module,exports){
  (function (global){(function (){
  'use strict';

  // Stringifier
  var toString = global.JSON && typeof JSON.stringify === 'function' ? JSON.stringify : String;

  /**
   * Format the given `str`.
   *
   * @param {string} str
   * @param {...*} [args]
   * @return {string}
   */
  function fmt(str) {
    var args = Array.prototype.slice.call(arguments, 1);
    var j = 0;

    return str.replace(/%([a-z])/gi, function(match, f) {
      return fmt[f] ? fmt[f](args[j++]) : match + f;
    });
  }

  // Formatters
  fmt.o = toString;
  fmt.s = String;
  fmt.d = parseInt;

  /*
   * Exports.
   */

  module.exports = fmt;

  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{}],1090:[function(require,module,exports){
  'use strict';

  function isMeta(e) {
    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
      return true;
    }

    // Logic that handles checks for the middle mouse button, based
    // on [jQuery](https://github.com/jquery/jquery/blob/master/src/event.js#L466).
    var which = e.which;
    var button = e.button;
    if (!which && button !== undefined) {
      // eslint-disable-next-line no-bitwise, no-extra-parens
      return (!button & 1) && (!button & 2) && (button & 4);
    } else if (which === 2) {
      return true;
    }

    return false;
  }

  /*
   * Exports.
   */

  module.exports = isMeta;

  },{}],1091:[function(require,module,exports){
  'use strict';

  var isodate = require('@segment/isodate');

  /**
   * Expose `traverse`.
   */
  module.exports = traverse;

  /**
   * Recursively traverse an object or array, and convert
   * all ISO date strings parse into Date objects.
   *
   * @param {Object} input - object, array, or string to convert
   * @param {Boolean} strict - only convert strings with year, month, and date
   * @return {Object}
   */
  function traverse(input, strict) {
    if (strict === undefined) strict = true;
    if (input && typeof input === 'object') {
      return traverseObject(input, strict);
    } else if (Array.isArray(input)) {
      return traverseArray(input, strict);
    } else if (isodate.is(input, strict)) {
      return isodate.parse(input);
    }
    return input;
  }

  /**
   * Object traverser helper function.
   *
   * @param {Object} obj - object to traverse
   * @param {Boolean} strict - only convert strings with year, month, and date
   * @return {Object}
   */
  function traverseObject(obj, strict) {
    Object.keys(obj).forEach(function(key) {
      obj[key] = traverse(obj[key], strict);
    });
    return obj;
  }

  /**
   * Array traverser helper function
   *
   * @param {Array} arr - array to traverse
   * @param {Boolean} strict - only convert strings with year, month, and date
   * @return {Array}
   */
  function traverseArray(arr, strict) {
    arr.forEach(function(value, index) {
      arr[index] = traverse(value, strict);
    });
    return arr;
  }

  },{"@segment/isodate":1092}],1092:[function(require,module,exports){
  'use strict';

  /**
   * Matcher, slightly modified from:
   *
   * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js
   */

  var matcher = /^(\d{4})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:([ T])(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;

  /**
   * Convert an ISO date string to a date. Fallback to native `Date.parse`.
   *
   * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js
   *
   * @param {String} iso
   * @return {Date}
   */

  exports.parse = function(iso) {
    var numericKeys = [1, 5, 6, 7, 11, 12];
    var arr = matcher.exec(iso);
    var offset = 0;

    // fallback to native parsing
    if (!arr) {
      return new Date(iso);
    }

    /* eslint-disable no-cond-assign */
    // remove undefined values
    for (var i = 0, val; val = numericKeys[i]; i++) {
      arr[val] = parseInt(arr[val], 10) || 0;
    }
    /* eslint-enable no-cond-assign */

    // allow undefined days and months
    arr[2] = parseInt(arr[2], 10) || 1;
    arr[3] = parseInt(arr[3], 10) || 1;

    // month is 0-11
    arr[2]--;

    // allow abitrary sub-second precision
    arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0;

    // apply timezone if one exists
    if (arr[4] === ' ') {
      offset = new Date().getTimezoneOffset();
    } else if (arr[9] !== 'Z' && arr[10]) {
      offset = arr[11] * 60 + arr[12];
      if (arr[10] === '+') {
        offset = 0 - offset;
      }
    }

    var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);
    return new Date(millis);
  };


  /**
   * Checks whether a `string` is an ISO date string. `strict` mode requires that
   * the date string at least have a year, month and date.
   *
   * @param {String} string
   * @param {Boolean} strict
   * @return {Boolean}
   */

  exports.is = function(string, strict) {
    if (typeof string !== 'string') {
      return false;
    }
    if (strict && (/^\d{4}-\d{2}-\d{2}/).test(string) === false) {
      return false;
    }
    return matcher.test(string);
  };

  },{}],1093:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var onload = require('script-onload');
  var tick = require('next-tick');
  var type = require('component-type');

  /**
   * Loads a script asynchronously.
   *
   * @param {Object} options
   * @param {Function} cb
   */
  function loadScript(options, cb) {
    if (!options) {
      throw new Error('Can\'t load nothing...');
    }

    // Allow for the simplest case, just passing a `src` string.
    if (type(options) === 'string') {
      options = { src : options };
    }

    var https = document.location.protocol === 'https:' || document.location.protocol === 'chrome-extension:';

    // If you use protocol relative URLs, third-party scripts like Google
    // Analytics break when testing with `file:` so this fixes that.
    if (options.src && options.src.indexOf('//') === 0) {
      options.src = (https ? 'https:' : 'http:') + options.src;
    }

    // Allow them to pass in different URLs depending on the protocol.
    if (https && options.https) {
      options.src = options.https;
    } else if (!https && options.http) {
      options.src = options.http;
    }

    // Make the `<script>` element and insert it before the first script on the
    // page, which is guaranteed to exist since this Javascript is running.
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = options.src;

    // If we have a cb, attach event handlers. Does not work on < IE9 because
    // older browser versions don't register element.onerror
    if (type(cb) === 'function') {
      onload(script, cb);
    }

    tick(function() {
      // Append after event listeners are attached for IE.
      var firstScript = document.getElementsByTagName('script')[0];
      firstScript.parentNode.insertBefore(script, firstScript);
    });

    // Return the script element in case they want to do anything special, like
    // give it an ID or attributes.
    return script;
  }

  /*
   * Exports.
   */

  module.exports = loadScript;

  },{"component-type":1120,"next-tick":1142,"script-onload":1151}],1094:[function(require,module,exports){
  'use strict';

  var keys = require('@ndhoule/keys');
  var uuid = require('uuid').v4;

  var inMemoryStore = {
    _data: {},
    length: 0,
    setItem: function(key, value) {
      this._data[key] = value;
      this.length = keys(this._data).length;
      return value;
    },
    getItem: function(key) {
      if (key in this._data) {
        return this._data[key];
      }
      return null;
    },
    removeItem: function(key) {
      if (key in this._data) {
        delete this._data[key];
      }
      this.length = keys(this._data).length;
      return null;
    },
    clear: function() {
      this._data = {};
      this.length = 0;
    },
    key: function(index) {
      return keys(this._data)[index];
    }
  };

  function isSupportedNatively() {
    try {
      if (!window.localStorage) return false;
      var key = uuid();
      window.localStorage.setItem(key, 'test_value');
      var value = window.localStorage.getItem(key);
      window.localStorage.removeItem(key);

      // handle localStorage silently failing
      return value === 'test_value';
    } catch (e) {
      // Can throw if localStorage is disabled
      return false;
    }
  }

  function pickStorage() {
    if (isSupportedNatively()) {
      return window.localStorage;
    }
    // fall back to in-memory
    return inMemoryStore;
  }

  // Return a shared instance
  module.exports.defaultEngine = pickStorage();
  // Expose the in-memory store explicitly for testing
  module.exports.inMemoryEngine = inMemoryStore;

  },{"@ndhoule/keys":16,"uuid":1182}],1095:[function(require,module,exports){
  'use strict';

  var uuid = require('@lukeed/uuid').v4;
  var Store = require('./store');
  var each = require('@ndhoule/each');
  var Schedule = require('./schedule');
  var debug = require('debug')('localstorage-retry');
  var Emitter = require('component-emitter');

  // Some browsers don't support Function.prototype.bind, so just including a simplified version here
  function bind(func, obj) {
    return function() {
      return func.apply(obj, arguments);
    };
  }

  /**
   * @callback processFunc
   * @param {Mixed} item The item added to the queue to process
   * @param {Function} done A function to call when processing is completed.
   *   @param {Error} Optional error parameter if the processing failed
   *   @param {Response} Optional response parameter to emit for async handling
   */

  /**
   * Constructs a Queue backed by localStorage
   *
   * @constructor
   * @param {String} name The name of the queue. Will be used to find abandoned queues and retry their items
   * @param {Object} [opts] Optional argument to override `maxItems`, `maxAttempts`, `minRetryDelay, `maxRetryDelay`, `backoffFactor` and `backoffJitter`.
   * @param {processFunc} fn The function to call in order to process an item added to the queue
   */
  function Queue(name, opts, fn) {
    if (typeof opts === 'function') fn = opts;
    this.name = name;
    this.id = uuid();
    this.fn = fn;
    this.maxItems = opts.maxItems || Infinity;
    this.maxAttempts = opts.maxAttempts || Infinity;

    this.backoff = {
      MIN_RETRY_DELAY: opts.minRetryDelay || 1000,
      MAX_RETRY_DELAY: opts.maxRetryDelay || 30000,
      FACTOR: opts.backoffFactor || 2,
      JITTER: opts.backoffJitter || 0
    };

    // painstakingly tuned. that's why they're not "easily" configurable
    this.timeouts = {
      ACK_TIMER: 1000,
      RECLAIM_TIMER: 3000,
      RECLAIM_TIMEOUT: 10000,
      RECLAIM_WAIT: 500
    };

    this.keys = {
      IN_PROGRESS: 'inProgress',
      QUEUE: 'queue',
      RECLAIM_START: 'reclaimStart',
      RECLAIM_END: 'reclaimEnd',
      ACK: 'ack'
    };

    this._schedule = new Schedule();
    this._processId = 0;

    // Set up our empty queues
    this._store = new Store(this.name, this.id, this.keys);
    this._store.set(this.keys.IN_PROGRESS, {});
    this._store.set(this.keys.QUEUE, []);

    // bind recurring tasks for ease of use
    this._ack = bind(this._ack, this);
    this._checkReclaim = bind(this._checkReclaim, this);
    this._processHead = bind(this._processHead, this);

    this._running = false;
  }

  /**
   * Mix in event emitter
   */

  Emitter(Queue.prototype);

  /**
   * Starts processing the queue
   */
  Queue.prototype.start = function() {
    if (this._running) {
      this.stop();
    }
    this._running = true;
    this._ack();
    this._checkReclaim();
    this._processHead();
  };

  /**
   * Stops processing the queue
   */
  Queue.prototype.stop = function() {
    this._schedule.cancelAll();
    this._running = false;
  };

  /**
   * Decides whether to retry. Overridable.
   *
   * @param {Object} item The item being processed
   * @param {Number} attemptNumber The attemptNumber (1 for first retry)
   * @param {Error} error The error from previous attempt, if there was one
   * @return {Boolean} Whether to requeue the message
   */
  Queue.prototype.shouldRetry = function(_, attemptNumber) {
    if (attemptNumber > this.maxAttempts) return false;
    return true;
  };

  /**
   * Calculates the delay (in ms) for a retry attempt
   *
   * @param {Number} attemptNumber The attemptNumber (1 for first retry)
   * @return {Number} The delay in milliseconds to wait before attempting a retry
   */
  Queue.prototype.getDelay = function(attemptNumber) {
    var ms = this.backoff.MIN_RETRY_DELAY * Math.pow(this.backoff.FACTOR, attemptNumber);
    if (this.backoff.JITTER) {
      var rand =  Math.random();
      var deviation = Math.floor(rand * this.backoff.JITTER * ms);
      if (Math.floor(rand * 10) < 5) {
        ms -= deviation;
      } else {
        ms += deviation;
      }
    }
    return Number(Math.min(ms, this.backoff.MAX_RETRY_DELAY).toPrecision(1));
  };

  /**
   * Adds an item to the queue
   *
   * @param {Mixed} item The item to process
   */
  Queue.prototype.addItem = function(item) {
    this._enqueue({
      item: item,
      attemptNumber: 0,
      time: this._schedule.now(),
      id: uuid()
    });
  };

  /**
   * Adds an item to the retry queue
   *
   * @param {Mixed} item The item to retry
   * @param {Number} attemptNumber The attempt number (1 for first retry)
   * @param {Error} [error] The error from previous attempt, if there was one
   * @param {String} [id] The id of the queued message used for tracking duplicate entries
   */
  Queue.prototype.requeue = function(item, attemptNumber, error, id) {
    if (this.shouldRetry(item, attemptNumber, error)) {
      this._enqueue({
        item: item,
        attemptNumber: attemptNumber,
        time: this._schedule.now() + this.getDelay(attemptNumber),
        id: id || uuid()
      });
    } else {
      this.emit('discard', item, attemptNumber);
    }
  };

  Queue.prototype._enqueue = function(entry) {
    var queue = this._store.get(this.keys.QUEUE) || [];
    queue = queue.slice(-(this.maxItems - 1));
    queue.push(entry);
    queue = queue.sort(function(a,b) {
      return a.time - b.time;
    });

    this._store.set(this.keys.QUEUE, queue);

    if (this._running) {
      this._processHead();
    }
  };

  Queue.prototype._processHead = function() {
    var self = this;
    var store = this._store;

    // cancel the scheduled task if it exists
    this._schedule.cancel(this._processId);

    // Pop the head off the queue
    var queue = store.get(this.keys.QUEUE) || [];
    var inProgress = store.get(this.keys.IN_PROGRESS) || {};
    var now = this._schedule.now();
    var toRun = [];

    function enqueue(el, id) {
      toRun.push({
        item: el.item,
        done: function handle(err, res) {
          var inProgress = store.get(self.keys.IN_PROGRESS) || {};
          delete inProgress[id];
          store.set(self.keys.IN_PROGRESS, inProgress);
          self.emit('processed', err, res, el.item);
          if (err) {
            self.requeue(el.item, el.attemptNumber + 1, err, el.id);
          }
        }
      });
    }

    var inProgressSize = Object.keys(inProgress).length;

    while (queue.length && queue[0].time <= now && inProgressSize++ < self.maxItems) {
      var el = queue.shift();
      var id = uuid();

      // Save this to the in progress map
      inProgress[id] = {
        item: el.item,
        attemptNumber: el.attemptNumber,
        time: self._schedule.now()
      };

      enqueue(el, id);
    }

    store.set(this.keys.QUEUE, queue);
    store.set(this.keys.IN_PROGRESS, inProgress);

    each(function(el) {
      // TODO: handle fn timeout
      try {
        self.fn(el.item, el.done);
      } catch (err) {
        debug('Process function threw error: ' + err);
      }
    }, toRun);

    // re-read the queue in case the process function finished immediately or added another item
    queue = store.get(this.keys.QUEUE) || [];
    this._schedule.cancel(this._processId);
    if (queue.length > 0) {
      this._processId = this._schedule.run(this._processHead, queue[0].time - now, Schedule.Modes.ASAP);
    }
  };

  // Ack continuously to prevent other tabs from claiming our queue
  Queue.prototype._ack = function() {
    this._store.set(this.keys.ACK, this._schedule.now());
    this._store.set(this.keys.RECLAIM_START, null);
    this._store.set(this.keys.RECLAIM_END, null);
    this._schedule.run(this._ack, this.timeouts.ACK_TIMER, Schedule.Modes.ASAP);
  };

  Queue.prototype._checkReclaim = function() {
    var self = this;

    function tryReclaim(store) {
      store.set(self.keys.RECLAIM_START, self.id);
      store.set(self.keys.ACK, self._schedule.now());

      self._schedule.run(function() {
        if (store.get(self.keys.RECLAIM_START) !== self.id) return;
        store.set(self.keys.RECLAIM_END, self.id);

        self._schedule.run(function() {
          if (store.get(self.keys.RECLAIM_END) !== self.id) return;
          if (store.get(self.keys.RECLAIM_START) !== self.id) return;
          self._reclaim(store.id);
        }, self.timeouts.RECLAIM_WAIT, Schedule.Modes.ABANDON);
      }, self.timeouts.RECLAIM_WAIT, Schedule.Modes.ABANDON);
    }

    function findOtherQueues(name) {
      var res = [];
      var storage = self._store.getOriginalEngine();
      for (var i = 0; i < storage.length; i++) {
        var k = storage.key(i);
        var parts = k.split('.');
        if (parts.length !== 3) continue;
        if (parts[0] !== name) continue;
        if (parts[2] !== 'ack') continue;
        res.push(new Store(name, parts[1], self.keys));
      }
      return res;
    }

    each(function(store) {
      if (store.id === self.id) return;
      if (self._schedule.now() - store.get(self.keys.ACK) < self.timeouts.RECLAIM_TIMEOUT) return;
      tryReclaim(store);
    }, findOtherQueues(this.name));

    this._schedule.run(this._checkReclaim, this.timeouts.RECLAIM_TIMER, Schedule.Modes.RESCHEDULE);
  };

  Queue.prototype._reclaim = function(id) {
    var self = this;
    var other = new Store(this.name, id, this.keys);

    var our = {
      queue: this._store.get(this.keys.QUEUE) || []
    };

    var their = {
      inProgress: other.get(this.keys.IN_PROGRESS) || {},
      queue: other.get(this.keys.QUEUE) || []
    };

    var trackMessageIds = [];

    var addConcatQueue = function(queue, incrementAttemptNumberBy) {
      each(function(el) {
        var id = el.id || uuid();
        if (trackMessageIds.indexOf(id) >= 0) {
          self.emit('duplication', el.item, el.attemptNumber);
        } else {
          our.queue.push({
            item: el.item,
            attemptNumber: el.attemptNumber + incrementAttemptNumberBy,
            time: self._schedule.now(),
            id: id
          });
          trackMessageIds.push(id);
        }
      }, queue);
    };

    // add their queue to ours, resetting run-time to immediate and copying the attempt#
    addConcatQueue(their.queue, 0);

    // if the queue is abandoned, all the in-progress are failed. retry them immediately and increment the attempt#
    addConcatQueue(their.inProgress, 1);

    our.queue = our.queue.sort(function(a,b) {
      return a.time - b.time;
    });

    this._store.set(this.keys.QUEUE, our.queue);

    // remove all keys
    other.remove(this.keys.IN_PROGRESS);
    other.remove(this.keys.QUEUE);
    other.remove(this.keys.RECLAIM_START);
    other.remove(this.keys.RECLAIM_END);
    other.remove(this.keys.ACK);

    // process the new items we claimed
    this._processHead();
  };

  module.exports = Queue;

  },{"./schedule":1096,"./store":1097,"@lukeed/uuid":4,"@ndhoule/each":10,"component-emitter":1114,"debug":1098}],1096:[function(require,module,exports){
  'use strict';

  var each = require('@ndhoule/each');

  var CLOCK_LATE_FACTOR = 2;

  var defaultClock = {
    setTimeout: function(fn, ms) {
      return window.setTimeout(fn, ms);
    },
    clearTimeout: function(id) {
      return window.clearTimeout(id);
    },
    Date: window.Date
  };

  var clock = defaultClock;

  var modes = {
    ASAP: 1,
    RESCHEDULE: 2,
    ABANDON: 3
  };

  function Schedule() {
    this.tasks = {};
    this.nextId = 1;
  }

  Schedule.prototype.now = function() {
    return +new clock.Date();
  };

  Schedule.prototype.run = function(task, timeout, mode) {
    var id = this.nextId++;

    this.tasks[id] = clock.setTimeout(this._handle(id, task, timeout, mode || modes.ASAP), timeout);
    return id;
  };

  Schedule.prototype.cancel = function(id) {
    if (this.tasks[id]) {
      clock.clearTimeout(this.tasks[id]);
      delete this.tasks[id];
    }
  };

  Schedule.prototype.cancelAll = function() {
    each(clock.clearTimeout, this.tasks);
    this.tasks = {};
  };

  Schedule.prototype._handle = function(id, callback, timeout, mode) {
    var self = this;
    var start = self.now();
    return function() {
      delete self.tasks[id];
      if (mode >= modes.RESCHEDULE && start + timeout * CLOCK_LATE_FACTOR < self.now()) {
        if (mode === modes.RESCHEDULE) {
          self.run(callback, timeout, mode);
        }
        return;
      }
      return callback();
    };
  };

  Schedule.setClock = function(newClock) {
    clock = newClock;
  };

  Schedule.resetClock = function() {
    clock = defaultClock;
  };

  Schedule.Modes = modes;

  module.exports = Schedule;

  },{"@ndhoule/each":10}],1097:[function(require,module,exports){
  'use strict';

  var defaultEngine = require('./engine').defaultEngine;
  var inMemoryEngine = require('./engine').inMemoryEngine;
  var each = require('@ndhoule/each');
  var keys = require('@ndhoule/keys');
  var json = JSON;

  /**
  * Store Implementation with dedicated
  */

  function Store(name, id, keys, optionalEngine) {
    this.id = id;
    this.name = name;
    this.keys = keys || {};
    this.engine = optionalEngine || defaultEngine;
    this.originalEngine = this.engine;
  }

  /**
  * Set value by key.
  */

  Store.prototype.set = function(key, value) {
    var compoundKey = this._createValidKey(key);
    if (!compoundKey) return;
    try {
      this.engine.setItem(compoundKey, json.stringify(value));
    } catch (err) {
      if (isQuotaExceeded(err)) {
        // switch to inMemory engine
        this._swapEngine();
        // and save it there
        this.set(key, value);
      }
    }
  };

  /**
  * Get by Key.
  */

  Store.prototype.get = function(key) {
    try {
      var str = this.engine.getItem(this._createValidKey(key));
      if (str === null) {
        return null;
      }
      return json.parse(str);
    } catch (err) {
      return null;
    }
  };

  /**
   * Get original engine
   */

  Store.prototype.getOriginalEngine = function() {
    return this.originalEngine;
  };

  /**
  * Remove by Key.
  */

  Store.prototype.remove = function(key) {
    this.engine.removeItem(this._createValidKey(key));
  };

  /**
  * Ensure the key is valid
  */

  Store.prototype._createValidKey = function(key) {
    var name = this.name;
    var id = this.id;

    if (!keys(this.keys).length) return [name, id, key].join('.');

    // validate and return undefined if invalid key
    var compoundKey;
    each(function(value) {
      if (value === key) {
        compoundKey = [name, id, key].join('.');
      }
    }, this.keys);
    return compoundKey;
  };

  /**
  * Switch to inMemoryEngine, bringing any existing data with.
  */

  Store.prototype._swapEngine = function() {
    var self = this;

    // grab existing data, but only for this page's queue instance, not all
    // better to keep other queues in localstorage to be flushed later
    // than to pull them into memory and remove them from durable storage
    each(function(key) {
      var value = self.get(key);
      inMemoryEngine.setItem([self.name, self.id, key].join('.'), value);
      self.remove(key);
    }, this.keys);

    this.engine = inMemoryEngine;
  };

  module.exports = Store;

  function isQuotaExceeded(e) {
    var quotaExceeded = false;
    if (e.code) {
      switch (e.code) {
      case 22:
        quotaExceeded = true;
        break;
      case 1014:
        // Firefox
        if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
          quotaExceeded = true;
        }
        break;
      default:
        break;
      }
    } else if (e.number === -2147024882) {
      // Internet Explorer 8
      quotaExceeded = true;
    }
    return quotaExceeded;
  }

  },{"./engine":1094,"@ndhoule/each":10,"@ndhoule/keys":16}],1098:[function(require,module,exports){
  arguments[4][37][0].apply(exports,arguments)
  },{"dup":37}],1099:[function(require,module,exports){
  'use strict';

  /**
   * Prevent default on a given event.
   *
   * @param {Event} e
   * @example
   * anchor.onclick = prevent;
   * anchor.onclick = function(e){
   *   if (something) return prevent(e);
   * };
   */

  function preventDefault(e) {
    e = e || window.event;
    return e.preventDefault ? e.preventDefault() : e.returnValue = false;
  }

  /*
   * Exports.
   */

  module.exports = preventDefault;

  },{}],1100:[function(require,module,exports){
  'use strict';

  /**
   * Convenience alias
   */

  var define = Object.defineProperty;


  /**
   *  The base protocol
   */

  var initialProtocol = window.location.protocol;

  /**
   * Fallback mocked protocol in case Object.defineProperty doesn't exist.
   */

  var mockedProtocol;


  module.exports = function(protocol) {
    if (arguments.length === 0) {
      return get();
    }
    return set(protocol);
  };


  /**
   * Sets the protocol to be http:
   */

  module.exports.http = function() {
    set('http:');
  };


  /**
   * Sets the protocol to be https:
   */

  module.exports.https = function() {
    set('https:');
  };


  /**
   * Reset to the initial protocol.
   */

  module.exports.reset = function() {
    set(initialProtocol);
  };


  /**
   * Gets the current protocol, using the fallback and then the native protocol.
   *
   * @return {String} protocol
   */

  function get() {
    return mockedProtocol || window.location.protocol;
  }


  /**
   * Sets the protocol
   *
   * @param {String} protocol
   */

  function set(protocol) {
    try {
      define(window.location, 'protocol', {
        get: function() { return protocol; }
      });
    } catch (err) {
      mockedProtocol = protocol;
    }
  }

  },{}],1101:[function(require,module,exports){
  'use strict';

  /*
   * Module dependencies.
   */

  var JSON = require('json3');
  var base64encode = require('@segment/base64-encode');
  var cors = require('has-cors');
  var jsonp = require('jsonp');

  /*
   * Exports.
   */

  exports = module.exports = cors ? json : base64;

  /**
   * Expose `callback`
   */

  exports.callback = 'callback';

  /**
   * Expose `prefix`
   */

  exports.prefix = 'data';

  /**
   * Expose `json`.
   */

  exports.json = json;

  /**
   * Expose `base64`.
   */

  exports.base64 = base64;

  /**
   * Expose `type`
   */

  exports.type = cors ? 'xhr' : 'jsonp';

  /**
   * Send the given `obj` to `url` with `fn(err, req)`.
   *
   * @param {String} url
   * @param {Object} obj
   * @param {Object} headers
   * @param {Function} fn
   * @api private
   */

  function json(url, obj, headers, fn) {
    if (arguments.length === 3) fn = headers, headers = {};

    var req = new XMLHttpRequest;
    req.onerror = fn;
    req.onreadystatechange = done;
    req.open('POST', url, true);

    // TODO: Remove this eslint disable
    // eslint-disable-next-line guard-for-in
    for (var k in headers) {
      req.setRequestHeader(k, headers[k]);
    }
    req.send(JSON.stringify(obj));

    function done() {
      if (req.readyState === 4) {
        return fn(null, req);
      }
    }
  }

  /**
   * Send the given `obj` to `url` with `fn(err, req)`.
   *
   * @param {String} url
   * @param {Object} obj
   * @param {Function} fn
   * @api private
   */

  function base64(url, obj, _, fn) {
    if (arguments.length === 3) fn = _;

    var prefix = exports.prefix;
    var data = encode(obj);
    url += '?' + prefix + '=' + data;
    jsonp(url, { param: exports.callback }, function(err, obj) {
      if (err) return fn(err);
      fn(null, {
        url: url,
        body: obj
      });
    });
  }

  /**
   * Encodes `obj`.
   *
   * @param {Object} obj
   */

  function encode(obj) {
    var str = '';
    str = JSON.stringify(obj);
    str = base64encode(str);
    str = str.replace(/\+/g, '-').replace(/\//g, '_');
    return encodeURIComponent(str);
  }

  },{"@segment/base64-encode":1085,"has-cors":1128,"json3":1134,"jsonp":1135}],1102:[function(require,module,exports){
  (function (global){(function (){
  "use strict"

  var JSON = require('json3');

  module.exports = (function() {
    // Store.js
    var store = {},
      win = (typeof window != 'undefined' ? window : global),
      doc = win.document,
      localStorageName = 'localStorage',
      scriptTag = 'script',
      storage

    store.disabled = false
    store.version = '1.3.20'
    store.set = function(key, value) {}
    store.get = function(key, defaultVal) {}
    store.has = function(key) { return store.get(key) !== undefined }
    store.remove = function(key) {}
    store.clear = function() {}
    store.transact = function(key, defaultVal, transactionFn) {
      if (transactionFn == null) {
        transactionFn = defaultVal
        defaultVal = null
      }
      if (defaultVal == null) {
        defaultVal = {}
      }
      var val = store.get(key, defaultVal)
      transactionFn(val)
      store.set(key, val)
    }
    store.getAll = function() {
      var ret = {}
      store.forEach(function(key, val) {
        ret[key] = val
      })
      return ret
    }
    store.forEach = function() {}
    store.serialize = function(value) {
      return JSON.stringify(value)
    }
    store.deserialize = function(value) {
      if (typeof value != 'string') { return undefined }
      try { return JSON.parse(value) }
      catch(e) { return value || undefined }
    }

    // Functions to encapsulate questionable FireFox 3.6.13 behavior
    // when about.config::dom.storage.enabled === false
    // See https://github.com/marcuswestin/store.js/issues#issue/13
    function isLocalStorageNameSupported() {
      try { return (localStorageName in win && win[localStorageName]) }
      catch(err) { return false }
    }

    if (isLocalStorageNameSupported()) {
      storage = win[localStorageName]
      store.set = function(key, val) {
        if (val === undefined) { return store.remove(key) }
        storage.setItem(key, store.serialize(val))
        return val
      }
      store.get = function(key, defaultVal) {
        var val = store.deserialize(storage.getItem(key))
        return (val === undefined ? defaultVal : val)
      }
      store.remove = function(key) { storage.removeItem(key) }
      store.clear = function() { storage.clear() }
      store.forEach = function(callback) {
        for (var i=0; i<storage.length; i++) {
          var key = storage.key(i)
          callback(key, store.get(key))
        }
      }
    } else if (doc && doc.documentElement.addBehavior) {
      var storageOwner,
        storageContainer
      // Since #userData storage applies only to specific paths, we need to
      // somehow link our data to a specific path.  We choose /favicon.ico
      // as a pretty safe option, since all browsers already make a request to
      // this URL anyway and being a 404 will not hurt us here.  We wrap an
      // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
      // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
      // since the iframe access rules appear to allow direct access and
      // manipulation of the document element, even for a 404 page.  This
      // document can be used instead of the current document (which would
      // have been limited to the current path) to perform #userData storage.
      try {
        storageContainer = new ActiveXObject('htmlfile')
        storageContainer.open()
        storageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src="/favicon.ico"></iframe>')
        storageContainer.close()
        storageOwner = storageContainer.w.frames[0].document
        storage = storageOwner.createElement('div')
      } catch(e) {
        // somehow ActiveXObject instantiation failed (perhaps some special
        // security settings or otherwse), fall back to per-path storage
        storage = doc.createElement('div')
        storageOwner = doc.body
      }
      var withIEStorage = function(storeFunction) {
        return function() {
          var args = Array.prototype.slice.call(arguments, 0)
          args.unshift(storage)
          // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
          // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
          storageOwner.appendChild(storage)
          storage.addBehavior('#default#userData')
          storage.load(localStorageName)
          var result = storeFunction.apply(store, args)
          storageOwner.removeChild(storage)
          return result
        }
      }

      // In IE7, keys cannot start with a digit or contain certain chars.
      // See https://github.com/marcuswestin/store.js/issues/40
      // See https://github.com/marcuswestin/store.js/issues/83
      var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
      var ieKeyFix = function(key) {
        return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
      }
      store.set = withIEStorage(function(storage, key, val) {
        key = ieKeyFix(key)
        if (val === undefined) { return store.remove(key) }
        storage.setAttribute(key, store.serialize(val))
        storage.save(localStorageName)
        return val
      })
      store.get = withIEStorage(function(storage, key, defaultVal) {
        key = ieKeyFix(key)
        var val = store.deserialize(storage.getAttribute(key))
        return (val === undefined ? defaultVal : val)
      })
      store.remove = withIEStorage(function(storage, key) {
        key = ieKeyFix(key)
        storage.removeAttribute(key)
        storage.save(localStorageName)
      })
      store.clear = withIEStorage(function(storage) {
        var attributes = storage.XMLDocument.documentElement.attributes
        storage.load(localStorageName)
        for (var i=attributes.length-1; i>=0; i--) {
          storage.removeAttribute(attributes[i].name)
        }
        storage.save(localStorageName)
      })
      store.forEach = withIEStorage(function(storage, callback) {
        var attributes = storage.XMLDocument.documentElement.attributes
        for (var i=0, attr; attr=attributes[i]; ++i) {
          callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
        }
      })
    }

    try {
      var testKey = '__storejs__'
      store.set(testKey, testKey)
      if (store.get(testKey) != testKey) { store.disabled = true }
      store.remove(testKey)
    } catch(e) {
      store.disabled = true
    }
    store.enabled = !store.disabled

    return store
  }())

  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{"json3":1134}],1103:[function(require,module,exports){
  'use strict';

  /**
   * Pad a `number` with a ten's place zero.
   *
   * @param {number} number
   * @return {string}
   */
  function pad(number) {
    var n = number.toString();
    return n.length === 1 ? '0' + n : n;
  }

  /**
   * Turn a `date` into an ISO string.
   *
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
   *
   * @param {Date} date
   * @return {string}
   */
  function toISOString(date) {
    return date.getUTCFullYear()
      + '-' + pad(date.getUTCMonth() + 1)
      + '-' + pad(date.getUTCDate())
      + 'T' + pad(date.getUTCHours())
      + ':' + pad(date.getUTCMinutes())
      + ':' + pad(date.getUTCSeconds())
      + '.' + String((date.getUTCMilliseconds()/1000).toFixed(3)).slice(2, 5)
      + 'Z';
  }

  /*
   * Exports.
   */

  module.exports = toISOString;

  },{}],1104:[function(require,module,exports){
  arguments[4][882][0].apply(exports,arguments)
  },{"component-cookie":1111,"component-url":1121,"dup":882}],1105:[function(require,module,exports){
  'use strict';

  function isObject(o) {
    if ('object' === typeof o && !(o instanceof Array)) {
      return true;
    }

    return false;
  }

  exports = module.exports = trample;
  exports.flattenUntilArrayLeaf = flattenUntilArrayLeaf;

  function flattenUntilArrayLeaf(key, args, obj) {
    if (!obj) obj = {};

    var isLeaf = false;

    for (var i = 0; i < args.input.length; i++) {
      var prop = args.input[i];
      var arrayKey = (!key) ? i : (key + args.options.delimiter + i);

      if (isObject(prop)) {
        isLeaf = false;
        merge(obj, getRoot(arrayKey, prop, args.options));
      } else if (prop instanceof Array && args.options.flattenArray) {
        isLeaf = false;
        var arr = flattenUntilArrayLeaf(arrayKey, {
          input: prop,
          options: args.options
        }, obj);

      } else if (!args.options.flattenArray && prop instanceof Array) {
        isLeaf = false;
        var guard = false;

        for (var k = 0; k < prop.length; k++) {
          var kval = prop[k];

          if (isObject(kval) || kval instanceof Array) {
            guard = false;
            merge(obj, flattenUntilArrayLeaf(arrayKey, {
              input: prop,
              options: args.options
            }, obj));
            break;
          } else {
            guard = true;
          }
        }

        if (guard) {
          obj[arrayKey] = prop;
        }
      } else {
        isLeaf = true;
        obj[arrayKey] = prop;
      }
    }

    if (isLeaf && !args.options.flattenArray) {
      return args.input;
    }

    return obj;
  }

  /**
   * ```js
   * trample({}, { flattenArray: true });
   * ```
   */
  function trample(props, options) {
    if (!options) options = {};
    if (!options.delimiter) options.delimiter = '.';
    var obj = {};

    merge(obj, getRoot(null, props, options));

    return obj;
  }

  function merge(one, two) {
    for (var key in two) {
      var value = two[key];
      one[key] = value;
    }
  }

  function getRoot(localKey, props, options) {
    var obj = {};

    for (var key in props) {
      if (props.hasOwnProperty(key)) {
        var newKey = (localKey === null) ? key : localKey + options.delimiter + key;
        var value = props[key];

        if (isObject(value)) {
          merge(obj, getRoot(newKey, value, options));
        } else if (value instanceof Array) {
          var arr = flattenUntilArrayLeaf(newKey, {
            input: value,
            options: options
          });

          if (arr instanceof Array) {
            obj[newKey] = arr;
          } else {
            merge(obj, arr);
          }

        } else {
          obj[newKey] = value;
        }
      }
    }

    return obj;
  }

  },{}],1106:[function(require,module,exports){
  'use strict';

  /**
   * Module Dependencies
   */

  var map = require('@ndhoule/map');
  var foldl = require('@ndhoule/foldl');

  var eventMap = {
    // Videos
    videoPlaybackStarted: [{
      object: 'video playback',
      action: 'started'
    }],
    videoPlaybackPaused: [{
      object: 'video playback',
      action: 'paused'
    }],
    videoPlaybackInterrupted: [{
      object: 'video playback',
      action: 'interrupted'
    }],
    videoPlaybackResumed: [{
      object: 'video playback',
      action: 'resumed'
    }],
    videoPlaybackCompleted: [{
      object: 'video playback',
      action: 'completed'
    }],
    videoPlaybackExited: [{
      object: 'video playback',
      action: 'exited'
    }],
    videoPlaybackBufferStarted: [{
      object: 'video playback buffer',
      action: 'started'
    }],
    videoPlaybackBufferCompleted: [{
      object: 'video playback buffer',
      action: 'completed'
    }],
    videoPlaybackSeekStarted: [{
      object: 'video playback seek',
      action: 'started'
    }],
    videoPlaybackSeekCompleted: [{
      object: 'video playback seek',
      action: 'completed'
    }],
    videoContentStarted: [{
      object: 'video content',
      action: 'started'
    }],
    videoContentPlaying: [{
      object: 'video content',
      action: 'playing'
    }],
    videoContentCompleted: [{
      object: 'video content',
      action: 'completed'
    }],
    videoAdStarted: [{
      object: 'video ad',
      action: 'started'
    }],
    videoAdPlaying: [{
      object: 'video ad',
      action: 'playing'
    }],
    videoAdCompleted: [{
      object: 'video ad',
      action: 'completed'
    }],
    videoAdClicked: [{
      object: 'video ad',
      action: 'clicked'
    }],
    videoAdSkipped: [{
      object: 'video ad',
      action: 'skipped'
    }],

    // Promotions
    promotionViewed: [{
      object: 'promotion',
      action: 'viewed'
    }],
    promotionClicked: [{
      object: 'promotion',
      action: 'clicked'
    }],

    // Browsing
    productsSearched: [{
      object: 'products',
      action: 'searched'
    }],
    productListViewed: [{
      object: 'product list',
      action: 'viewed'
    }, {
      object: 'product category',
      action: 'viewed'
    }],
    productListFiltered: [{
      object: 'product list',
      action: 'filtered'
    }],

    // Core Ordering
    productClicked: [{
      object: 'product',
      action: 'clicked'
    }],
    productViewed: [{
      object: 'product',
      action: 'viewed'
    }],
    productAdded: [{
      object: 'product',
      action: 'added'
    }],
    productRemoved: [{
      object: 'product',
      action: 'removed'
    }],
    cartViewed: [{
      object: 'cart',
      action: 'viewed'
    }],
    orderUpdated: [{
      object: 'order',
      action: 'updated'
    }],
    orderCompleted: [{
      object: 'order',
      action: 'completed'
    }],
    orderRefunded: [{
      object: 'order',
      action: 'refunded'
    }],
    orderCancelled: [{
      object: 'order',
      action: 'cancelled'
    }],
    paymentInfoEntered: [{
      object: 'payment info',
      action: 'entered'
    }],
    checkoutStarted: [{
      object: 'checkout',
      action: 'started'
    }],
    checkoutStepViewed: [{
      object: 'checkout step',
      action: 'viewed'
    }],
    checkoutStepCompleted: [{
      object: 'checkout step',
      action: 'completed'
    }],

    // Coupons
    couponEntered: [{
      object: 'coupon',
      action: 'entered'
    }],
    couponApplied: [{
      object: 'coupon',
      action: 'applied'
    }],
    couponDenied: [{
      object: 'coupon',
      action: 'denied'
    }],
    couponRemoved: [{
      object: 'coupon',
      action: 'removed'
    }],

    // Wishlisting
    productAddedToWishlist: [{
      object: 'product',
      action: 'added to wishlist'
    }],
    productRemovedFromWishlist: [{
      object: 'product',
      action: 'removed from wishlist'
    }],
    productAddedFromWishlistToCart: [{
      object: 'product',
      action: 'added to cart from wishlist'
    }, {
      object: 'product',
      action: 'added from wishlist to cart'
    }],
    wishlistProductAddedToCart: [{
      object: 'wishlist product',
      action: 'added to cart'
    }],

    // Sharing
    productShared: [{
      object: 'product',
      action: 'shared'
    }],
    cartShared: [{
      object: 'cart',
      action: 'shared'
    }],

    // Reviewing
    productReviewed: [{
      object: 'product',
      action: 'reviewed'
    }],

    // App Lifecycle
    applicationInstalled: [{
      object: 'application',
      action: 'installed'
    }],
    applicationUpdated: [{
      object: 'application',
      action: 'updated'
    }],
    applicationOpened: [{
      object: 'application',
      action: 'opened'
    }],
    applicationBackgrounded: [{
      object: 'application',
      action: 'backgrounded'
    }],
    applicationUninstalled: [{
      object: 'application',
      action: 'uninstalled'
    }],
    applicationCrashed: [{
      object: 'application',
      action: 'crashed'
    }],

    // App Campaign and Referral Events
    installAttributed: [{
      object: 'install',
      action: 'attributed'
    }],
    deepLinkOpened: [{
      object: 'deep link',
      action: 'opened'
    }],
    deepLinkClicked: [{
      object: 'deep link',
      action: 'clicked'
    }],
    pushNotificationReceived: [{
      object: 'push notification',
      action: 'received'
    }],
    pushNotificationTapped: [{
      object: 'push notification',
      action: 'tapped'
    }],
    pushNotificationBounced: [{
      object: 'push notification',
      action: 'bounced'
    }],

    // Email
    emailBounced: [{
      object: 'email',
      action: 'bounced'
    }],
    emailDelivered: [{
      object: 'email',
      action: 'delivered'
    }],
    emailLinkClicked: [{
      object: 'email link',
      action: 'clicked'
    }],
    emailMarkedAsSpam: [{
      object: 'email',
      action: 'marked as spam'
    }],
    emailOpened: [{
      object: 'email',
      action: 'opened'
    }],
    unsubscribed: [{
      object: '',
      action: 'unsubscribed'
    }],

    // Live Chat
    liveChatConversationEnded: [{
      object: 'live chat conversation',
      action: 'ended'
    }],
    liveChatConversationStarted: [{
      object: 'live chat conversation',
      action: 'started'
    }],
    liveChatMessageReceived: [{
      object: 'live chat message',
      action: 'received'
    }],
    liveChatMessageSent: [{
      object: 'live chat message',
      action: 'sent'
    }]
  };

  /**
   * Export the event map
   *
   * For each method
   *   - For each of its object:action alias pairs
   *     - For each permutation of that pair
   *       - Create a regex string
   *   - Join them and assign it to its respective method value
   *
   *  [{
   *    object: 'product list',
   *    action: 'viewed'
   *  },{
   *    object: 'product category',
   *    action: 'viewed'
   *  }] => /
   *    ^[ _]?product[ _]?list[ _]?viewed[ _]?
   *   |^[ _]?viewed[ _]?product[ _]?list[ _]?
   *   |^[ _]?product[ _]?category[ _]?viewed[ _]?
   *   |^[ _]?viewed[ _]?product[ _]?category[ _]?
   *   $/i
   *
   *  todo(cs/wj/nh): memoization strategy / build step?
   */

  module.exports = foldl(function transform(ret, pairs, method) {
    var values = map(function(pair) {
      return map(function(permutation) {
        var flattened = [].concat.apply([], map(function(words) {
          return words.split(' ');
        }, permutation));
        return '^[ _]?' + flattened.join('[ _]?') + '[ _]?';
      }, [
        [pair.action, pair.object],
        [pair.object, pair.action]
      ]).join('|');
    }, pairs);
    var conjoined = values.join('|') + '$';
    ret[method] = new RegExp(conjoined, 'i');
    return ret;
  }, {}, eventMap);

  },{"@ndhoule/foldl":14,"@ndhoule/map":17}],1107:[function(require,module,exports){
  'use strict';

  var bind = require('component-bind');

  function bindAll(obj) {
    // eslint-disable-next-line guard-for-in
    for (var key in obj) {
      var val = obj[key];
      if (typeof val === 'function') {
        obj[key] = bind(obj, obj[key]);
      }
    }
    return obj;
  }

  module.exports = bindAll;

  },{"component-bind":1109}],1108:[function(require,module,exports){
  var charenc = {
    // UTF-8 encoding
    utf8: {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
      }
    },

    // Binary encoding
    bin: {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        for (var bytes = [], i = 0; i < str.length; i++)
          bytes.push(str.charCodeAt(i) & 0xFF);
        return bytes;
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        for (var str = [], i = 0; i < bytes.length; i++)
          str.push(String.fromCharCode(bytes[i]));
        return str.join('');
      }
    }
  };

  module.exports = charenc;

  },{}],1109:[function(require,module,exports){
  /**
   * Slice reference.
   */

  var slice = [].slice;

  /**
   * Bind `obj` to `fn`.
   *
   * @param {Object} obj
   * @param {Function|String} fn or string
   * @return {Function}
   * @api public
   */

  module.exports = function(obj, fn){
    if ('string' == typeof fn) fn = obj[fn];
    if ('function' != typeof fn) throw new Error('bind() requires a function');
    var args = slice.call(arguments, 2);
    return function(){
      return fn.apply(obj, args.concat(slice.call(arguments)));
    }
  };

  },{}],1110:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var type;
  try {
    type = require('component-type');
  } catch (_) {
    type = require('type');
  }

  /**
   * Module exports.
   */

  module.exports = clone;

  /**
   * Clones objects.
   *
   * @param {Mixed} any object
   * @api public
   */

  function clone(obj){
    switch (type(obj)) {
      case 'object':
        var copy = {};
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            copy[key] = clone(obj[key]);
          }
        }
        return copy;

      case 'array':
        var copy = new Array(obj.length);
        for (var i = 0, l = obj.length; i < l; i++) {
          copy[i] = clone(obj[i]);
        }
        return copy;

      case 'regexp':
        // from millermedeiros/amd-utils - MIT
        var flags = '';
        flags += obj.multiline ? 'm' : '';
        flags += obj.global ? 'g' : '';
        flags += obj.ignoreCase ? 'i' : '';
        return new RegExp(obj.source, flags);

      case 'date':
        return new Date(obj.getTime());

      default: // string, number, boolean, …
        return obj;
    }
  }

  },{"component-type":1120,"type":1120}],1111:[function(require,module,exports){
  arguments[4][884][0].apply(exports,arguments)
  },{"debug":1123,"dup":884}],1112:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  try {
    var type = require('type');
  } catch (err) {
    var type = require('component-type');
  }

  var toFunction = require('to-function');

  /**
   * HOP reference.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Iterate the given `obj` and invoke `fn(val, i)`
   * in optional context `ctx`.
   *
   * @param {String|Array|Object} obj
   * @param {Function} fn
   * @param {Object} [ctx]
   * @api public
   */

  module.exports = function(obj, fn, ctx){
    fn = toFunction(fn);
    ctx = ctx || this;
    switch (type(obj)) {
      case 'array':
        return array(obj, fn, ctx);
      case 'object':
        if ('number' == typeof obj.length) return array(obj, fn, ctx);
        return object(obj, fn, ctx);
      case 'string':
        return string(obj, fn, ctx);
    }
  };

  /**
   * Iterate string chars.
   *
   * @param {String} obj
   * @param {Function} fn
   * @param {Object} ctx
   * @api private
   */

  function string(obj, fn, ctx) {
    for (var i = 0; i < obj.length; ++i) {
      fn.call(ctx, obj.charAt(i), i);
    }
  }

  /**
   * Iterate object keys.
   *
   * @param {Object} obj
   * @param {Function} fn
   * @param {Object} ctx
   * @api private
   */

  function object(obj, fn, ctx) {
    for (var key in obj) {
      if (has.call(obj, key)) {
        fn.call(ctx, key, obj[key]);
      }
    }
  }

  /**
   * Iterate array-ish.
   *
   * @param {Array|Object} obj
   * @param {Function} fn
   * @param {Object} ctx
   * @api private
   */

  function array(obj, fn, ctx) {
    for (var i = 0; i < obj.length; ++i) {
      fn.call(ctx, obj[i], i);
    }
  }

  },{"component-type":1113,"to-function":1170,"type":1113}],1113:[function(require,module,exports){

  /**
   * toString ref.
   */

  var toString = Object.prototype.toString;

  /**
   * Return the type of `val`.
   *
   * @param {Mixed} val
   * @return {String}
   * @api public
   */

  module.exports = function(val){
    switch (toString.call(val)) {
      case '[object Function]': return 'function';
      case '[object Date]': return 'date';
      case '[object RegExp]': return 'regexp';
      case '[object Arguments]': return 'arguments';
      case '[object Array]': return 'array';
      case '[object String]': return 'string';
    }

    if (val === null) return 'null';
    if (val === undefined) return 'undefined';
    if (val && val.nodeType === 1) return 'element';
    if (val === Object(val)) return 'object';

    return typeof val;
  };

  },{}],1114:[function(require,module,exports){

  /**
   * Expose `Emitter`.
   */

  if (typeof module !== 'undefined') {
    module.exports = Emitter;
  }

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  };

  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
  Emitter.prototype.addEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
      .push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
  Emitter.prototype.removeListener =
  Emitter.prototype.removeAllListeners =
  Emitter.prototype.removeEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    // Remove event specific arrays for event types that no
    // one is subscribed for to avoid memory leak.
    if (callbacks.length === 0) {
      delete this._callbacks['$' + event];
    }

    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};

    var args = new Array(arguments.length - 1)
      , callbacks = this._callbacks['$' + event];

    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };

  },{}],1115:[function(require,module,exports){
  var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
      unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
      prefix = bind !== 'addEventListener' ? 'on' : '';

  /**
   * Bind `el` event `type` to `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  exports.bind = function(el, type, fn, capture){
    el[bind](prefix + type, fn, capture || false);
    return fn;
  };

  /**
   * Unbind `el` event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  exports.unbind = function(el, type, fn, capture){
    el[unbind](prefix + type, fn, capture || false);
    return fn;
  };
  },{}],1116:[function(require,module,exports){
  module.exports = function(arr, obj){
    if (arr.indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };
  },{}],1117:[function(require,module,exports){
  /**
   * Global Names
   */

  var globals = /\b(Array|Date|Object|Math|JSON)\b/g;

  /**
   * Return immediate identifiers parsed from `str`.
   *
   * @param {String} str
   * @param {String|Function} map function or prefix
   * @return {Array}
   * @api public
   */

  module.exports = function(str, fn){
    var p = unique(props(str));
    if (fn && 'string' == typeof fn) fn = prefixed(fn);
    if (fn) return map(str, p, fn);
    return p;
  };

  /**
   * Return immediate identifiers in `str`.
   *
   * @param {String} str
   * @return {Array}
   * @api private
   */

  function props(str) {
    return str
      .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
      .replace(globals, '')
      .match(/[a-zA-Z_]\w*/g)
      || [];
  }

  /**
   * Return `str` with `props` mapped with `fn`.
   *
   * @param {String} str
   * @param {Array} props
   * @param {Function} fn
   * @return {String}
   * @api private
   */

  function map(str, props, fn) {
    var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
    return str.replace(re, function(_){
      if ('(' == _[_.length - 1]) return fn(_);
      if (!~props.indexOf(_)) return _;
      return fn(_);
    });
  }

  /**
   * Return unique array.
   *
   * @param {Array} arr
   * @return {Array}
   * @api private
   */

  function unique(arr) {
    var ret = [];

    for (var i = 0; i < arr.length; i++) {
      if (~ret.indexOf(arr[i])) continue;
      ret.push(arr[i]);
    }

    return ret;
  }

  /**
   * Map with prefix `str`.
   */

  function prefixed(str) {
    return function(_){
      return str + _;
    };
  }

  },{}],1118:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var trim = require('trim');
  var type = require('type');

  var pattern = /(\w+)\[(\d+)\]/;

  /**
   * Safely encode the given string
   *
   * @param {String} str
   * @return {String}
   * @api private
   */

  var encode = function(str) {
    try {
      return encodeURIComponent(str);
    } catch (e) {
      return str;
    }
  };

  /**
   * Safely decode the string
   *
   * @param {String} str
   * @return {String}
   * @api private
   */

  var decode = function(str) {
    try {
      return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
      return str;
    }
  }

  /**
   * Parse the given query `str`.
   *
   * @param {String} str
   * @return {Object}
   * @api public
   */

  exports.parse = function(str){
    if ('string' != typeof str) return {};

    str = trim(str);
    if ('' == str) return {};
    if ('?' == str.charAt(0)) str = str.slice(1);

    var obj = {};
    var pairs = str.split('&');
    for (var i = 0; i < pairs.length; i++) {
      var parts = pairs[i].split('=');
      var key = decode(parts[0]);
      var m;

      if (m = pattern.exec(key)) {
        obj[m[1]] = obj[m[1]] || [];
        obj[m[1]][m[2]] = decode(parts[1]);
        continue;
      }

      obj[parts[0]] = null == parts[1]
        ? ''
        : decode(parts[1]);
    }

    return obj;
  };

  /**
   * Stringify the given `obj`.
   *
   * @param {Object} obj
   * @return {String}
   * @api public
   */

  exports.stringify = function(obj){
    if (!obj) return '';
    var pairs = [];

    for (var key in obj) {
      var value = obj[key];

      if ('array' == type(value)) {
        for (var i = 0; i < value.length; ++i) {
          pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i]));
        }
        continue;
      }

      pairs.push(encode(key) + '=' + encode(obj[key]));
    }

    return pairs.join('&');
  };

  },{"trim":1176,"type":1119}],1119:[function(require,module,exports){
  arguments[4][734][0].apply(exports,arguments)
  },{"dup":734}],1120:[function(require,module,exports){
  /**
   * toString ref.
   */

  var toString = Object.prototype.toString;

  /**
   * Return the type of `val`.
   *
   * @param {Mixed} val
   * @return {String}
   * @api public
   */

  module.exports = function(val){
    switch (toString.call(val)) {
      case '[object Date]': return 'date';
      case '[object RegExp]': return 'regexp';
      case '[object Arguments]': return 'arguments';
      case '[object Array]': return 'array';
      case '[object Error]': return 'error';
    }

    if (val === null) return 'null';
    if (val === undefined) return 'undefined';
    if (val !== val) return 'nan';
    if (val && val.nodeType === 1) return 'element';

    if (isBuffer(val)) return 'buffer';

    val = val.valueOf
      ? val.valueOf()
      : Object.prototype.valueOf.apply(val);

    return typeof val;
  };

  // code borrowed from https://github.com/feross/is-buffer/blob/master/index.js
  function isBuffer(obj) {
    return !!(obj != null &&
      (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
        (obj.constructor &&
        typeof obj.constructor.isBuffer === 'function' &&
        obj.constructor.isBuffer(obj))
      ))
  }

  },{}],1121:[function(require,module,exports){

  /**
   * Parse the given `url`.
   *
   * @param {String} str
   * @return {Object}
   * @api public
   */

  exports.parse = function(url){
    var a = document.createElement('a');
    a.href = url;
    return {
      href: a.href,
      host: a.host || location.host,
      port: ('0' === a.port || '' === a.port) ? port(a.protocol) : a.port,
      hash: a.hash,
      hostname: a.hostname || location.hostname,
      pathname: a.pathname.charAt(0) != '/' ? '/' + a.pathname : a.pathname,
      protocol: !a.protocol || ':' == a.protocol ? location.protocol : a.protocol,
      search: a.search,
      query: a.search.slice(1)
    };
  };

  /**
   * Check if `url` is absolute.
   *
   * @param {String} url
   * @return {Boolean}
   * @api public
   */

  exports.isAbsolute = function(url){
    return 0 == url.indexOf('//') || !!~url.indexOf('://');
  };

  /**
   * Check if `url` is relative.
   *
   * @param {String} url
   * @return {Boolean}
   * @api public
   */

  exports.isRelative = function(url){
    return !exports.isAbsolute(url);
  };

  /**
   * Check if `url` is cross domain.
   *
   * @param {String} url
   * @return {Boolean}
   * @api public
   */

  exports.isCrossDomain = function(url){
    url = exports.parse(url);
    var location = exports.parse(window.location.href);
    return url.hostname !== location.hostname
      || url.port !== location.port
      || url.protocol !== location.protocol;
  };

  /**
   * Return default port for `protocol`.
   *
   * @param  {String} protocol
   * @return {String}
   * @api private
   */
  function port (protocol){
    switch (protocol) {
      case 'http:':
        return 80;
      case 'https:':
        return 443;
      default:
        return location.port;
    }
  }

  },{}],1122:[function(require,module,exports){
  (function() {
    var base64map
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

    crypt = {
      // Bit-wise rotation left
      rotl: function(n, b) {
        return (n << b) | (n >>> (32 - b));
      },

      // Bit-wise rotation right
      rotr: function(n, b) {
        return (n << (32 - b)) | (n >>> b);
      },

      // Swap big-endian to little-endian and vice versa
      endian: function(n) {
        // If number given, swap endian
        if (n.constructor == Number) {
          return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
        }

        // Else, assume array and swap all items
        for (var i = 0; i < n.length; i++)
          n[i] = crypt.endian(n[i]);
        return n;
      },

      // Generate an array of any length of random bytes
      randomBytes: function(n) {
        for (var bytes = []; n > 0; n--)
          bytes.push(Math.floor(Math.random() * 256));
        return bytes;
      },

      // Convert a byte array to big-endian 32-bit words
      bytesToWords: function(bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
          words[b >>> 5] |= bytes[i] << (24 - b % 32);
        return words;
      },

      // Convert big-endian 32-bit words to a byte array
      wordsToBytes: function(words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8)
          bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
        return bytes;
      },

      // Convert a byte array to a hex string
      bytesToHex: function(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
        }
        return hex.join('');
      },

      // Convert a hex string to a byte array
      hexToBytes: function(hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      },

      // Convert a byte array to a base-64 string
      bytesToBase64: function(bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
          var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
          for (var j = 0; j < 4; j++)
            if (i * 8 + j * 6 <= bytes.length * 8)
              base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
            else
              base64.push('=');
        }
        return base64.join('');
      },

      // Convert a base-64 string to a byte array
      base64ToBytes: function(base64) {
        // Remove non-base-64 characters
        base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

        for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
            imod4 = ++i % 4) {
          if (imod4 == 0) continue;
          bytes.push(((base64map.indexOf(base64.charAt(i - 1))
              & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
              | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
        }
        return bytes;
      }
    };

    module.exports = crypt;
  })();

  },{}],1123:[function(require,module,exports){
  arguments[4][43][0].apply(exports,arguments)
  },{"./debug":1124,"_process":1149,"dup":43}],1124:[function(require,module,exports){
  arguments[4][44][0].apply(exports,arguments)
  },{"dup":44,"ms":1138}],1125:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var nextTick = require('next-tick');

  /**
   * Loop on a short interval until `condition()` is true, then call `fn`.
   *
   * @param {Function} condition
   * @param {Function} fn
   * @param {number} [interval=10]
   */

  function when(condition, fn, interval) {
    if (typeof condition !== 'function') throw new Error('condition must be a function');
    if (typeof fn !== 'function') throw new Error('fn must be a function');

    if (condition()) return nextTick(fn);

    var ref = setInterval(function () {
      if (!condition()) return;
      nextTick(fn);
      clearInterval(ref);
    }, interval || 10);
  }

  /**
   * Exports.
   */

  module.exports = when;

  },{"next-tick":1142}],1126:[function(require,module,exports){
  arguments[4][54][0].apply(exports,arguments)
  },{"dup":54}],1127:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var debug = require('debug');

  /**
   * Expose `generate`.
   */

  module.exports = generate;

  /**
   * Generate a global queue pushing method with `name`.
   *
   * @param {String} name
   * @param {Object} options
   *   @property {Boolean} wrap
   * @return {Function}
   */

  function generate (name, options) {
    var log = debug('global-queue:' + name);
    options = options || {};

    return function (args) {
      args = [].slice.call(arguments);
      window[name] || (window[name] = []);
      log('%o', args);
      options.wrap === false
        ? window[name].push.apply(window[name], args)
        : window[name].push(args);
    };
  }

  },{"debug":1123}],1128:[function(require,module,exports){

  /**
   * Module exports.
   *
   * Logic borrowed from Modernizr:
   *
   *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
   */

  try {
    module.exports = typeof XMLHttpRequest !== 'undefined' &&
      'withCredentials' in new XMLHttpRequest();
  } catch (err) {
    // if XMLHttp support is disabled in IE then it will throw
    // when trying to create
    module.exports = false;
  }

  },{}],1129:[function(require,module,exports){
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        })
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function () {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
  }

  },{}],1130:[function(require,module,exports){
  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */

  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  module.exports = function (obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
  }

  function isBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
  }

  },{}],1131:[function(require,module,exports){
  arguments[4][742][0].apply(exports,arguments)
  },{"dup":742}],1132:[function(require,module,exports){

  module.exports = isDate;


  /**
   * Matching format per: http://www.w3.org/TR/NOTE-datetime
   */

  var isoformat = '^\\d{4}-\\d{2}-\\d{2}' +        // Match YYYY-MM-DD
                  '((T\\d{2}:\\d{2}(:\\d{2})?)' +  // Match THH:mm:ss
                  '(\\.\\d{1,6})?' +               // Match .sssss
                  '(Z|(\\+|-)\\d{2}:\\d{2})?)?$';  // Time zone (Z or +hh:mm)


  var matcher = new RegExp(isoformat);


  function isDate (val) {
    return typeof val === 'string' &&
           matcher.test(val) &&
           !isNaN(Date.parse(val));
  }
  },{}],1133:[function(require,module,exports){
  (function (process,global){(function (){
  /**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.3.2
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2016
   * @license MIT
   */
  (function (root) {
    'use strict';

    var NODE_JS = typeof process == 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = global;
    }
    var COMMON_JS = !root.JS_SHA256_TEST && typeof module == 'object' && module.exports;
    var HEX_CHARS = '0123456789abcdef'.split('');
    var EXTRA = [-2147483648, 8388608, 32768, 128];
    var SHIFT = [24, 16, 8, 0];
    var K =[0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

    var blocks = [];

    var sha224 = function (message) {
      return sha256(message, true);
    };

    var sha256 = function (message, is224) {
      var notString = typeof message != 'string';
      if (notString && message.constructor == root.ArrayBuffer) {
        message = new Uint8Array(message);
      }

      var h0, h1, h2, h3, h4, h5, h6, h7, block, code, first = true, end = false,
          i, j, index = 0, start = 0, bytes = 0, length = message.length,
          s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

      if (is224) {
        h0 = 0xc1059ed8;
        h1 = 0x367cd507;
        h2 = 0x3070dd17;
        h3 = 0xf70e5939;
        h4 = 0xffc00b31;
        h5 = 0x68581511;
        h6 = 0x64f98fa7;
        h7 = 0xbefa4fa4;
      } else { // 256
        h0 = 0x6a09e667;
        h1 = 0xbb67ae85;
        h2 = 0x3c6ef372;
        h3 = 0xa54ff53a;
        h4 = 0x510e527f;
        h5 = 0x9b05688c;
        h6 = 0x1f83d9ab;
        h7 = 0x5be0cd19;
      }
      block = 0;
      do {
        blocks[0] = block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        if (notString) {
          for (i = start;index < length && i < 64;++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = start;index < length && i < 64;++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        bytes += i - start;
        start = i - 64;
        if (index == length) {
          blocks[i >> 2] |= EXTRA[i & 3];
          ++index;
        }
        block = blocks[16];
        if (index > length && i < 56) {
          blocks[15] = bytes << 3;
          end = true;
        }

        var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7;
        for (j = 16;j < 64;++j) {
          // rightrotate
          t1 = blocks[j - 15];
          s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
          t1 = blocks[j - 2];
          s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
          blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
        }

        bc = b & c;
        for (j = 0;j < 64;j += 4) {
          if (first) {
            if (is224) {
              ab = 300032;
              t1 = blocks[0] - 1413257819;
              h = t1 - 150054599 << 0;
              d = t1 + 24177077 << 0;
            } else {
              ab = 704751109;
              t1 = blocks[0] - 210244248;
              h = t1 - 1521486534 << 0;
              d = t1 + 143694565 << 0;
            }
            first = false;
          } else {
            s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
            s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
            ab = a & b;
            maj = ab ^ (a & c) ^ bc;
            ch = (e & f) ^ (~e & g);
            t1 = h + s1 + ch + K[j] + blocks[j];
            t2 = s0 + maj;
            h = d + t1 << 0;
            d = t1 + t2 << 0;
          }
          s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
          s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
          da = d & a;
          maj = da ^ (d & b) ^ ab;
          ch = (h & e) ^ (~h & f);
          t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
          t2 = s0 + maj;
          g = c + t1 << 0;
          c = t1 + t2 << 0;
          s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
          s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
          cd = c & d;
          maj = cd ^ (c & a) ^ da;
          ch = (g & h) ^ (~g & e);
          t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
          t2 = s0 + maj;
          f = b + t1 << 0;
          b = t1 + t2 << 0;
          s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
          s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
          bc = b & c;
          maj = bc ^ (b & d) ^ cd;
          ch = (f & g) ^ (~f & h);
          t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
          t2 = s0 + maj;
          e = a + t1 << 0;
          a = t1 + t2 << 0;
        }

        h0 = h0 + a << 0;
        h1 = h1 + b << 0;
        h2 = h2 + c << 0;
        h3 = h3 + d << 0;
        h4 = h4 + e << 0;
        h5 = h5 + f << 0;
        h6 = h6 + g << 0;
        h7 = h7 + h << 0;
      } while (!end);

      var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
                HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
                HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
                HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
                HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
                HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
                HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
                HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
                HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
                HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
                HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
                HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
                HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
                HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
                HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
                HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
                HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
                HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
                HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
                HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
                HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
                HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
                HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
                HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
                HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
                HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
                HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
                HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
      if (!is224) {
        hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
               HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
               HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
               HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
      }
      return hex;
    };

    if (COMMON_JS) {
      sha256.sha256 = sha256;
      sha256.sha224 = sha224;
      module.exports = sha256;
    } else if (root) {
      root.sha256 = sha256;
      root.sha224 = sha224;
    }
  }(this));

  }).call(this)}).call(this,require('_process'),typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{"_process":1149}],1134:[function(require,module,exports){
  (function (global){(function (){
  /*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */
  ;(function () {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader = typeof define === "function" && define.amd;

    // A set of types used to distinguish objects from primitives.
    var objectTypes = {
      "function": true,
      "object": true
    };

    // Detect the `exports` object exposed by CommonJS implementations.
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

    // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context,
    // and the `window` object in browsers. Rhino exports a `global` function
    // instead.
    var root = objectTypes[typeof window] && window || this,
        freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
      root = freeGlobal;
    }

    // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.
    function runInContext(context, exports) {
      context || (context = root.Object());
      exports || (exports = root.Object());

      // Native constructor aliases.
      var Number = context.Number || root.Number,
          String = context.String || root.String,
          Object = context.Object || root.Object,
          Date = context.Date || root.Date,
          SyntaxError = context.SyntaxError || root.SyntaxError,
          TypeError = context.TypeError || root.TypeError,
          Math = context.Math || root.Math,
          nativeJSON = context.JSON || root.JSON;

      // Delegate to the native `stringify` and `parse` implementations.
      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      }

      // Convenience aliases.
      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          isProperty = objectProto.hasOwnProperty,
          undefined;

      // Internal: Contains `try...catch` logic used by other functions.
      // This prevents other functions from being deoptimized.
      function attempt(func, errorFunc) {
        try {
          func();
        } catch (exception) {
          if (errorFunc) {
            errorFunc();
          }
        }
      }

      // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
      var isExtended = new Date(-3509827334573292);
      attempt(function () {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
          isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      });

      // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.
      function has(name) {
        if (has[name] != null) {
          // Return cached feature test result.
          return has[name];
        }
        var isSupported;
        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("date-serialization") && has("json-parse");
        } else if (name == "date-serialization") {
          // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.
          isSupported = has("json-stringify") && isExtended;
          if (isSupported) {
            var stringify = exports.stringify;
            attempt(function () {
              isSupported =
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            });
          }
        } else {
          var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
          // Test `JSON.stringify`.
          if (name == "json-stringify") {
            var stringify = exports.stringify, stringifySupported = typeof stringify == "function";
            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function () {
                return 1;
              }).toJSON = value;
              attempt(function () {
                stringifySupported =
                  // Firefox 3.1b1 and b2 serialize string, number, and boolean
                  // primitives as object literals.
                  stringify(0) === "0" &&
                  // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                  // literals.
                  stringify(new Number()) === "0" &&
                  stringify(new String()) == '""' &&
                  // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                  // does not define a canonical JSON representation (this applies to
                  // objects with `toJSON` properties as well, *unless* they are nested
                  // within an object or array).
                  stringify(getClass) === undefined &&
                  // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                  // FF 3.1b3 pass this test.
                  stringify(undefined) === undefined &&
                  // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                  // respectively, if the value is omitted entirely.
                  stringify() === undefined &&
                  // FF 3.1b1, 2 throw an error if the given value is not a number,
                  // string, array, object, Boolean, or `null` literal. This applies to
                  // objects with custom `toJSON` methods as well, unless they are nested
                  // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                  // methods entirely.
                  stringify(value) === "1" &&
                  stringify([value]) == "[1]" &&
                  // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                  // `"[null]"`.
                  stringify([undefined]) == "[null]" &&
                  // YUI 3.0.0b1 fails to serialize `null` literals.
                  stringify(null) == "null" &&
                  // FF 3.1b1, 2 halts serialization if an array contains a function:
                  // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                  // elides non-JSON values from objects and arrays, unless they
                  // define custom `toJSON` methods.
                  stringify([undefined, getClass, null]) == "[null,null,null]" &&
                  // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                  // where character escape codes are expected (e.g., `\b` => `\u0008`).
                  stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                  // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                  stringify(null, value) === "1" &&
                  stringify([1, 2], null, 1) == "[\n 1,\n 2\n]";
              }, function () {
                stringifySupported = false;
              });
            }
            isSupported = stringifySupported;
          }
          // Test `JSON.parse`.
          if (name == "json-parse") {
            var parse = exports.parse, parseSupported;
            if (typeof parse == "function") {
              attempt(function () {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                  if (parseSupported) {
                    attempt(function () {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    });
                    if (parseSupported) {
                      attempt(function () {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      });
                    }
                    if (parseSupported) {
                      attempt(function () {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      });
                    }
                  }
                }
              }, function () {
                parseSupported = false;
              });
            }
            isSupported = parseSupported;
          }
        }
        return has[name] = !!isSupported;
      }
      has["bug-string-char-index"] = has["date-serialization"] = has["json"] = has["json-stringify"] = has["json-parse"] = null;

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]";

        // Detect incomplete support for accessing string characters by index.
        var charIndexBuggy = has("bug-string-char-index");

        // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.
        var forOwn = function (object, callback) {
          var size = 0, Properties, dontEnums, property;

          // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
          (Properties = function () {
            this.valueOf = 0;
          }).prototype.valueOf = 0;

          // Iterate over a new instance of the `Properties` class.
          dontEnums = new Properties();
          for (property in dontEnums) {
            // Ignore all properties inherited from `Object.prototype`.
            if (isProperty.call(dontEnums, property)) {
              size++;
            }
          }
          Properties = dontEnums = null;

          // Normalize the iteration algorithm.
          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            dontEnums = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
            // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.
            forOwn = function (object, callback) {
              var isFunction = getClass.call(object) == functionClass, property, length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              }
              // Manually invoke the callback for each non-enumerable property.
              for (length = dontEnums.length; property = dontEnums[--length];) {
                if (hasProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            forOwn = function (object, callback) {
              var isFunction = getClass.call(object) == functionClass, property, isConstructor;
              for (property in object) {
                if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              }
              // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.
              if (isConstructor || isProperty.call(object, (property = "constructor"))) {
                callback(property);
              }
            };
          }
          return forOwn(object, callback);
        };

        // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.
        if (!has("json-stringify") && !has("date-serialization")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          };

          // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.
          var leadingZeroes = "000000";
          var toPaddedString = function (width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          };

          // Internal: Serializes a date object.
          var serializeDate = function (value) {
            var getData, year, month, date, time, hours, minutes, seconds, milliseconds;
            // Define additional utility methods if the `Date` methods are buggy.
            if (!isExtended) {
              var floor = Math.floor;
              // A mapping between the months of the year and the number of days between
              // January 1st and the first of the respective month.
              var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
              // Internal: Calculates the number of days between the Unix epoch and the
              // first day of the given month.
              var getDay = function (year, month) {
                return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
              };
              getData = function (value) {
                // Manually compute the year, month, date, hours, minutes,
                // seconds, and milliseconds if the `getUTC*` methods are
                // buggy. Adapted from @Yaffle's `date-shim` project.
                date = floor(value / 864e5);
                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                date = 1 + date - getDay(year, month);
                // The `time` value specifies the time within the day (see ES
                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                // to compute `A modulo B`, as the `%` operator does not
                // correspond to the `modulo` operation for negative numbers.
                time = (value % 864e5 + 864e5) % 864e5;
                // The hours, minutes, seconds, and milliseconds are obtained by
                // decomposing the time within the day. See section 15.9.1.10.
                hours = floor(time / 36e5) % 24;
                minutes = floor(time / 6e4) % 60;
                seconds = floor(time / 1e3) % 60;
                milliseconds = time % 1e3;
              };
            } else {
              getData = function (value) {
                year = value.getUTCFullYear();
                month = value.getUTCMonth();
                date = value.getUTCDate();
                hours = value.getUTCHours();
                minutes = value.getUTCMinutes();
                seconds = value.getUTCSeconds();
                milliseconds = value.getUTCMilliseconds();
              };
            }
            serializeDate = function (value) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                getData(value);
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                // Months, dates, hours, minutes, and seconds should have two
                // digits; milliseconds should have three.
                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                // Milliseconds are optional in ES 5.0, but required in 5.1.
                "." + toPaddedString(3, milliseconds) + "Z";
                year = month = date = hours = minutes = seconds = milliseconds = null;
              } else {
                value = null;
              }
              return value;
            };
            return serializeDate(value);
          };

          // For environments with `JSON.stringify` but buggy date serialization,
          // we override the native `Date#toJSON` implementation with a
          // spec-compliant one.
          if (has("json-stringify") && !has("date-serialization")) {
            // Internal: the `Date#toJSON` implementation used to override the native one.
            function dateToJSON (key) {
              return serializeDate(this);
            }

            // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
            var nativeStringify = exports.stringify;
            exports.stringify = function (source, filter, width) {
              var nativeToJSON = Date.prototype.toJSON;
              Date.prototype.toJSON = dateToJSON;
              var result = nativeStringify(source, filter, width);
              Date.prototype.toJSON = nativeToJSON;
              return result;
            }
          } else {
            // Internal: Double-quotes a string `value`, replacing all ASCII control
            // characters (characters with code unit values between 0 and 31) with
            // their escaped equivalents. This is an implementation of the
            // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
            var unicodePrefix = "\\u00";
            var escapeChar = function (character) {
              var charCode = character.charCodeAt(0), escaped = Escapes[charCode];
              if (escaped) {
                return escaped;
              }
              return unicodePrefix + toPaddedString(2, charCode.toString(16));
            };
            var reEscape = /[\x00-\x1f\x22\x5c]/g;
            var quote = function (value) {
              reEscape.lastIndex = 0;
              return '"' +
                (
                  reEscape.test(value)
                    ? value.replace(reEscape, escapeChar)
                    : value
                ) +
                '"';
            };

            // Internal: Recursively serializes an object. Implements the
            // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
            var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
              var value, type, className, results, element, index, length, prefix, result;
              attempt(function () {
                // Necessary for host object support.
                value = object[property];
              });
              if (typeof value == "object" && value) {
                if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {
                  value = serializeDate(value);
                } else if (typeof value.toJSON == "function") {
                  value = value.toJSON(property);
                }
              }
              if (callback) {
                // If a replacement function was provided, call it to obtain the value
                // for serialization.
                value = callback.call(object, property, value);
              }
              // Exit early if value is `undefined` or `null`.
              if (value == undefined) {
                return value === undefined ? value : "null";
              }
              type = typeof value;
              // Only call `getClass` if the value is an object.
              if (type == "object") {
                className = getClass.call(value);
              }
              switch (className || type) {
                case "boolean":
                case booleanClass:
                  // Booleans are represented literally.
                  return "" + value;
                case "number":
                case numberClass:
                  // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
                  // `"null"`.
                  return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                case "string":
                case stringClass:
                  // Strings are double-quoted and escaped.
                  return quote("" + value);
              }
              // Recursively serialize objects and arrays.
              if (typeof value == "object") {
                // Check for cyclic structures. This is a linear search; performance
                // is inversely proportional to the number of unique nested objects.
                for (length = stack.length; length--;) {
                  if (stack[length] === value) {
                    // Cyclic structures cannot be serialized by `JSON.stringify`.
                    throw TypeError();
                  }
                }
                // Add the object to the stack of traversed objects.
                stack.push(value);
                results = [];
                // Save the current indentation level and indent one additional level.
                prefix = indentation;
                indentation += whitespace;
                if (className == arrayClass) {
                  // Recursively serialize array elements.
                  for (index = 0, length = value.length; index < length; index++) {
                    element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                    results.push(element === undefined ? "null" : element);
                  }
                  result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
                } else {
                  // Recursively serialize object members. Members are selected from
                  // either a user-specified list of property names, or the object
                  // itself.
                  forOwn(properties || value, function (property) {
                    var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                    if (element !== undefined) {
                      // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                      // is not the empty string, let `member` {quote(property) + ":"}
                      // be the concatenation of `member` and the `space` character."
                      // The "`space` character" refers to the literal space
                      // character, not the `space` {width} argument provided to
                      // `JSON.stringify`.
                      results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                    }
                  });
                  result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
                }
                // Remove the object from the traversed object stack.
                stack.pop();
                return result;
              }
            };

            // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
            exports.stringify = function (source, filter, width) {
              var whitespace, callback, properties, className;
              if (objectTypes[typeof filter] && filter) {
                className = getClass.call(filter);
                if (className == functionClass) {
                  callback = filter;
                } else if (className == arrayClass) {
                  // Convert the property names array into a makeshift set.
                  properties = {};
                  for (var index = 0, length = filter.length, value; index < length;) {
                    value = filter[index++];
                    className = getClass.call(value);
                    if (className == "[object String]" || className == "[object Number]") {
                      properties[value] = 1;
                    }
                  }
                }
              }
              if (width) {
                className = getClass.call(width);
                if (className == numberClass) {
                  // Convert the `width` to an integer and create a string containing
                  // `width` number of space characters.
                  if ((width -= width % 1) > 0) {
                    if (width > 10) {
                      width = 10;
                    }
                    for (whitespace = ""; whitespace.length < width;) {
                      whitespace += " ";
                    }
                  }
                } else if (className == stringClass) {
                  whitespace = width.length <= 10 ? width : width.slice(0, 10);
                }
              }
              // Opera <= 7.54u2 discards the values associated with empty string keys
              // (`""`) only if they are used directly within an object member list
              // (e.g., `!("" in { "": 1})`).
              return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
            };
          }
        }

        // Public: Parses a JSON source string.
        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode;

          // Internal: A map of escaped control characters and their unescaped
          // equivalents.
          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          };

          // Internal: Stores the parser state.
          var Index, Source;

          // Internal: Resets the parser state and throws a `SyntaxError`.
          var abort = function () {
            Index = Source = null;
            throw SyntaxError();
          };

          // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.
          var lex = function () {
            var source = Source, length = source.length, value, begin, position, isSigned, charCode;
            while (Index < length) {
              charCode = source.charCodeAt(Index);
              switch (charCode) {
                case 9: case 10: case 13: case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;
                case 123: case 125: case 91: case 93: case 58: case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;
                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);
                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);
                      switch (charCode) {
                        case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;
                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;
                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index);
                            // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.
                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          }
                          // Revive the escaped character.
                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;
                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }
                      charCode = source.charCodeAt(Index);
                      begin = Index;
                      // Optimize for the common case where a string is valid.
                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      }
                      // Append the string as-is.
                      value += source.slice(begin, Index);
                    }
                  }
                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  }
                  // Unterminated string.
                  abort();
                default:
                  // Parse numbers and literals.
                  begin = Index;
                  // Advance past the negative sign, if one is specified.
                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  }
                  // Parse an integer or floating-point value.
                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }
                    isSigned = false;
                    // Parse the integer component.
                    for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                    // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.
                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index;
                      // Parse the decimal component.
                      for (; position < length; position++) {
                        charCode = source.charCodeAt(position);
                        if (charCode < 48 || charCode > 57) {
                          break;
                        }
                      }
                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }
                      Index = position;
                    }
                    // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.
                    charCode = source.charCodeAt(Index);
                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index);
                      // Skip past the sign following the exponent, if one is
                      // specified.
                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      }
                      // Parse the exponential component.
                      for (position = Index; position < length; position++) {
                        charCode = source.charCodeAt(position);
                        if (charCode < 48 || charCode > 57) {
                          break;
                        }
                      }
                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }
                      Index = position;
                    }
                    // Coerce the parsed value to a JavaScript number.
                    return +source.slice(begin, Index);
                  }
                  // A negative sign may only precede numbers.
                  if (isSigned) {
                    abort();
                  }
                  // `true`, `false`, and `null` literals.
                  var temp = source.slice(Index, Index + 4);
                  if (temp == "true") {
                    Index += 4;
                    return true;
                  } else if (temp == "fals" && source.charCodeAt(Index + 4 ) == 101) {
                    Index += 5;
                    return false;
                  } else if (temp == "null") {
                    Index += 4;
                    return null;
                  }
                  // Unrecognized token.
                  abort();
              }
            }
            // Return the sentinel `$` character if the parser has reached the end
            // of the source string.
            return "$";
          };

          // Internal: Parses a JSON `value` token.
          var get = function (value) {
            var results, hasMembers;
            if (value == "$") {
              // Unexpected end of input.
              abort();
            }
            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              }
              // Parse object and array literals.
              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];
                for (;;) {
                  value = lex();
                  // A closing square bracket marks the end of the array literal.
                  if (value == "]") {
                    break;
                  }
                  // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.
                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();
                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } else {
                    hasMembers = true;
                  }
                  // Elisions and leading commas are not permitted.
                  if (value == ",") {
                    abort();
                  }
                  results.push(get(value));
                }
                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};
                for (;;) {
                  value = lex();
                  // A closing curly brace marks the end of the object literal.
                  if (value == "}") {
                    break;
                  }
                  // If the object literal contains members, the current token
                  // should be a comma separator.
                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();
                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } else {
                    hasMembers = true;
                  }
                  // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.
                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }
                  results[value.slice(1)] = get(lex());
                }
                return results;
              }
              // Unexpected token encountered.
              abort();
            }
            return value;
          };

          // Internal: Updates a traversed object member.
          var update = function (source, property, callback) {
            var element = walk(source, property, callback);
            if (element === undefined) {
              delete source[property];
            } else {
              source[property] = element;
            }
          };

          // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
          var walk = function (source, property, callback) {
            var value = source[property], length;
            if (typeof value == "object" && value) {
              // `forOwn` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(getClass, forOwn, value, length, callback);
                }
              } else {
                forOwn(value, function (property) {
                  update(value, property, callback);
                });
              }
            }
            return callback.call(source, property, value);
          };

          // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex());
            // If a JSON string contains multiple tokens, it is invalid.
            if (lex() != "$") {
              abort();
            }
            // Reset the parser state.
            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports.runInContext = runInContext;
      return exports;
    }

    if (freeExports && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, freeExports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON,
          previousJSON = root.JSON3,
          isRestored = false;

      var JSON3 = runInContext(root, (root.JSON3 = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function () {
          if (!isRestored) {
            isRestored = true;
            root.JSON = nativeJSON;
            root.JSON3 = previousJSON;
            nativeJSON = previousJSON = null;
          }
          return JSON3;
        }
      }));

      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }

    // Export for asynchronous module loaders.
    if (isLoader) {
      define(function () {
        return JSON3;
      });
    }
  }).call(this);

  }).call(this)}).call(this,typeof window !== "undefined" && window.document && window.document.implementation ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {})
  },{}],1135:[function(require,module,exports){
  /**
   * Module dependencies
   */

  var debug = require('debug')('jsonp');

  /**
   * Module exports.
   */

  module.exports = jsonp;

  /**
   * Callback index.
   */

  var count = 0;

  /**
   * Noop function.
   */

  function noop(){}

  /**
   * JSONP handler
   *
   * Options:
   *  - param {String} qs parameter (`callback`)
   *  - prefix {String} qs parameter (`__jp`)
   *  - name {String} qs parameter (`prefix` + incr)
   *  - timeout {Number} how long after a timeout error is emitted (`60000`)
   *
   * @param {String} url
   * @param {Object|Function} optional options / callback
   * @param {Function} optional callback
   */

  function jsonp(url, opts, fn){
    if ('function' == typeof opts) {
      fn = opts;
      opts = {};
    }
    if (!opts) opts = {};

    var prefix = opts.prefix || '__jp';

    // use the callback name that was passed if one was provided.
    // otherwise generate a unique name by incrementing our counter.
    var id = opts.name || (prefix + (count++));

    var param = opts.param || 'callback';
    var timeout = null != opts.timeout ? opts.timeout : 60000;
    var enc = encodeURIComponent;
    var target = document.getElementsByTagName('script')[0] || document.head;
    var script;
    var timer;


    if (timeout) {
      timer = setTimeout(function(){
        cleanup();
        if (fn) fn(new Error('Timeout'));
      }, timeout);
    }

    function cleanup(){
      if (script.parentNode) script.parentNode.removeChild(script);
      window[id] = noop;
      if (timer) clearTimeout(timer);
    }

    function cancel(){
      if (window[id]) {
        cleanup();
      }
    }

    window[id] = function(data){
      debug('jsonp got', data);
      cleanup();
      if (fn) fn(null, data);
    };

    // add qs component
    url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);
    url = url.replace('?&', '?');

    debug('jsonp req "%s"', url);

    // create script
    script = document.createElement('script');
    script.src = url;
    target.parentNode.insertBefore(script, target);

    return cancel;
  }

  },{"debug":1123}],1136:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var is = require('is');
  var onload = require('script-onload');
  var tick = require('next-tick');

  /**
   * Expose `loadScript`.
   *
   * @param {Object} options
   * @param {Function} fn
   * @api public
   */

  module.exports = function loadIframe(options, fn){
    if (!options) throw new Error('Cant load nothing...');

    // Allow for the simplest case, just passing a `src` string.
    if (is.string(options)) options = { src : options };

    var https = document.location.protocol === 'https:' ||
                document.location.protocol === 'chrome-extension:';

    // If you use protocol relative URLs, third-party scripts like Google
    // Analytics break when testing with `file:` so this fixes that.
    if (options.src && options.src.indexOf('//') === 0) {
      options.src = https ? 'https:' + options.src : 'http:' + options.src;
    }

    // Allow them to pass in different URLs depending on the protocol.
    if (https && options.https) options.src = options.https;
    else if (!https && options.http) options.src = options.http;

    // Make the `<iframe>` element and insert it before the first iframe on the
    // page, which is guaranteed to exist since this Javaiframe is running.
    var iframe = document.createElement('iframe');
    iframe.src = options.src;
    iframe.width = options.width || 1;
    iframe.height = options.height || 1;
    iframe.style.display = 'none';

    // If we have a fn, attach event handlers, even in IE. Based off of
    // the Third-Party Javascript script loading example:
    // https://github.com/thirdpartyjs/thirdpartyjs-code/blob/master/examples/templates/02/loading-files/index.html
    if (is.fn(fn)) {
      onload(iframe, fn);
    }

    tick(function(){
      // Append after event listeners are attached for IE.
      var firstScript = document.getElementsByTagName('script')[0];
      firstScript.parentNode.insertBefore(iframe, firstScript);
    });

    // Return the iframe element in case they want to do anything special, like
    // give it an ID or attributes.
    return iframe;
  };

  },{"is":1131,"next-tick":1142,"script-onload":1151}],1137:[function(require,module,exports){
  (function(){
    var crypt = require('crypt'),
        utf8 = require('charenc').utf8,
        isBuffer = require('is-buffer'),
        bin = require('charenc').bin,

    // The core
    md5 = function (message, options) {
      // Convert to byte array
      if (message.constructor == String)
        if (options && options.encoding === 'binary')
          message = bin.stringToBytes(message);
        else
          message = utf8.stringToBytes(message);
      else if (isBuffer(message))
        message = Array.prototype.slice.call(message, 0);
      else if (!Array.isArray(message) && message.constructor !== Uint8Array)
        message = message.toString();
      // else, assume byte array already

      var m = crypt.bytesToWords(message),
          l = message.length * 8,
          a =  1732584193,
          b = -271733879,
          c = -1732584194,
          d =  271733878;

      // Swap endian
      for (var i = 0; i < m.length; i++) {
        m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
               ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
      }

      // Padding
      m[l >>> 5] |= 0x80 << (l % 32);
      m[(((l + 64) >>> 9) << 4) + 14] = l;

      // Method shortcuts
      var FF = md5._ff,
          GG = md5._gg,
          HH = md5._hh,
          II = md5._ii;

      for (var i = 0; i < m.length; i += 16) {

        var aa = a,
            bb = b,
            cc = c,
            dd = d;

        a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
        d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
        c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
        b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
        a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
        d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
        c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
        b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
        a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
        d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
        c = FF(c, d, a, b, m[i+10], 17, -42063);
        b = FF(b, c, d, a, m[i+11], 22, -1990404162);
        a = FF(a, b, c, d, m[i+12],  7,  1804603682);
        d = FF(d, a, b, c, m[i+13], 12, -40341101);
        c = FF(c, d, a, b, m[i+14], 17, -1502002290);
        b = FF(b, c, d, a, m[i+15], 22,  1236535329);

        a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
        d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
        c = GG(c, d, a, b, m[i+11], 14,  643717713);
        b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
        a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
        d = GG(d, a, b, c, m[i+10],  9,  38016083);
        c = GG(c, d, a, b, m[i+15], 14, -660478335);
        b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
        a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
        d = GG(d, a, b, c, m[i+14],  9, -1019803690);
        c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
        b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
        a = GG(a, b, c, d, m[i+13],  5, -1444681467);
        d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
        c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
        b = GG(b, c, d, a, m[i+12], 20, -1926607734);

        a = HH(a, b, c, d, m[i+ 5],  4, -378558);
        d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
        c = HH(c, d, a, b, m[i+11], 16,  1839030562);
        b = HH(b, c, d, a, m[i+14], 23, -35309556);
        a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
        d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
        c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
        b = HH(b, c, d, a, m[i+10], 23, -1094730640);
        a = HH(a, b, c, d, m[i+13],  4,  681279174);
        d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
        c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
        b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
        a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
        d = HH(d, a, b, c, m[i+12], 11, -421815835);
        c = HH(c, d, a, b, m[i+15], 16,  530742520);
        b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

        a = II(a, b, c, d, m[i+ 0],  6, -198630844);
        d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
        c = II(c, d, a, b, m[i+14], 15, -1416354905);
        b = II(b, c, d, a, m[i+ 5], 21, -57434055);
        a = II(a, b, c, d, m[i+12],  6,  1700485571);
        d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
        c = II(c, d, a, b, m[i+10], 15, -1051523);
        b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
        a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
        d = II(d, a, b, c, m[i+15], 10, -30611744);
        c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
        b = II(b, c, d, a, m[i+13], 21,  1309151649);
        a = II(a, b, c, d, m[i+ 4],  6, -145523070);
        d = II(d, a, b, c, m[i+11], 10, -1120210379);
        c = II(c, d, a, b, m[i+ 2], 15,  718787259);
        b = II(b, c, d, a, m[i+ 9], 21, -343485551);

        a = (a + aa) >>> 0;
        b = (b + bb) >>> 0;
        c = (c + cc) >>> 0;
        d = (d + dd) >>> 0;
      }

      return crypt.endian([a, b, c, d]);
    };

    // Auxiliary functions
    md5._ff  = function (a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._gg  = function (a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._hh  = function (a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._ii  = function (a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };

    // Package private blocksize
    md5._blocksize = 16;
    md5._digestsize = 16;

    module.exports = function (message, options) {
      if (message === undefined || message === null)
        throw new Error('Illegal argument ' + message);

      var digestbytes = crypt.wordsToBytes(md5(message, options));
      return options && options.asBytes ? digestbytes :
          options && options.asString ? bin.bytesToString(digestbytes) :
          crypt.bytesToHex(digestbytes);
    };

  })();

  },{"charenc":1108,"crypt":1122,"is-buffer":1130}],1138:[function(require,module,exports){
  arguments[4][47][0].apply(exports,arguments)
  },{"dup":47}],1139:[function(require,module,exports){
  "use strict";

  var isodate = require("@segment/isodate");
  var milliseconds = require("./milliseconds");
  var seconds = require("./seconds");

  var objProto = Object.prototype;
  var toStr = objProto.toString;

  function isDate(value) {
    return toStr.call(value) === "[object Date]";
  }

  function isNumber(value) {
    return toStr.call(value) === "[object Number]";
  }

  /**
   * Returns a new Javascript Date object, allowing a variety of extra input types
   * over the native Date constructor.
   *
   * @param {Date|string|number} val
   */
  module.exports = function newDate(val) {
    if (isDate(val)) return val;
    if (isNumber(val)) return new Date(toMs(val));

    // date strings
    if (isodate.is(val)) {
      return isodate.parse(val);
    }
    if (milliseconds.is(val)) {
      return milliseconds.parse(val);
    }
    if (seconds.is(val)) {
      return seconds.parse(val);
    }

    // fallback to Date.parse
    return new Date(val);
  };

  /**
   * If the number passed val is seconds from the epoch, turn it into milliseconds.
   * Milliseconds would be greater than 31557600000 (December 31, 1970).
   *
   * @param {number} num
   */
  function toMs(num) {
    if (num < 31557600000) return num * 1000;
    return num;
  }

  },{"./milliseconds":1140,"./seconds":1141,"@segment/isodate":1092}],1140:[function(require,module,exports){
  "use strict";

  /**
   * Matcher.
   */

  var matcher = /\d{13}/;

  /**
   * Check whether a string is a millisecond date string.
   *
   * @param {string} string
   * @return {boolean}
   */
  exports.is = function (string) {
    return matcher.test(string);
  };

  /**
   * Convert a millisecond string to a date.
   *
   * @param {string} millis
   * @return {Date}
   */
  exports.parse = function (millis) {
    millis = parseInt(millis, 10);
    return new Date(millis);
  };

  },{}],1141:[function(require,module,exports){
  "use strict";

  /**
   * Matcher.
   */

  var matcher = /\d{10}/;

  /**
   * Check whether a string is a second date string.
   *
   * @param {string} string
   * @return {Boolean}
   */
  exports.is = function (string) {
    return matcher.test(string);
  };

  /**
   * Convert a second string to a date.
   *
   * @param {string} seconds
   * @return {Date}
   */
  exports.parse = function (seconds) {
    var millis = parseInt(seconds, 10) * 1000;
    return new Date(millis);
  };

  },{}],1142:[function(require,module,exports){
  arguments[4][307][0].apply(exports,arguments)
  },{"_process":1149,"dup":307,"timers":1168}],1143:[function(require,module,exports){

  var identity = function(_){ return _; };


  /**
   * Module exports, export
   */

  module.exports = multiple(find);
  module.exports.find = module.exports;


  /**
   * Export the replacement function, return the modified object
   */

  module.exports.replace = function (obj, key, val, options) {
    multiple(replace).call(this, obj, key, val, options);
    return obj;
  };


  /**
   * Export the delete function, return the modified object
   */

  module.exports.del = function (obj, key, options) {
    multiple(del).call(this, obj, key, null, options);
    return obj;
  };


  /**
   * Compose applying the function to a nested key
   */

  function multiple (fn) {
    return function (obj, path, val, options) {
      var normalize = options && isFunction(options.normalizer) ? options.normalizer : defaultNormalize;
      path = normalize(path);

      var key;
      var finished = false;

      while (!finished) loop();

      function loop() {
        for (key in obj) {
          var normalizedKey = normalize(key);
          if (0 === path.indexOf(normalizedKey)) {
            var temp = path.substr(normalizedKey.length);
            if (temp.charAt(0) === '.' || temp.length === 0) {
              path = temp.substr(1);
              var child = obj[key];

              // we're at the end and there is nothing.
              if (null == child) {
                finished = true;
                return;
              }

              // we're at the end and there is something.
              if (!path.length) {
                finished = true;
                return;
              }

              // step into child
              obj = child;

              // but we're done here
              return;
            }
          }
        }

        key = undefined;
        // if we found no matching properties
        // on the current object, there's no match.
        finished = true;
      }

      if (!key) return;
      if (null == obj) return obj;

      // the `obj` and `key` is one above the leaf object and key, so
      // start object: { a: { 'b.c': 10 } }
      // end object: { 'b.c': 10 }
      // end key: 'b.c'
      // this way, you can do `obj[key]` and get `10`.
      return fn(obj, key, val);
    };
  }


  /**
   * Find an object by its key
   *
   * find({ first_name : 'Calvin' }, 'firstName')
   */

  function find (obj, key) {
    if (obj.hasOwnProperty(key)) return obj[key];
  }


  /**
   * Delete a value for a given key
   *
   * del({ a : 'b', x : 'y' }, 'X' }) -> { a : 'b' }
   */

  function del (obj, key) {
    if (obj.hasOwnProperty(key)) delete obj[key];
    return obj;
  }


  /**
   * Replace an objects existing value with a new one
   *
   * replace({ a : 'b' }, 'a', 'c') -> { a : 'c' }
   */

  function replace (obj, key, val) {
    if (obj.hasOwnProperty(key)) obj[key] = val;
    return obj;
  }

  /**
   * Normalize a `dot.separated.path`.
   *
   * A.HELL(!*&#(!)O_WOR   LD.bar => ahelloworldbar
   *
   * @param {String} path
   * @return {String}
   */

  function defaultNormalize(path) {
    return path.replace(/[^a-zA-Z0-9\.]+/g, '').toLowerCase();
  }

  /**
   * Check if a value is a function.
   *
   * @param {*} val
   * @return {boolean} Returns `true` if `val` is a function, otherwise `false`.
   */

  function isFunction(val) {
    return typeof val === 'function';
  }

  },{}],1144:[function(require,module,exports){

  /**
   * HOP ref.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Return own keys in `obj`.
   *
   * @param {Object} obj
   * @return {Array}
   * @api public
   */

  exports.keys = Object.keys || function(obj){
    var keys = [];
    for (var key in obj) {
      if (has.call(obj, key)) {
        keys.push(key);
      }
    }
    return keys;
  };

  /**
   * Return own values in `obj`.
   *
   * @param {Object} obj
   * @return {Array}
   * @api public
   */

  exports.values = function(obj){
    var vals = [];
    for (var key in obj) {
      if (has.call(obj, key)) {
        vals.push(obj[key]);
      }
    }
    return vals;
  };

  /**
   * Merge `b` into `a`.
   *
   * @param {Object} a
   * @param {Object} b
   * @return {Object} a
   * @api public
   */

  exports.merge = function(a, b){
    for (var key in b) {
      if (has.call(b, key)) {
        a[key] = b[key];
      }
    }
    return a;
  };

  /**
   * Return length of `obj`.
   *
   * @param {Object} obj
   * @return {Number}
   * @api public
   */

  exports.length = function(obj){
    return exports.keys(obj).length;
  };

  /**
   * Check if `obj` is empty.
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api public
   */

  exports.isEmpty = function(obj){
    return 0 == exports.length(obj);
  };
  },{}],1145:[function(require,module,exports){
  /**
   * Expose `omit`.
   */

  module.exports = omit;

  /**
   * Return a copy of the object without the specified keys.
   *
   * @param {Array} keys
   * @param {Object} object
   * @return {Object}
   */

  function omit(keys, object){
    var ret = {};

    for (var item in object) {
      ret[item] = object[item];
    }

    for (var i = 0; i < keys.length; i++) {
      delete ret[keys[i]];
    }
    return ret;
  }
  },{}],1146:[function(require,module,exports){


  /**
   * Cache whether `<body>` exists.
   */

  var body = false;


  /**
   * Callbacks to call when the body exists.
   */

  var callbacks = [];


  /**
   * Export a way to add handlers to be invoked once the body exists.
   *
   * @param {Function} callback  A function to call when the body exists.
   */

  module.exports = function onBody (callback) {
    if (body) {
      call(callback);
    } else {
      callbacks.push(callback);
    }
  };


  /**
   * Set an interval to check for `document.body`.
   */

  var interval = setInterval(function () {
    if (!document.body) return;
    body = true;
    for (var i = 0; i < callbacks.length; i++) {
      call(callbacks[i]);
    }
    clearInterval(interval);
  }, 5);


  /**
   * Call a callback, passing it the body.
   *
   * @param {Function} callback  The callback to call.
   */

  function call (callback) {
    callback(document.body);
  }
  },{}],1147:[function(require,module,exports){
  var each = require('each');


  /**
   * Cache whether `<body>` exists.
   */

  var body = false;


  /**
   * Callbacks to call when the body exists.
   */

  var callbacks = [];


  /**
   * Export a way to add handlers to be invoked once the body exists.
   *
   * @param {Function} callback  A function to call when the body exists.
   */

  module.exports = function onBody (callback) {
    if (body) {
      call(callback);
    } else {
      callbacks.push(callback);
    }
  };


  /**
   * Set an interval to check for `document.body`.
   */

  var interval = setInterval(function () {
    if (!document.body) return;
    body = true;
    each(callbacks, call);
    clearInterval(interval);
  }, 5);


  /**
   * Call a callback, passing it the body.
   *
   * @param {Function} callback  The callback to call.
   */

  function call (callback) {
    callback(document.body);
  }
  },{"each":1112}],1148:[function(require,module,exports){

  /**
   * Expose `pick`.
   */

  module.exports = pick;

  /**
   * Pick keys from an `obj`.
   *
   * @param {Object} obj
   * @param {Strings} keys...
   * @return {Object}
   */

  function pick(obj){
    var keys = [].slice.call(arguments, 1);
    var ret = {};

    for (var i = 0, key; key = keys[i]; i++) {
      if (key in obj) ret[key] = obj[key];
    }

    return ret;
  }
  },{}],1149:[function(require,module,exports){
  // shim for using process in browser
  var process = module.exports = {};

  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.

  var cachedSetTimeout;
  var cachedClearTimeout;

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;

  process.listeners = function (name) { return [] }

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };

  },{}],1150:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var type = require('type-component');

  /**
   * Expose `reject`
   */

  module.exports = reject;

  /**
   * Reject `obj`, `fn`.
   *
   * If `fn` is omitted a default function
   * that removes nulls (undefined/null) will
   * be supplied.
   *
   * @param {Object} obj
   * @param {Function} fn
   * @return {Object}
   * @api public
   */

  function reject(obj, fn){
    fn = fn || compact;
    return 'array' == type(obj)
      ? reject.array(obj, fn)
      : reject.object(obj, fn);
  }

  /**
   * Reject `arr`, `fn`.
   *
   * @param {Array|String} arr
   * @param {Function} fn
   * @return {Object}
   * @api public
   */

  reject.array = function(arr, fn){
    var ret = [];

    for (var i = 0; i < arr.length; ++i) {
      if (!fn(arr[i], i)) ret[ret.length] = arr[i];
    }

    return ret;
  };

  /**
   * Reject `obj`, `fn`.
   *
   * @param {Object} obj
   * @param {Function} fn
   * @return {Object}
   * @api public
   */

  reject.object = function(obj, fn){
    var ret = {};

    for (var k in obj) {
      if (obj.hasOwnProperty(k) && !fn(obj[k], k)) {
        ret[k] = obj[k]
      }
    }

    return ret;
  };

  /**
   * Reject `type(s)` of `obj/arr`.
   *
   * @param {Object|Array} obj
   * @param {Array|String} type(s)
   * @return {Object|Array}
   * @api public
   */

  reject.types =
  reject.type = function(obj, types){
    if (!Array.isArray(types)) types = [types];
    return reject(obj, function(value){
      return -1 != types.indexOf(type(value));
    });
  };

  /**
   * Reject `value` if it's `null` or `undefined`.
   *
   * @param {Mixed} value
   * @return {Mixed}
   * @api private
   */

  function compact(value){
    return null == value;
  }

  },{"type-component":1177}],1151:[function(require,module,exports){

  // https://github.com/thirdpartyjs/thirdpartyjs-code/blob/master/examples/templates/02/loading-files/index.html

  /**
   * Invoke `fn(err)` when the given `el` script loads.
   *
   * @param {Element} el
   * @param {Function} fn
   * @api public
   */

  module.exports = function(el, fn){
    return el.addEventListener
      ? add(el, fn)
      : attach(el, fn);
  };

  /**
   * Add event listener to `el`, `fn()`.
   *
   * @param {Element} el
   * @param {Function} fn
   * @api private
   */

  function add(el, fn){
    el.addEventListener('load', function(_, e){ fn(null, e); }, false);
    el.addEventListener('error', function(e){
      var err = new Error('script error "' + el.src + '"');
      err.event = e;
      fn(err);
    }, false);
  }

  /**
   * Attach event.
   *
   * @param {Element} el
   * @param {Function} fn
   * @api private
   */

  function attach(el, fn){
    el.attachEvent('onreadystatechange', function(e){
      if (!/complete|loaded/.test(el.readyState)) return;
      fn(null, e);
    });
    el.attachEvent('onerror', function(e){
      var err = new Error('failed to load the script "' + el.src + '"');
      err.event = e || window.event;
      fn(err);
    });
  }

  },{}],1152:[function(require,module,exports){
  'use strict';

  var get = require('obj-case');

  /**
   * Add address getters to `proto`.
   *
   * @ignore
   * @param {Function} proto
   */
  module.exports = function(proto) {
    proto.zip = trait('postalCode', 'zip');
    proto.country = trait('country');
    proto.street = trait('street');
    proto.state = trait('state');
    proto.city = trait('city');
    proto.region = trait('region');

    function trait(a, b) {
      return function() {
        var traits = this.traits();
        var props = this.properties ? this.properties() : {};

        return get(traits, 'address.' + a)
          || get(traits, a)
          || (b ? get(traits, 'address.' + b) : null)
          || (b ? get(traits, b) : null)
          || get(props, 'address.' + a)
          || get(props, a)
          || (b ? get(props, 'address.' + b) : null)
          || (b ? get(props, b) : null);
      };
    }
  };

  },{"obj-case":1143}],1153:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var Facade = require('./facade');

  /**
   * Initialize a new `Alias` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.from] - The previous ID of the user.
   * @param {string} [dictionary.to] - The new ID of the user.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Alias(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Alias, Facade);

  /**
   * Return the type of facade this is. This will always return `"alias"`.
   *
   * @return {string}
   */
  Alias.prototype.action = function() {
    return 'alias';
  };

  /**
   * An alias for {@link Alias#action}.
   *
   * @function
   * @return {string}
   */
  Alias.prototype.type = Alias.prototype.action;

  /**
   * Get the user's previous ID from `previousId` or `from`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Alias.prototype.previousId = function() {
    return this.field('previousId') || this.field('from');
  };

  /**
   * An alias for {@link Alias#previousId}.
   *
   * @function
   * @return {string}
   */
  Alias.prototype.from = Alias.prototype.previousId;

  /**
   * Get the user's new ID from `userId` or `to`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Alias.prototype.userId = function() {
    return this.field('userId') || this.field('to');
  };

  /**
   * An alias for {@link Alias#userId}.
   *
   * @function
   * @return {string}
   */
  Alias.prototype.to = Alias.prototype.userId;

  module.exports = Alias;

  },{"./facade":1155,"./utils":1163}],1154:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var Facade = require('./facade');

  /**
   * Initialize a new `Delete` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.category] - The delete category.
   * @param {string} [dictionary.name] - The delete name.
   * @param {string} [dictionary.properties] - The delete properties.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Delete(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Delete, Facade);

  /**
   * Return the type of facade this is. This will always return `"delete"`.
   *
   * @return {string}
   */
  Delete.prototype.type = function() {
    return 'delete';
  };

  module.exports = Delete;

  },{"./facade":1155,"./utils":1163}],1155:[function(require,module,exports){
  'use strict';

  var address = require('./address');
  var clone = require('./utils').clone;
  var isEnabled = require('./is-enabled');
  var newDate = require('new-date');
  var objCase = require('obj-case');
  var traverse = require('@segment/isodate-traverse');
  var type = require('./utils').type;

  /**
   * A *Facade* is an object meant for creating convience wrappers around
   * objects. When developing integrations, you probably want to look at its
   * subclasses, such as {@link Track} or {@link Identify}, rather than this
   * general-purpose class.
   *
   * This constructor will initialize a new `Facade` with an `obj` of arguments.
   *
   * If the inputted `obj` doesn't have a `timestamp` property, one will be added
   * with the value `new Date()`. Otherwise, the `timestamp` property will be
   * converted to a Date using the `new-date` package.
   *
   * By default, the inputted object will be defensively copied, and all ISO
   * strings present in the string will be converted into Dates.
   *
   * @param {Object} obj - The object to wrap.
   * @param {Object} opts - Options about what kind of Facade to create.
   * @param {boolean} [opts.clone=true] - Whether to make defensive clones. If enabled,
   * the inputted object will be cloned, and any objects derived from this facade
   * will be cloned before being returned.
   * @param {boolean} [opts.traverse=true] - Whether to perform ISODate-Traverse
   * on the inputted object.
   *
   * @see {@link https://github.com/segmentio/new-date|new-date}
   * @see {@link https://github.com/segmentio/isodate-traverse|isodate-traverse}
   */
  function Facade(obj, opts) {
    opts = opts || {};
    if (!('clone' in opts)) opts.clone = true;
    if (opts.clone) obj = clone(obj);
    if (!('traverse' in opts)) opts.traverse = true;
    if (!('timestamp' in obj)) obj.timestamp = new Date();
    else obj.timestamp = newDate(obj.timestamp);
    if (opts.traverse) traverse(obj);
    this.opts = opts;
    this.obj = obj;
  }

  /**
   * Get a potentially-nested field in this facade. `field` should be a
   * period-separated sequence of properties.
   *
   * If the first field passed in points to a function (e.g. the `field` passed
   * in is `a.b.c` and this facade's `obj.a` is a function), then that function
   * will be called, and then the deeper fields will be fetched (using obj-case)
   * from what that function returns. If the first field isn't a function, then
   * this function works just like obj-case.
   *
   * Because this function uses obj-case, the camel- or snake-case of the input
   * is irrelevant.
   *
   * @example
   * YourClass.prototype.height = function() {
   *   return this.proxy('getDimensions.height') ||
   *     this.proxy('props.size.side_length');
   * }
   * @param {string} field - A sequence of properties, joined by periods (`.`).
   * @return {*} - A property of the inputted object.
   * @see {@link https://github.com/segmentio/obj-case|obj-case}
   */
  Facade.prototype.proxy = function(field) {
    var fields = field.split('.');
    field = fields.shift();

    // Call a function at the beginning to take advantage of facaded fields
    var obj = this[field] || this.field(field);
    if (!obj) return obj;
    if (typeof obj === 'function') obj = obj.call(this) || {};
    if (fields.length === 0) return this.opts.clone ? transform(obj) : obj;

    obj = objCase(obj, fields.join('.'));
    return this.opts.clone ? transform(obj) : obj;
  };

  /**
   * Directly access a specific `field` from the underlying object. Only
   * "top-level" fields will work with this function. "Nested" fields *will not
   * work* with this function.
   *
   * @param {string} field
   * @return {*}
   */
  Facade.prototype.field = function(field) {
    var obj = this.obj[field];
    return this.opts.clone ? transform(obj) : obj;
  };

  /**
   * Utility method to always proxy a particular `field`. In other words, it
   * returns a function that will always return `this.proxy(field)`.
   *
   * @example
   * MyClass.prototype.height = Facade.proxy('options.dimensions.height');
   *
   * @param {string} field
   * @return {Function}
   */
  Facade.proxy = function(field) {
    return function() {
      return this.proxy(field);
    };
  };

  /**
   * Utility method to always access a `field`. In other words, it returns a
   * function that will always return `this.field(field)`.
   *
   * @param {string} field
   * @return {Function}
   */
  Facade.field = function(field) {
    return function() {
      return this.field(field);
    };
  };

  /**
   * Create a helper function for fetching a "plural" thing.
   *
   * The generated method will take the inputted `path` and append an "s" to it
   * and calls `this.proxy` with this "pluralized" path. If that produces an
   * array, that will be returned. Otherwise, a one-element array containing
   * `this.proxy(path)` will be returned.
   *
   * @example
   * MyClass.prototype.birds = Facade.multi('animals.bird');
   *
   * @param {string} path
   * @return {Function}
   */
  Facade.multi = function(path) {
    return function() {
      var multi = this.proxy(path + 's');
      if (type(multi) === 'array') return multi;
      var one = this.proxy(path);
      if (one) one = [this.opts.clone ? clone(one) : one];
      return one || [];
    };
  };

  /**
   * Create a helper function for getting a "singular" thing.
   *
   * The generated method will take the inputted path and call
   * `this.proxy(path)`. If a truthy thing is produced, it will be returned.
   * Otherwise, `this.proxy(path + 's')` will be called, and if that produces an
   * array the first element of that array will be returned. Otherwise,
   * `undefined` is returned.
   *
   * @example
   * MyClass.prototype.bird = Facade.one('animals.bird');
   *
   * @param {string} path
   * @return {Function}
   */
  Facade.one = function(path) {
    return function() {
      var one = this.proxy(path);
      if (one) return one;
      var multi = this.proxy(path + 's');
      if (type(multi) === 'array') return multi[0];
    };
  };

  /**
   * Gets the underlying object this facade wraps around.
   *
   * If this facade has a property `type`, it will be invoked as a function and
   * will be assigned as the property `type` of the outputted object.
   *
   * @return {Object}
   */
  Facade.prototype.json = function() {
    var ret = this.opts.clone ? clone(this.obj) : this.obj;
    if (this.type) ret.type = this.type();
    return ret;
  };

  /**
   * Get the options of a call. If an integration is passed, only the options for
   * that integration are included. If the integration is not enabled, then
   * `undefined` is returned.
   *
   * Options are taken from the `options` property of the underlying object,
   * falling back to the object's `context` or simply `{}`.
   *
   * @param {string} integration - The name of the integration to get settings
   * for. Casing does not matter.
   * @return {Object|undefined}
   */
  Facade.prototype.options = function(integration) {
    var obj = this.obj.options || this.obj.context || {};
    var options = this.opts.clone ? clone(obj) : obj;
    if (!integration) return options;
    if (!this.enabled(integration)) return;
    var integrations = this.integrations();
    var value = integrations[integration] || objCase(integrations, integration);
    if (typeof value !== 'object') value = objCase(this.options(), integration);
    return typeof value === 'object' ? value : {};
  };

  /**
   * An alias for {@link Facade#options}.
   */
  Facade.prototype.context = Facade.prototype.options;

  /**
   * Check whether an integration is enabled.
   *
   * Basically, this method checks whether this integration is explicitly
   * enabled. If it isn'texplicitly mentioned, it checks whether it has been
   * enabled at the global level. Some integrations (e.g. Salesforce), cannot
   * enabled by these global event settings.
   *
   * More concretely, the deciding factors here are:
   *
   * 1. If `this.integrations()` has the integration set to `true`, return `true`.
   * 2. If `this.integrations().providers` has the integration set to `true`, return `true`.
   * 3. If integrations are set to default-disabled via global parameters (i.e.
   * `options.providers.all`, `options.all`, or `integrations.all`), then return
   * false.
   * 4. If the integration is one of the special default-deny integrations
   * (currently, only Salesforce), then return false.
   * 5. Else, return true.
   *
   * @param {string} integration
   * @return {boolean}
   */
  Facade.prototype.enabled = function(integration) {
    var allEnabled = this.proxy('options.providers.all');
    if (typeof allEnabled !== 'boolean') allEnabled = this.proxy('options.all');
    if (typeof allEnabled !== 'boolean') allEnabled = this.proxy('integrations.all');
    if (typeof allEnabled !== 'boolean') allEnabled = true;

    var enabled = allEnabled && isEnabled(integration);
    var options = this.integrations();

    // If the integration is explicitly enabled or disabled, use that
    // First, check options.providers for backwards compatibility
    if (options.providers && options.providers.hasOwnProperty(integration)) {
      enabled = options.providers[integration];
    }

    // Next, check for the integration's existence in 'options' to enable it.
    // If the settings are a boolean, use that, otherwise it should be enabled.
    if (options.hasOwnProperty(integration)) {
      var settings = options[integration];
      if (typeof settings === 'boolean') {
        enabled = settings;
      } else {
        enabled = true;
      }
    }

    return !!enabled;
  };

  /**
   * Get all `integration` options.
   *
   * @ignore
   * @param {string} integration
   * @return {Object}
   */
  Facade.prototype.integrations = function() {
    return this.obj.integrations || this.proxy('options.providers') || this.options();
  };

  /**
   * Check whether the user is active.
   *
   * @return {boolean}
   */
  Facade.prototype.active = function() {
    var active = this.proxy('options.active');
    if (active === null || active === undefined) active = true;
    return active;
  };

  /**
   * Get `sessionId / anonymousId`.
   *
   * @return {*}
   */
  Facade.prototype.anonymousId = function() {
    return this.field('anonymousId') || this.field('sessionId');
  };

  /**
   * An alias for {@link Facade#anonymousId}.
   *
   * @function
   * @return {string}
   */
  Facade.prototype.sessionId = Facade.prototype.anonymousId;

  /**
   * Get `groupId` from `context.groupId`.
   *
   * @function
   * @return {string}
   */
  Facade.prototype.groupId = Facade.proxy('options.groupId');

  /**
   * Get the call's "traits". All event types can pass in traits, though {@link
   * Identify} and {@link Group} override this implementation.
   *
   * Traits are gotten from `options.traits`, augmented with a property `id` with
   * the event's `userId`.
   *
   * The parameter `aliases` is meant to transform keys in `options.traits` into
   * new keys. Each alias like `{ "xxx": "yyy" }` will take whatever is at `xxx`
   * in the traits, and move it to `yyy`. If `xxx` is a method of this facade,
   * it'll be called as a function instead of treated as a key into the traits.
   *
   * @example
   * var obj = { options: { traits: { foo: "bar" } }, anonymousId: "xxx" }
   * var facade = new Facade(obj)
   *
   * facade.traits() // { "foo": "bar" }
   * facade.traits({ "foo": "asdf" }) // { "asdf": "bar" }
   * facade.traits({ "sessionId": "rofl" }) // { "rofl": "xxx" }
   *
   * @param {Object} aliases - A mapping from keys to the new keys they should be
   * transformed to.
   * @return {Object}
   */
  Facade.prototype.traits = function(aliases) {
    var ret = this.proxy('options.traits') || {};
    var id = this.userId();
    aliases = aliases || {};

    if (id) ret.id = id;

    for (var alias in aliases) {
      var value = this[alias] == null ? this.proxy('options.traits.' + alias) : this[alias]();
      if (value == null) continue;
      ret[aliases[alias]] = value;
      delete ret[alias];
    }

    return ret;
  };

  /**
   * The library and version of the client used to produce the message.
   *
   * If the library name cannot be determined, it is set to `"unknown"`. If the
   * version cannot be determined, it is set to `null`.
   *
   * @return {{name: string, version: string}}
   */
  Facade.prototype.library = function() {
    var library = this.proxy('options.library');
    if (!library) return { name: 'unknown', version: null };
    if (typeof library === 'string') return { name: library, version: null };
    return library;
  };

  /**
   * Return the device information, falling back to an empty object.
   *
   * Interesting values of `type` are `"ios"` and `"android"`, but other values
   * are possible if the client is doing something unusual with `context.device`.
   *
   * @return {{type: string}}
   */
  Facade.prototype.device = function() {
    var device = this.proxy('context.device');
    if (type(device) !== 'object') device = {};
    var library = this.library().name;
    if (device.type) return device;

    if (library.indexOf('ios') > -1) device.type = 'ios';
    if (library.indexOf('android') > -1) device.type = 'android';
    return device;
  };

  /**
   * Get the User-Agent from `context.userAgent`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return string
   */
  Facade.prototype.userAgent = Facade.proxy('context.userAgent');

  /**
   * Get the timezone from `context.timezone`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return string
   */
  Facade.prototype.timezone = Facade.proxy('context.timezone');

  /**
   * Get the timestamp from `context.timestamp`.
   *
   * @function
   * @return string
   */
  Facade.prototype.timestamp = Facade.field('timestamp');

  /**
   * Get the channel from `channel`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return string
   */
  Facade.prototype.channel = Facade.field('channel');

  /**
   * Get the IP address from `context.ip`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return string
   */
  Facade.prototype.ip = Facade.proxy('context.ip');

  /**
   * Get the user ID from `userId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return string
   */
  Facade.prototype.userId = Facade.field('userId');

  /**
   * Get the ZIP/Postal code from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name zip
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  /**
   * Get the country from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name country
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  /**
   * Get the street from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name street
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  /**
   * Get the state from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name state
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  /**
   * Get the city from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name city
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  /**
   * Get the region from `traits`, `traits.address`, `properties`, or
   * `properties.address`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @name region
   * @function
   * @memberof Facade.prototype
   * @return {string}
   */

  address(Facade.prototype);

  /**
   * Return the cloned and traversed object
   *
   * @ignore
   * @param {*} obj
   * @return {*}
   */
  function transform(obj) {
    return clone(obj);
  }

  module.exports = Facade;

  },{"./address":1152,"./is-enabled":1159,"./utils":1163,"@segment/isodate-traverse":1091,"new-date":1139,"obj-case":1143}],1156:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var isEmail = require('is-email');
  var newDate = require('new-date');
  var Facade = require('./facade');

  /**
   * Initialize a new `Group` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.userId] - The user to add to the group.
   * @param {string} [dictionary.groupId] - The ID of the group.
   * @param {Object} [dictionary.traits] - The traits of the group.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Group(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Group, Facade);

  /**
   * Return the type of facade this is. This will always return `"group"`.
   *
   * @return {string}
   */
  Group.prototype.action = function() {
    return 'group';
  };

  /**
   * An alias for {@link Group#action}.
   *
   * @function
   * @return {string}
   */
  Group.prototype.type = Group.prototype.action;

  /**
   * Get the group ID from `groupId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Group.prototype.groupId = Facade.field('groupId');

  /**
   * Get the time of creation of the group from `traits.createdAt`,
   * `traits.created`, `properties.createdAt`, or `properties.created`.
   *
   * @return {Date}
   */
  Group.prototype.created = function() {
    var created = this.proxy('traits.createdAt')
      || this.proxy('traits.created')
      || this.proxy('properties.createdAt')
      || this.proxy('properties.created');

    if (created) return newDate(created);
  };

  /**
   * Get the group's email from `traits.email`, falling back to `groupId` only if
   * it looks like a valid email.
   *
   * @return {string}
   */
  Group.prototype.email = function() {
    var email = this.proxy('traits.email');
    if (email) return email;
    var groupId = this.groupId();
    if (isEmail(groupId)) return groupId;
  };

  /**
   * Get the group's traits. This is identical to how {@link Facade#traits}
   * works, except it looks at `traits.*` instead of `options.traits.*`.
   *
   * Traits are gotten from `traits`, augmented with a property `id` with
   * the event's `groupId`.
   *
   * The parameter `aliases` is meant to transform keys in `traits` into new
   * keys. Each alias like `{ "xxx": "yyy" }` will take whatever is at `xxx` in
   * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll
   * be called as a function instead of treated as a key into the traits.
   *
   * @example
   * var obj = { traits: { foo: "bar" }, anonymousId: "xxx" }
   * var group = new Group(obj)
   *
   * group.traits() // { "foo": "bar" }
   * group.traits({ "foo": "asdf" }) // { "asdf": "bar" }
   * group.traits({ "sessionId": "rofl" }) // { "rofl": "xxx" }
   *
   * @param {Object} aliases - A mapping from keys to the new keys they should be
   * transformed to.
   * @return {Object}
   */
  Group.prototype.traits = function(aliases) {
    var ret = this.properties();
    var id = this.groupId();
    aliases = aliases || {};

    if (id) ret.id = id;

    for (var alias in aliases) {
      var value = this[alias] == null ? this.proxy('traits.' + alias) : this[alias]();
      if (value == null) continue;
      ret[aliases[alias]] = value;
      delete ret[alias];
    }

    return ret;
  };

  /**
   * Get the group's name from `traits.name`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Group.prototype.name = Facade.proxy('traits.name');

  /**
   * Get the group's industry from `traits.industry`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Group.prototype.industry = Facade.proxy('traits.industry');

  /**
   * Get the group's employee count from `traits.employees`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Group.prototype.employees = Facade.proxy('traits.employees');

  /**
   * Get the group's properties from `traits` or `properties`, falling back to
   * simply an empty object.
   *
   * @return {Object}
   */
  Group.prototype.properties = function() {
    // TODO remove this function
    return this.field('traits') || this.field('properties') || {};
  };

  module.exports = Group;

  },{"./facade":1155,"./utils":1163,"is-email":1164,"new-date":1139}],1157:[function(require,module,exports){
  'use strict';

  var Facade = require('./facade');
  var get = require('obj-case');
  var inherit = require('./utils').inherit;
  var isEmail = require('is-email');
  var newDate = require('new-date');
  var trim = require('trim');
  var type = require('./utils').type;

  /**
   * Initialize a new `Identify` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.userId] - The ID of the user.
   * @param {string} [dictionary.anonymousId] - The anonymous ID of the user.
   * @param {string} [dictionary.traits] - The user's traits.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Identify(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Identify, Facade);

  /**
   * Return the type of facade this is. This will always return `"identify"`.
   *
   * @return {string}
   */
  Identify.prototype.action = function() {
    return 'identify';
  };

  /**
   * An alias for {@link Identify#action}.
   *
   * @function
   * @return {string}
   */
  Identify.prototype.type = Identify.prototype.action;

  /**
   * Get the user's traits. This is identical to how {@link Facade#traits} works,
   * except it looks at `traits.*` instead of `options.traits.*`.
   *
   * Traits are gotten from `traits`, augmented with a property `id` with
   * the event's `userId`.
   *
   * The parameter `aliases` is meant to transform keys in `traits` into new
   * keys. Each alias like `{ "xxx": "yyy" }` will take whatever is at `xxx` in
   * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll
   * be called as a function instead of treated as a key into the traits.
   *
   * @example
   * var obj = { traits: { foo: "bar" }, anonymousId: "xxx" }
   * var identify = new Identify(obj)
   *
   * identify.traits() // { "foo": "bar" }
   * identify.traits({ "foo": "asdf" }) // { "asdf": "bar" }
   * identify.traits({ "sessionId": "rofl" }) // { "rofl": "xxx" }
   *
   * @param {Object} aliases - A mapping from keys to the new keys they should be
   * transformed to.
   * @return {Object}
   */
  Identify.prototype.traits = function(aliases) {
    var ret = this.field('traits') || {};
    var id = this.userId();
    aliases = aliases || {};

    if (id) ret.id = id;

    for (var alias in aliases) {
      var value = this[alias] == null ? this.proxy('traits.' + alias) : this[alias]();
      if (value == null) continue;
      ret[aliases[alias]] = value;
      if (alias !== aliases[alias]) delete ret[alias];
    }

    return ret;
  };

  /**
   * Get the user's email from `traits.email`, falling back to `userId` only if
   * it looks like a valid email.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.email = function() {
    var email = this.proxy('traits.email');
    if (email) return email;

    var userId = this.userId();
    if (isEmail(userId)) return userId;
  };

  /**
   * Get the time of creation of the user from `traits.created` or
   * `traits.createdAt`.
   *
   * @return {Date}
   */
  Identify.prototype.created = function() {
    var created = this.proxy('traits.created') || this.proxy('traits.createdAt');
    if (created) return newDate(created);
  };

  /**
   * Get the time of creation of the user's company from `traits.company.created`
   * or `traits.company.createdAt`.
   *
   * @return {Date}
   */
  Identify.prototype.companyCreated = function() {
    var created = this.proxy('traits.company.created') || this.proxy('traits.company.createdAt');

    if (created) {
      return newDate(created);
    }
  };

  /**
   * Get the user's company name from `traits.company.name`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.companyName = function() {
    return this.proxy('traits.company.name');
  };

  /**
   * Get the user's name `traits.name`, falling back to combining {@link
   * Identify#firstName} and {@link Identify#lastName} if possible.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.name = function() {
    var name = this.proxy('traits.name');
    if (typeof name === 'string') {
      return trim(name);
    }

    var firstName = this.firstName();
    var lastName = this.lastName();
    if (firstName && lastName) {
      return trim(firstName + ' ' + lastName);
    }
  };

  /**
   * Get the user's first name from `traits.firstName`, optionally splitting it
   * out of a the full name if that's all that was provided.
   *
   * Splitting the full name works on the assumption that the full name is of the
   * form "FirstName LastName"; it will not work for non-Western names.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.firstName = function() {
    var firstName = this.proxy('traits.firstName');
    if (typeof firstName === 'string') {
      return trim(firstName);
    }

    var name = this.proxy('traits.name');
    if (typeof name === 'string') {
      return trim(name).split(' ')[0];
    }
  };

  /**
   * Get the user's last name from `traits.lastName`, optionally splitting it out
   * of a the full name if that's all that was provided.
   *
   * Splitting the full name works on the assumption that the full name is of the
   * form "FirstName LastName"; it will not work for non-Western names.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.lastName = function() {
    var lastName = this.proxy('traits.lastName');
    if (typeof lastName === 'string') {
      return trim(lastName);
    }

    var name = this.proxy('traits.name');
    if (typeof name !== 'string') {
      return;
    }

    var space = trim(name).indexOf(' ');
    if (space === -1) {
      return;
    }

    return trim(name.substr(space + 1));
  };

  /**
   * Get the user's "unique id" from `userId`, `traits.username`, or
   * `traits.email`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.uid = function() {
    return this.userId() || this.username() || this.email();
  };

  /**
   * Get the user's description from `traits.description` or `traits.background`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.description = function() {
    return this.proxy('traits.description') || this.proxy('traits.background');
  };

  /**
   * Get the user's age from `traits.age`, falling back to computing it from
   * `traits.birthday` and the current time.
   *
   * @return {number}
   */
  Identify.prototype.age = function() {
    var date = this.birthday();
    var age = get(this.traits(), 'age');
    if (age != null) return age;
    if (type(date) !== 'date') return;
    var now = new Date();
    return now.getFullYear() - date.getFullYear();
  };

  /**
   * Get the URL of the user's avatar from `traits.avatar`, `traits.photoUrl`, or
   * `traits.avatarUrl`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.avatar = function() {
    var traits = this.traits();
    return get(traits, 'avatar') || get(traits, 'photoUrl') || get(traits, 'avatarUrl');
  };

  /**
   * Get the user's job position from `traits.position` or `traits.jobTitle`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Identify.prototype.position = function() {
    var traits = this.traits();
    return get(traits, 'position') || get(traits, 'jobTitle');
  };

  /**
   * Get the user's username from `traits.username`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Identify.prototype.username = Facade.proxy('traits.username');

  /**
   * Get the user's website from `traits.website`, or if there are multiple in
   * `traits.websites`, return the first one.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Identify.prototype.website = Facade.one('traits.website');

  /**
   * Get the user's websites from `traits.websites`, or if there is only one in
   * `traits.website`, then wrap it in an array.
   *
   * This *should* be an array of strings, but may not be if the client isn't
   * adhering to the spec.
   *
   * @function
   * @return {array}
   */
  Identify.prototype.websites = Facade.multi('traits.website');

  /**
   * Get the user's phone number from `traits.phone`, or if there are multiple in
   * `traits.phones`, return the first one.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Identify.prototype.phone = Facade.one('traits.phone');

  /**
   * Get the user's phone numbers from `traits.phones`, or if there is only one
   * in `traits.phone`, then wrap it in an array.
   *
   * This *should* be an array of strings, but may not be if the client isn't
   * adhering to the spec.
   *
   * @function
   * @return {array}
   */
  Identify.prototype.phones = Facade.multi('traits.phone');

  /**
   * Get the user's address from `traits.address`.
   *
   * This *should* be an object, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {object}
   */
  Identify.prototype.address = Facade.proxy('traits.address');

  /**
   * Get the user's gender from `traits.gender`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Identify.prototype.gender = Facade.proxy('traits.gender');

  /**
   * Get the user's birthday from `traits.birthday`.
   *
   * This *should* be a Date if `opts.traverse` was enabled (it is by default)
   * when constructing this Identify. Otherwise, it should be a string. But it
   * may be neither if the client isn't adhering to the spec.
   * spec.
   *
   * @function
   * @return {object}
   */
  Identify.prototype.birthday = Facade.proxy('traits.birthday');

  module.exports = Identify;

  },{"./facade":1155,"./utils":1163,"is-email":1164,"new-date":1139,"obj-case":1143,"trim":1176}],1158:[function(require,module,exports){
  'use strict';

  var Facade = require('./facade');

  Facade.Alias = require('./alias');
  Facade.Group = require('./group');
  Facade.Identify = require('./identify');
  Facade.Track = require('./track');
  Facade.Page = require('./page');
  Facade.Screen = require('./screen');
  Facade.Delete = require('./delete');

  module.exports = Facade;

  },{"./alias":1153,"./delete":1154,"./facade":1155,"./group":1156,"./identify":1157,"./page":1160,"./screen":1161,"./track":1162}],1159:[function(require,module,exports){
  'use strict';

  // A few integrations are disabled by default. They must be explicitly enabled
  // by setting options[Provider] = true.
  var disabled = {
    Salesforce: true
  };

  /**
   * Check whether an integration should be enabled by default.
   *
   * @ignore
   * @param {string} integration
   * @return {boolean}
   */
  module.exports = function(integration) {
    return !disabled[integration];
  };

  },{}],1160:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var Facade = require('./facade');
  var Track = require('./track');
  var isEmail = require('is-email');

  /**
   * Initialize a new `Page` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.category] - The page category.
   * @param {string} [dictionary.name] - The page name.
   * @param {string} [dictionary.properties] - The page properties.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Page(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Page, Facade);

  /**
   * Return the type of facade this is. This will always return `"page"`.
   *
   * @return {string}
   */
  Page.prototype.action = function() {
    return 'page';
  };

  /**
   * An alias for {@link Page#action}.
   *
   * @function
   * @return {string}
   */
  Page.prototype.type = Page.prototype.action;

  /**
   * Get the page category from `category`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.category = Facade.field('category');

  /**
   * Get the page name from `name`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.name = Facade.field('name');

  /**
   * Get the page title from `properties.title`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.title = Facade.proxy('properties.title');

  /**
   * Get the page path from `properties.path`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.path = Facade.proxy('properties.path');

  /**
   * Get the page URL from `properties.url`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.url = Facade.proxy('properties.url');

  /**
   * Get the HTTP referrer from `context.referrer.url`, `context.page.referrer`,
   * or `properties.referrer`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.referrer = function() {
    return this.proxy('context.referrer.url')
      || this.proxy('context.page.referrer')
      || this.proxy('properties.referrer');
  };

  /**
   * Get the page's properties. This is identical to how {@link Facade#traits}
   * works, except it looks at `properties.*` instead of `options.traits.*`.
   *
   * Properties are gotten from `properties`, augmented with the page's `name`
   * and `category`.
   *
   * The parameter `aliases` is meant to transform keys in `properties` into new
   * keys. Each alias like `{ "xxx": "yyy" }` will take whatever is at `xxx` in
   * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll
   * be called as a function instead of treated as a key into the traits.
   *
   * @example
   * var obj = { properties: { foo: "bar" }, anonymousId: "xxx" }
   * var page = new Page(obj)
   *
   * page.traits() // { "foo": "bar" }
   * page.traits({ "foo": "asdf" }) // { "asdf": "bar" }
   * page.traits({ "sessionId": "rofl" }) // { "rofl": "xxx" }
   *
   * @param {Object} aliases - A mapping from keys to the new keys they should be
   * transformed to.
   * @return {Object}
   */
  Page.prototype.properties = function(aliases) {
    var props = this.field('properties') || {};
    var category = this.category();
    var name = this.name();
    aliases = aliases || {};

    if (category) props.category = category;
    if (name) props.name = name;

    for (var alias in aliases) {
      var value = this[alias] == null
        ? this.proxy('properties.' + alias)
        : this[alias]();
      if (value == null) continue;
      props[aliases[alias]] = value;
      if (alias !== aliases[alias]) delete props[alias];
    }

    return props;
  };

  /**
   * Get the user's email from `context.traits.email` or `properties.email`,
   * falling back to `userId` if it's a valid email.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.email = function() {
    var email = this.proxy('context.traits.email') || this.proxy('properties.email');
    if (email) return email;

    var userId = this.userId();
    if (isEmail(userId)) return userId;
  };

  /**
   * Get the page fullName. This is `$category $name` if both are present, and
   * just `name` otherwiser.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Page.prototype.fullName = function() {
    var category = this.category();
    var name = this.name();
    return name && category
      ? category + ' ' + name
      : name;
  };

  /**
   * Get an event name from this page call. If `name` is present, this will be
   * `Viewed $name Page`; otherwise, it will be `Loaded a Page`.
   *
   * @param {string} name - The name of this page.
   * @return {string}
   */
  Page.prototype.event = function(name) {
    return name
      ? 'Viewed ' + name + ' Page'
      : 'Loaded a Page';
  };

  /**
   * Convert this Page to a {@link Track} facade. The inputted `name` will be
   * converted to the Track's event name via {@link Page#event}.
   *
   * @param {string} name
   * @return {Track}
   */
  Page.prototype.track = function(name) {
    var json = this.json();
    json.event = this.event(name);
    json.timestamp = this.timestamp();
    json.properties = this.properties();
    return new Track(json, this.opts);
  };

  module.exports = Page;

  },{"./facade":1155,"./track":1162,"./utils":1163,"is-email":1164}],1161:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var Page = require('./page');
  var Track = require('./track');

  /**
   * Initialize a new `Screen` facade with a `dictionary` of arguments.
   *
   * Note that this class extends {@link Page}, so its methods are available to
   * instances of this class as well.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.category] - The page category.
   * @param {string} [dictionary.name] - The page name.
   * @param {string} [dictionary.properties] - The page properties.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Page
   */
  function Screen(dictionary, opts) {
    Page.call(this, dictionary, opts);
  }

  inherit(Screen, Page);

  /**
   * Return the type of facade this is. This will always return `"screen"`.
   *
   * @return {string}
   */
  Screen.prototype.action = function() {
    return 'screen';
  };

  /**
   * An alias for {@link Screen#action}.
   *
   * @function
   * @return {string}
   */
  Screen.prototype.type = Screen.prototype.action;

  /**
   * Get an event name from this screen call. If `name` is present, this will be
   * `Viewed $name Screen`; otherwise, it will be `Loaded a Screen`.
   *
   * @param {string} name - The name of this screen.
   * @return {string}
   */
  Screen.prototype.event = function(name) {
    return name ? 'Viewed ' + name + ' Screen' : 'Loaded a Screen';
  };

  /**
   * Convert this Screen to a {@link Track} facade. The inputted `name` will be
   * converted to the Track's event name via {@link Screen#event}.
   *
   * @param {string} name
   * @return {Track}
   */
  Screen.prototype.track = function(name) {
    var json = this.json();
    json.event = this.event(name);
    json.timestamp = this.timestamp();
    json.properties = this.properties();
    return new Track(json, this.opts);
  };

  module.exports = Screen;

  },{"./page":1160,"./track":1162,"./utils":1163}],1162:[function(require,module,exports){
  'use strict';

  var inherit = require('./utils').inherit;
  var type = require('./utils').type;
  var Facade = require('./facade');
  var Identify = require('./identify');
  var isEmail = require('is-email');
  var get = require('obj-case');

  /**
   * Initialize a new `Track` facade with a `dictionary` of arguments.
   *
   * @param {Object} dictionary - The object to wrap.
   * @param {string} [dictionary.event] - The name of the event being tracked.
   * @param {string} [dictionary.userId] - The ID of the user being tracked.
   * @param {string} [dictionary.anonymousId] - The anonymous ID of the user.
   * @param {string} [dictionary.properties] - Properties of the track event.
   * @param {Object} opts - Options about what kind of Facade to create.
   *
   * @augments Facade
   */
  function Track(dictionary, opts) {
    Facade.call(this, dictionary, opts);
  }

  inherit(Track, Facade);

  /**
   * Return the type of facade this is. This will always return `"track"`.
   *
   * @return {string}
   */
  Track.prototype.action = function() {
    return 'track';
  };

  /**
   * An alias for {@link Track#action}.
   *
   * @function
   * @return {string}
   */
  Track.prototype.type = Track.prototype.action;

  /**
   * Get the event name from `event`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.event = Facade.field('event');

  /**
   * Get the event value, usually the monetary value, from `properties.value`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.value = Facade.proxy('properties.value');

  /**
   * Get the event cateogry from `properties.category`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.category = Facade.proxy('properties.category');

  /**
   * Get the event ID from `properties.id`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.id = Facade.proxy('properties.id');

  /**
   * Get the product ID from `properties.productId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.productId = function() {
    return this.proxy('properties.product_id') || this.proxy('properties.productId');
  };

  /**
   * Get the promotion ID from `properties.promotionId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.promotionId = function() {
    return this.proxy('properties.promotion_id') || this.proxy('properties.promotionId');
  };

  /**
   * Get the cart ID from `properties.cartId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.cartId = function() {
    return this.proxy('properties.cart_id') || this.proxy('properties.cartId');
  };

  /**
   * Get the checkout ID from `properties.checkoutId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.checkoutId = function() {
    return this.proxy('properties.checkout_id') || this.proxy('properties.checkoutId');
  };

  /**
   * Get the payment ID from `properties.paymentId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.paymentId = function() {
    return this.proxy('properties.payment_id') || this.proxy('properties.paymentId');
  };

  /**
   * Get the coupon ID from `properties.couponId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.couponId = function() {
    return this.proxy('properties.coupon_id') || this.proxy('properties.couponId');
  };

  /**
   * Get the wishlist ID from `properties.wishlistId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.wishlistId = function() {
    return this.proxy('properties.wishlist_id') || this.proxy('properties.wishlistId');
  };

  /**
   * Get the review ID from `properties.reviewId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.reviewId = function() {
    return this.proxy('properties.review_id') || this.proxy('properties.reviewId');
  };

  /**
   * Get the order ID from `properties.id` or `properties.orderId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.orderId = function() {
    // doesn't follow above convention since this fallback order was how it used to be
    return this.proxy('properties.id')
      || this.proxy('properties.order_id')
      || this.proxy('properties.orderId');
  };

  /**
   * Get the SKU from `properties.sku`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.sku = Facade.proxy('properties.sku');

  /**
   * Get the amount of tax for this purchase from `properties.tax`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.tax = Facade.proxy('properties.tax');

  /**
   * Get the name of this event from `properties.name`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.name = Facade.proxy('properties.name');

  /**
   * Get the price of this purchase from `properties.price`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.price = Facade.proxy('properties.price');

  /**
   * Get the total for this purchase from `properties.total`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.total = Facade.proxy('properties.total');

  /**
   * Whether this is a repeat purchase from `properties.repeat`.
   *
   * This *should* be a boolean, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {boolean}
   */
  Track.prototype.repeat = Facade.proxy('properties.repeat');

  /**
   * Get the coupon for this purchase from `properties.coupon`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.coupon = Facade.proxy('properties.coupon');

  /**
   * Get the shipping for this purchase from `properties.shipping`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.shipping = Facade.proxy('properties.shipping');

  /**
   * Get the discount for this purchase from `properties.discount`.
   *
   * This *should* be a number, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {number}
   */
  Track.prototype.discount = Facade.proxy('properties.discount');

  /**
   * Get the shipping method for this purchase from `properties.shippingMethod`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.shippingMethod = function() {
    return this.proxy('properties.shipping_method') || this.proxy('properties.shippingMethod');
  };

  /**
   * Get the payment method for this purchase from `properties.paymentMethod`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.paymentMethod = function() {
    return this.proxy('properties.payment_method') || this.proxy('properties.paymentMethod');
  };

  /**
   * Get a description for this event from `properties.description`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.description = Facade.proxy('properties.description');

  /**
   * Get a plan, as in the plan the user is on, for this event from
   * `properties.plan`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string}
   */
  Track.prototype.plan = Facade.proxy('properties.plan');

  /**
   * Get the subtotal for this purchase from `properties.subtotal`.
   *
   * If `properties.subtotal` isn't available, then fall back to computing the
   * total from `properties.total` or `properties.revenue`, and then subtracting
   * tax, shipping, and discounts.
   *
   * If neither subtotal, total, nor revenue are available, then return 0.
   *
   * @return {number}
   */
  Track.prototype.subtotal = function() {
    var subtotal = get(this.properties(), 'subtotal');
    var total = this.total() || this.revenue();

    if (subtotal) return subtotal;
    if (!total) return 0;

    if (this.total()) {
      var n = this.tax();
      if (n) total -= n;
      n = this.shipping();
      if (n) total -= n;
      n = this.discount();
      if (n) total += n;
    }

    return total;
  };

  /**
   * Get the products for this event from `properties.products` if it's an
   * array, falling back to an empty array.
   *
   * @return {Array}
   */
  Track.prototype.products = function() {
    var props = this.properties();
    var products = get(props, 'products');
    return type(products) === 'array' ? products : [];
  };

  /**
   * Get the quantity for this event from `properties.quantity`, falling back to
   * a quantity of one.
   *
   * @return {number}
   */
  Track.prototype.quantity = function() {
    var props = this.obj.properties || {};
    return props.quantity || 1;
  };

  /**
   * Get the currency for this event from `properties.currency`, falling back to
   * "USD".
   *
   * @return {string}
   */
  Track.prototype.currency = function() {
    var props = this.obj.properties || {};
    return props.currency || 'USD';
  };

  /**
   * Get the referrer for this event from `context.referrer.url`,
   * `context.page.referrer`, or `properties.referrer`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string}
   */
  Track.prototype.referrer = function() {
    // TODO re-examine whether this function is necessary
    return this.proxy('context.referrer.url')
      || this.proxy('context.page.referrer')
      || this.proxy('properties.referrer');
  };

  /**
   * Get the query for this event from `options.query`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @function
   * @return {string|object}
   */
  Track.prototype.query = Facade.proxy('options.query');

  /**
   * Get the page's properties. This is identical to how {@link Facade#traits}
   * works, except it looks at `properties.*` instead of `options.traits.*`.
   *
   * Properties are gotten from `properties`.
   *
   * The parameter `aliases` is meant to transform keys in `properties` into new
   * keys. Each alias like `{ "xxx": "yyy" }` will take whatever is at `xxx` in
   * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll
   * be called as a function instead of treated as a key into the traits.
   *
   * @example
   * var obj = { properties: { foo: "bar" }, anonymousId: "xxx" }
   * var track = new Track(obj)
   *
   * track.traits() // { "foo": "bar" }
   * track.traits({ "foo": "asdf" }) // { "asdf": "bar" }
   * track.traits({ "sessionId": "rofl" }) // { "rofl": "xxx" }
   *
   * @param {Object} aliases - A mapping from keys to the new keys they should be
   * transformed to.
   * @return {Object}
   */
  Track.prototype.properties = function(aliases) {
    var ret = this.field('properties') || {};
    aliases = aliases || {};

    for (var alias in aliases) {
      var value = this[alias] == null ? this.proxy('properties.' + alias) : this[alias]();
      if (value == null) continue;
      ret[aliases[alias]] = value;
      delete ret[alias];
    }

    return ret;
  };

  /**
   * Get the username of the user for this event from `traits.username`,
   * `properties.username`, `userId`, or `anonymousId`.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string|undefined}
   */
  Track.prototype.username = function() {
    return this.proxy('traits.username')
      || this.proxy('properties.username')
      || this.userId()
      || this.sessionId();
  };

  /**
   * Get the email of the user for this event from `trais.email`,
   * `properties.email`, or `options.traits.email`, falling back to `userId` if
   * it looks like a valid email.
   *
   * This *should* be a string, but may not be if the client isn't adhering to
   * the spec.
   *
   * @return {string|undefined}
   */
  Track.prototype.email = function() {
    var email = this.proxy('traits.email')
      || this.proxy('properties.email')
      || this.proxy('options.traits.email');
    if (email) return email;

    var userId = this.userId();
    if (isEmail(userId)) return userId;
  };

  /**
   * Get the revenue for this event.
   *
   * If this is an "Order Completed" event, this will be the `properties.total`
   * falling back to the `properties.revenue`. For all other events, this is
   * simply taken from `properties.revenue`.
   *
   * If there are dollar signs in these properties, they will be removed. The
   * result will be parsed into a number.
   *
   * @return {number}
   */
  Track.prototype.revenue = function() {
    var revenue = this.proxy('properties.revenue');
    var event = this.event();
    var orderCompletedRegExp = /^[ _]?completed[ _]?order[ _]?|^[ _]?order[ _]?completed[ _]?$/i;

    // it's always revenue, unless it's called during an order completion.
    if (!revenue && event && event.match(orderCompletedRegExp)) {
      revenue = this.proxy('properties.total');
    }

    return currency(revenue);
  };

  /**
   * Get the revenue for this event in "cents" -- in other words, multiply the
   * {@link Track#revenue} by 100, or return 0 if there isn't a numerical revenue
   * for this event.
   *
   * @return {number}
   */
  Track.prototype.cents = function() {
    var revenue = this.revenue();
    return typeof revenue !== 'number' ? this.value() || 0 : revenue * 100;
  };

  /**
   * Convert this event into an {@link Identify} facade.
   *
   * This works by taking this event's underlying object and creating an Identify
   * from it. This event's traits, taken from `options.traits`, will be used as
   * the Identify's traits.
   *
   * @return {Identify}
   */
  Track.prototype.identify = function() {
    // TODO: remove me.
    var json = this.json();
    json.traits = this.traits();
    return new Identify(json, this.opts);
  };

  /**
   * Get float from currency value.
   *
   * @ignore
   * @param {*} val
   * @return {number}
   */
  function currency(val) {
    if (!val) return;
    if (typeof val === 'number') {
      return val;
    }
    if (typeof val !== 'string') {
      return;
    }

    val = val.replace(/\$/g, '');
    val = parseFloat(val);

    if (!isNaN(val)) {
      return val;
    }
  }

  module.exports = Track;

  },{"./facade":1155,"./identify":1157,"./utils":1163,"is-email":1164,"obj-case":1143}],1163:[function(require,module,exports){
  'use strict';

  exports.inherit = require('inherits');
  exports.clone = require('@ndhoule/clone');
  exports.type = require('type-component');

  },{"@ndhoule/clone":7,"inherits":1129,"type-component":1177}],1164:[function(require,module,exports){

  module.exports = function isEmail (string) {
      return (/.+\@.+\..+/).test(string);
  };
  },{}],1165:[function(require,module,exports){

  /**
   * Generate a slug from the given `str`.
   *
   * example:
   *
   *        generate('foo bar');
   *        // > foo-bar
   *
   * @param {String} str
   * @param {Object} options
   * @config {String|RegExp} [replace] characters to replace, defaulted to `/[^a-z0-9]/g`
   * @config {String} [separator] separator to insert, defaulted to `-`
   * @return {String}
   */

  module.exports = function (str, options) {
    options || (options = {});
    return str.toLowerCase()
      .replace(options.replace || /[^a-z0-9]/g, ' ')
      .replace(/^ +| +$/g, '')
      .replace(/ +/g, options.separator || '-')
  };

  },{}],1166:[function(require,module,exports){
  (function (factory) {
      if (typeof exports === 'object') {
          // Node/CommonJS
          module.exports = factory();
      } else if (typeof define === 'function' && define.amd) {
          // AMD
          define(factory);
      } else {
          // Browser globals (with support for web workers)
          var glob;

          try {
              glob = window;
          } catch (e) {
              glob = self;
          }

          glob.SparkMD5 = factory();
      }
  }(function (undefined) {

      'use strict';

      /*
       * Fastest md5 implementation around (JKM md5).
       * Credits: Joseph Myers
       *
       * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
       * @see http://jsperf.com/md5-shootout/7
       */

      /* this function is much faster,
        so if possible we use it. Some IEs
        are the only ones I know of that
        need the idiotic second function,
        generated by an if clause.  */
      var add32 = function (a, b) {
          return (a + b) & 0xFFFFFFFF;
      },
          hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


      function cmn(q, a, b, x, s, t) {
          a = add32(add32(a, q), add32(x, t));
          return add32((a << s) | (a >>> (32 - s)), b);
      }

      function ff(a, b, c, d, x, s, t) {
          return cmn((b & c) | ((~b) & d), a, b, x, s, t);
      }

      function gg(a, b, c, d, x, s, t) {
          return cmn((b & d) | (c & (~d)), a, b, x, s, t);
      }

      function hh(a, b, c, d, x, s, t) {
          return cmn(b ^ c ^ d, a, b, x, s, t);
      }

      function ii(a, b, c, d, x, s, t) {
          return cmn(c ^ (b | (~d)), a, b, x, s, t);
      }

      function md5cycle(x, k) {
          var a = x[0],
              b = x[1],
              c = x[2],
              d = x[3];

          a = ff(a, b, c, d, k[0], 7, -680876936);
          d = ff(d, a, b, c, k[1], 12, -389564586);
          c = ff(c, d, a, b, k[2], 17, 606105819);
          b = ff(b, c, d, a, k[3], 22, -1044525330);
          a = ff(a, b, c, d, k[4], 7, -176418897);
          d = ff(d, a, b, c, k[5], 12, 1200080426);
          c = ff(c, d, a, b, k[6], 17, -1473231341);
          b = ff(b, c, d, a, k[7], 22, -45705983);
          a = ff(a, b, c, d, k[8], 7, 1770035416);
          d = ff(d, a, b, c, k[9], 12, -1958414417);
          c = ff(c, d, a, b, k[10], 17, -42063);
          b = ff(b, c, d, a, k[11], 22, -1990404162);
          a = ff(a, b, c, d, k[12], 7, 1804603682);
          d = ff(d, a, b, c, k[13], 12, -40341101);
          c = ff(c, d, a, b, k[14], 17, -1502002290);
          b = ff(b, c, d, a, k[15], 22, 1236535329);

          a = gg(a, b, c, d, k[1], 5, -165796510);
          d = gg(d, a, b, c, k[6], 9, -1069501632);
          c = gg(c, d, a, b, k[11], 14, 643717713);
          b = gg(b, c, d, a, k[0], 20, -373897302);
          a = gg(a, b, c, d, k[5], 5, -701558691);
          d = gg(d, a, b, c, k[10], 9, 38016083);
          c = gg(c, d, a, b, k[15], 14, -660478335);
          b = gg(b, c, d, a, k[4], 20, -405537848);
          a = gg(a, b, c, d, k[9], 5, 568446438);
          d = gg(d, a, b, c, k[14], 9, -1019803690);
          c = gg(c, d, a, b, k[3], 14, -187363961);
          b = gg(b, c, d, a, k[8], 20, 1163531501);
          a = gg(a, b, c, d, k[13], 5, -1444681467);
          d = gg(d, a, b, c, k[2], 9, -51403784);
          c = gg(c, d, a, b, k[7], 14, 1735328473);
          b = gg(b, c, d, a, k[12], 20, -1926607734);

          a = hh(a, b, c, d, k[5], 4, -378558);
          d = hh(d, a, b, c, k[8], 11, -2022574463);
          c = hh(c, d, a, b, k[11], 16, 1839030562);
          b = hh(b, c, d, a, k[14], 23, -35309556);
          a = hh(a, b, c, d, k[1], 4, -1530992060);
          d = hh(d, a, b, c, k[4], 11, 1272893353);
          c = hh(c, d, a, b, k[7], 16, -155497632);
          b = hh(b, c, d, a, k[10], 23, -1094730640);
          a = hh(a, b, c, d, k[13], 4, 681279174);
          d = hh(d, a, b, c, k[0], 11, -358537222);
          c = hh(c, d, a, b, k[3], 16, -722521979);
          b = hh(b, c, d, a, k[6], 23, 76029189);
          a = hh(a, b, c, d, k[9], 4, -640364487);
          d = hh(d, a, b, c, k[12], 11, -421815835);
          c = hh(c, d, a, b, k[15], 16, 530742520);
          b = hh(b, c, d, a, k[2], 23, -995338651);

          a = ii(a, b, c, d, k[0], 6, -198630844);
          d = ii(d, a, b, c, k[7], 10, 1126891415);
          c = ii(c, d, a, b, k[14], 15, -1416354905);
          b = ii(b, c, d, a, k[5], 21, -57434055);
          a = ii(a, b, c, d, k[12], 6, 1700485571);
          d = ii(d, a, b, c, k[3], 10, -1894986606);
          c = ii(c, d, a, b, k[10], 15, -1051523);
          b = ii(b, c, d, a, k[1], 21, -2054922799);
          a = ii(a, b, c, d, k[8], 6, 1873313359);
          d = ii(d, a, b, c, k[15], 10, -30611744);
          c = ii(c, d, a, b, k[6], 15, -1560198380);
          b = ii(b, c, d, a, k[13], 21, 1309151649);
          a = ii(a, b, c, d, k[4], 6, -145523070);
          d = ii(d, a, b, c, k[11], 10, -1120210379);
          c = ii(c, d, a, b, k[2], 15, 718787259);
          b = ii(b, c, d, a, k[9], 21, -343485551);

          x[0] = add32(a, x[0]);
          x[1] = add32(b, x[1]);
          x[2] = add32(c, x[2]);
          x[3] = add32(d, x[3]);
      }

      function md5blk(s) {
          var md5blks = [],
              i; /* Andy King said do it this way. */

          for (i = 0; i < 64; i += 4) {
              md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
          }
          return md5blks;
      }

      function md5blk_array(a) {
          var md5blks = [],
              i; /* Andy King said do it this way. */

          for (i = 0; i < 64; i += 4) {
              md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
          }
          return md5blks;
      }

      function md51(s) {
          var n = s.length,
              state = [1732584193, -271733879, -1732584194, 271733878],
              i,
              length,
              tail,
              tmp,
              lo,
              hi;

          for (i = 64; i <= n; i += 64) {
              md5cycle(state, md5blk(s.substring(i - 64, i)));
          }
          s = s.substring(i - 64);
          length = s.length;
          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
          }
          tail[i >> 2] |= 0x80 << ((i % 4) << 3);
          if (i > 55) {
              md5cycle(state, tail);
              for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
              }
          }

          // Beware that the final length might not fit in 32 bits so we take care of that
          tmp = n * 8;
          tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
          lo = parseInt(tmp[2], 16);
          hi = parseInt(tmp[1], 16) || 0;

          tail[14] = lo;
          tail[15] = hi;

          md5cycle(state, tail);
          return state;
      }

      function md51_array(a) {
          var n = a.length,
              state = [1732584193, -271733879, -1732584194, 271733878],
              i,
              length,
              tail,
              tmp,
              lo,
              hi;

          for (i = 64; i <= n; i += 64) {
              md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
          }

          // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
          // containing the last element of the parent array if the sub array specified starts
          // beyond the length of the parent array - weird.
          // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
          a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

          length = a.length;
          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= a[i] << ((i % 4) << 3);
          }

          tail[i >> 2] |= 0x80 << ((i % 4) << 3);
          if (i > 55) {
              md5cycle(state, tail);
              for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
              }
          }

          // Beware that the final length might not fit in 32 bits so we take care of that
          tmp = n * 8;
          tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
          lo = parseInt(tmp[2], 16);
          hi = parseInt(tmp[1], 16) || 0;

          tail[14] = lo;
          tail[15] = hi;

          md5cycle(state, tail);

          return state;
      }

      function rhex(n) {
          var s = '',
              j;
          for (j = 0; j < 4; j += 1) {
              s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
          }
          return s;
      }

      function hex(x) {
          var i;
          for (i = 0; i < x.length; i += 1) {
              x[i] = rhex(x[i]);
          }
          return x.join('');
      }

      // In some cases the fast add32 function cannot be used..
      if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
          add32 = function (x, y) {
              var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                  msw = (x >> 16) + (y >> 16) + (lsw >> 16);
              return (msw << 16) | (lsw & 0xFFFF);
          };
      }

      // ---------------------------------------------------

      /**
       * ArrayBuffer slice polyfill.
       *
       * @see https://github.com/ttaubert/node-arraybuffer-slice
       */

      if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
          (function () {
              function clamp(val, length) {
                  val = (val | 0) || 0;

                  if (val < 0) {
                      return Math.max(val + length, 0);
                  }

                  return Math.min(val, length);
              }

              ArrayBuffer.prototype.slice = function (from, to) {
                  var length = this.byteLength,
                      begin = clamp(from, length),
                      end = length,
                      num,
                      target,
                      targetArray,
                      sourceArray;

                  if (to !== undefined) {
                      end = clamp(to, length);
                  }

                  if (begin > end) {
                      return new ArrayBuffer(0);
                  }

                  num = end - begin;
                  target = new ArrayBuffer(num);
                  targetArray = new Uint8Array(target);

                  sourceArray = new Uint8Array(this, begin, num);
                  targetArray.set(sourceArray);

                  return target;
              };
          })();
      }

      // ---------------------------------------------------

      /**
       * Helpers.
       */

      function toUtf8(str) {
          if (/[\u0080-\uFFFF]/.test(str)) {
              str = unescape(encodeURIComponent(str));
          }

          return str;
      }

      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
          var length = str.length,
             buff = new ArrayBuffer(length),
             arr = new Uint8Array(buff),
             i;

          for (i = 0; i < length; i += 1) {
              arr[i] = str.charCodeAt(i);
          }

          return returnUInt8Array ? arr : buff;
      }

      function arrayBuffer2Utf8Str(buff) {
          return String.fromCharCode.apply(null, new Uint8Array(buff));
      }

      function concatenateArrayBuffers(first, second, returnUInt8Array) {
          var result = new Uint8Array(first.byteLength + second.byteLength);

          result.set(new Uint8Array(first));
          result.set(new Uint8Array(second), first.byteLength);

          return returnUInt8Array ? result : result.buffer;
      }

      function hexToBinaryString(hex) {
          var bytes = [],
              length = hex.length,
              x;

          for (x = 0; x < length - 1; x += 2) {
              bytes.push(parseInt(hex.substr(x, 2), 16));
          }

          return String.fromCharCode.apply(String, bytes);
      }

      // ---------------------------------------------------

      /**
       * SparkMD5 OOP implementation.
       *
       * Use this class to perform an incremental md5, otherwise use the
       * static methods instead.
       */

      function SparkMD5() {
          // call reset to init the instance
          this.reset();
      }

      /**
       * Appends a string.
       * A conversion will be applied if an utf8 string is detected.
       *
       * @param {String} str The string to be appended
       *
       * @return {SparkMD5} The instance itself
       */
      SparkMD5.prototype.append = function (str) {
          // Converts the string to utf8 bytes if necessary
          // Then append as binary
          this.appendBinary(toUtf8(str));

          return this;
      };

      /**
       * Appends a binary string.
       *
       * @param {String} contents The binary string to be appended
       *
       * @return {SparkMD5} The instance itself
       */
      SparkMD5.prototype.appendBinary = function (contents) {
          this._buff += contents;
          this._length += contents.length;

          var length = this._buff.length,
              i;

          for (i = 64; i <= length; i += 64) {
              md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
          }

          this._buff = this._buff.substring(i - 64);

          return this;
      };

      /**
       * Finishes the incremental computation, reseting the internal state and
       * returning the result.
       *
       * @param {Boolean} raw True to get the raw string, false to get the hex string
       *
       * @return {String} The result
       */
      SparkMD5.prototype.end = function (raw) {
          var buff = this._buff,
              length = buff.length,
              i,
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              ret;

          for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
          }

          this._finish(tail, length);
          ret = hex(this._hash);

          if (raw) {
              ret = hexToBinaryString(ret);
          }

          this.reset();

          return ret;
      };

      /**
       * Resets the internal state of the computation.
       *
       * @return {SparkMD5} The instance itself
       */
      SparkMD5.prototype.reset = function () {
          this._buff = '';
          this._length = 0;
          this._hash = [1732584193, -271733879, -1732584194, 271733878];

          return this;
      };

      /**
       * Gets the internal state of the computation.
       *
       * @return {Object} The state
       */
      SparkMD5.prototype.getState = function () {
          return {
              buff: this._buff,
              length: this._length,
              hash: this._hash
          };
      };

      /**
       * Gets the internal state of the computation.
       *
       * @param {Object} state The state
       *
       * @return {SparkMD5} The instance itself
       */
      SparkMD5.prototype.setState = function (state) {
          this._buff = state.buff;
          this._length = state.length;
          this._hash = state.hash;

          return this;
      };

      /**
       * Releases memory used by the incremental buffer and other additional
       * resources. If you plan to use the instance again, use reset instead.
       */
      SparkMD5.prototype.destroy = function () {
          delete this._hash;
          delete this._buff;
          delete this._length;
      };

      /**
       * Finish the final calculation based on the tail.
       *
       * @param {Array}  tail   The tail (will be modified)
       * @param {Number} length The length of the remaining buffer
       */
      SparkMD5.prototype._finish = function (tail, length) {
          var i = length,
              tmp,
              lo,
              hi;

          tail[i >> 2] |= 0x80 << ((i % 4) << 3);
          if (i > 55) {
              md5cycle(this._hash, tail);
              for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
              }
          }

          // Do the final computation based on the tail and length
          // Beware that the final length may not fit in 32 bits so we take care of that
          tmp = this._length * 8;
          tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
          lo = parseInt(tmp[2], 16);
          hi = parseInt(tmp[1], 16) || 0;

          tail[14] = lo;
          tail[15] = hi;
          md5cycle(this._hash, tail);
      };

      /**
       * Performs the md5 hash on a string.
       * A conversion will be applied if utf8 string is detected.
       *
       * @param {String}  str The string
       * @param {Boolean} raw True to get the raw string, false to get the hex string
       *
       * @return {String} The result
       */
      SparkMD5.hash = function (str, raw) {
          // Converts the string to utf8 bytes if necessary
          // Then compute it using the binary function
          return SparkMD5.hashBinary(toUtf8(str), raw);
      };

      /**
       * Performs the md5 hash on a binary string.
       *
       * @param {String}  content The binary string
       * @param {Boolean} raw     True to get the raw string, false to get the hex string
       *
       * @return {String} The result
       */
      SparkMD5.hashBinary = function (content, raw) {
          var hash = md51(content),
              ret = hex(hash);

          return raw ? hexToBinaryString(ret) : ret;
      };

      // ---------------------------------------------------

      /**
       * SparkMD5 OOP implementation for array buffers.
       *
       * Use this class to perform an incremental md5 ONLY for array buffers.
       */
      SparkMD5.ArrayBuffer = function () {
          // call reset to init the instance
          this.reset();
      };

      /**
       * Appends an array buffer.
       *
       * @param {ArrayBuffer} arr The array to be appended
       *
       * @return {SparkMD5.ArrayBuffer} The instance itself
       */
      SparkMD5.ArrayBuffer.prototype.append = function (arr) {
          var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
              length = buff.length,
              i;

          this._length += arr.byteLength;

          for (i = 64; i <= length; i += 64) {
              md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
          }

          this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

          return this;
      };

      /**
       * Finishes the incremental computation, reseting the internal state and
       * returning the result.
       *
       * @param {Boolean} raw True to get the raw string, false to get the hex string
       *
       * @return {String} The result
       */
      SparkMD5.ArrayBuffer.prototype.end = function (raw) {
          var buff = this._buff,
              length = buff.length,
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              i,
              ret;

          for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= buff[i] << ((i % 4) << 3);
          }

          this._finish(tail, length);
          ret = hex(this._hash);

          if (raw) {
              ret = hexToBinaryString(ret);
          }

          this.reset();

          return ret;
      };

      /**
       * Resets the internal state of the computation.
       *
       * @return {SparkMD5.ArrayBuffer} The instance itself
       */
      SparkMD5.ArrayBuffer.prototype.reset = function () {
          this._buff = new Uint8Array(0);
          this._length = 0;
          this._hash = [1732584193, -271733879, -1732584194, 271733878];

          return this;
      };

      /**
       * Gets the internal state of the computation.
       *
       * @return {Object} The state
       */
      SparkMD5.ArrayBuffer.prototype.getState = function () {
          var state = SparkMD5.prototype.getState.call(this);

          // Convert buffer to a string
          state.buff = arrayBuffer2Utf8Str(state.buff);

          return state;
      };

      /**
       * Gets the internal state of the computation.
       *
       * @param {Object} state The state
       *
       * @return {SparkMD5.ArrayBuffer} The instance itself
       */
      SparkMD5.ArrayBuffer.prototype.setState = function (state) {
          // Convert string to buffer
          state.buff = utf8Str2ArrayBuffer(state.buff, true);

          return SparkMD5.prototype.setState.call(this, state);
      };

      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

      /**
       * Performs the md5 hash on an array buffer.
       *
       * @param {ArrayBuffer} arr The array buffer
       * @param {Boolean}     raw True to get the raw string, false to get the hex one
       *
       * @return {String} The result
       */
      SparkMD5.ArrayBuffer.hash = function (arr, raw) {
          var hash = md51_array(new Uint8Array(arr)),
              ret = hex(hash);

          return raw ? hexToBinaryString(ret) : ret;
      };

      return SparkMD5;
  }));

  },{}],1167:[function(require,module,exports){

  /**
   * Module exports.
   */

  module.exports = throttle;

  /**
   * Returns a new function that, when invoked, invokes `func` at most one time per
   * `wait` milliseconds.
   *
   * @param {Function} func The `Function` instance to wrap.
   * @param {Number} wait The minimum number of milliseconds that must elapse in between `func` invokations.
   * @return {Function} A new function that wraps the `func` function passed in.
   * @api public
   */

  function throttle (func, wait) {
    var rtn; // return value
    var last = 0; // last invokation timestamp
    return function throttled () {
      var now = new Date().getTime();
      var delta = now - last;
      if (delta >= wait) {
        rtn = func.apply(this, arguments);
        last = now;
      }
      return rtn;
    };
  }

  },{}],1168:[function(require,module,exports){
  (function (setImmediate,clearImmediate){(function (){
  var nextTick = require('process/browser.js').nextTick;
  var apply = Function.prototype.apply;
  var slice = Array.prototype.slice;
  var immediateIds = {};
  var nextImmediateId = 0;

  // DOM APIs, for completeness

  exports.setTimeout = function() {
    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
  };
  exports.setInterval = function() {
    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
  };
  exports.clearTimeout =
  exports.clearInterval = function(timeout) { timeout.close(); };

  function Timeout(id, clearFn) {
    this._id = id;
    this._clearFn = clearFn;
  }
  Timeout.prototype.unref = Timeout.prototype.ref = function() {};
  Timeout.prototype.close = function() {
    this._clearFn.call(window, this._id);
  };

  // Does not start the time, just sets up the members needed.
  exports.enroll = function(item, msecs) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = msecs;
  };

  exports.unenroll = function(item) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = -1;
  };

  exports._unrefActive = exports.active = function(item) {
    clearTimeout(item._idleTimeoutId);

    var msecs = item._idleTimeout;
    if (msecs >= 0) {
      item._idleTimeoutId = setTimeout(function onTimeout() {
        if (item._onTimeout)
          item._onTimeout();
      }, msecs);
    }
  };

  // That's not how node.js implements it but the exposed api is the same.
  exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
    var id = nextImmediateId++;
    var args = arguments.length < 2 ? false : slice.call(arguments, 1);

    immediateIds[id] = true;

    nextTick(function onNextTick() {
      if (immediateIds[id]) {
        // fn.call() is faster so we optimize for the common use-case
        // @see http://jsperf.com/call-apply-segu
        if (args) {
          fn.apply(null, args);
        } else {
          fn.call(null);
        }
        // Prevent ids from leaking
        exports.clearImmediate(id);
      }
    });

    return id;
  };

  exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
    delete immediateIds[id];
  };
  }).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
  },{"process/browser.js":1149,"timers":1168}],1169:[function(require,module,exports){

  var space = require('to-space-case')

  /**
   * Export.
   */

  module.exports = toCamelCase

  /**
   * Convert a `string` to camel case.
   *
   * @param {String} string
   * @return {String}
   */

  function toCamelCase(string) {
    return space(string).replace(/\s(\w)/g, function (matches, letter) {
      return letter.toUpperCase()
    })
  }

  },{"to-space-case":1173}],1170:[function(require,module,exports){

  /**
   * Module Dependencies
   */

  var expr;
  try {
    expr = require('props');
  } catch(e) {
    expr = require('component-props');
  }

  /**
   * Expose `toFunction()`.
   */

  module.exports = toFunction;

  /**
   * Convert `obj` to a `Function`.
   *
   * @param {Mixed} obj
   * @return {Function}
   * @api private
   */

  function toFunction(obj) {
    switch ({}.toString.call(obj)) {
      case '[object Object]':
        return objectToFunction(obj);
      case '[object Function]':
        return obj;
      case '[object String]':
        return stringToFunction(obj);
      case '[object RegExp]':
        return regexpToFunction(obj);
      default:
        return defaultToFunction(obj);
    }
  }

  /**
   * Default to strict equality.
   *
   * @param {Mixed} val
   * @return {Function}
   * @api private
   */

  function defaultToFunction(val) {
    return function(obj){
      return val === obj;
    };
  }

  /**
   * Convert `re` to a function.
   *
   * @param {RegExp} re
   * @return {Function}
   * @api private
   */

  function regexpToFunction(re) {
    return function(obj){
      return re.test(obj);
    };
  }

  /**
   * Convert property `str` to a function.
   *
   * @param {String} str
   * @return {Function}
   * @api private
   */

  function stringToFunction(str) {
    // immediate such as "> 20"
    if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

    // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
    return new Function('_', 'return ' + get(str));
  }

  /**
   * Convert `object` to a function.
   *
   * @param {Object} object
   * @return {Function}
   * @api private
   */

  function objectToFunction(obj) {
    var match = {};
    for (var key in obj) {
      match[key] = typeof obj[key] === 'string'
        ? defaultToFunction(obj[key])
        : toFunction(obj[key]);
    }
    return function(val){
      if (typeof val !== 'object') return false;
      for (var key in match) {
        if (!(key in val)) return false;
        if (!match[key](val[key])) return false;
      }
      return true;
    };
  }

  /**
   * Built the getter function. Supports getter style functions
   *
   * @param {String} str
   * @return {String}
   * @api private
   */

  function get(str) {
    var props = expr(str);
    if (!props.length) return '_.' + str;

    var val, i, prop;
    for (i = 0; i < props.length; i++) {
      prop = props[i];
      val = '_.' + prop;
      val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";

      // mimic negative lookbehind to avoid problems with nested properties
      str = stripNested(prop, str, val);
    }

    return str;
  }

  /**
   * Mimic negative lookbehind to avoid problems with nested properties.
   *
   * See: http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript
   *
   * @param {String} prop
   * @param {String} str
   * @param {String} val
   * @return {String}
   * @api private
   */

  function stripNested (prop, str, val) {
    return str.replace(new RegExp('(\\.)?' + prop, 'g'), function($0, $1) {
      return $1 ? $0 : val;
    });
  }

  },{"component-props":1117,"props":1117}],1171:[function(require,module,exports){
  arguments[4][384][0].apply(exports,arguments)
  },{"dup":384}],1172:[function(require,module,exports){

  var toSpace = require('to-space-case')

  /**
   * Export.
   */

  module.exports = toSnakeCase

  /**
   * Convert a `string` to snake case.
   *
   * @param {String} string
   * @return {String}
   */

  function toSnakeCase(string) {
    return toSpace(string).replace(/\s/g, '_')
  }

  },{"to-space-case":1173}],1173:[function(require,module,exports){

  var clean = require('to-no-case')

  /**
   * Export.
   */

  module.exports = toSpaceCase

  /**
   * Convert a `string` to space case.
   *
   * @param {String} string
   * @return {String}
   */

  function toSpaceCase(string) {
    return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
      return match ? ' ' + match : ''
    }).trim()
  }

  },{"to-no-case":1174}],1174:[function(require,module,exports){
  arguments[4][388][0].apply(exports,arguments)
  },{"dup":388}],1175:[function(require,module,exports){
  'use strict';

  /**
   * Convert a `date` into a Unix timestamp.
   *
   * @param {Date}
   * @return {Number}
   */

  function toUnixTimestamp(date) {
    return Math.floor(new Date(date).getTime() / 1000);
  }

  /**
   * Exports.
   */

  module.exports = toUnixTimestamp;

  },{}],1176:[function(require,module,exports){
  exports = module.exports = trim;

  function trim(str){
    if (str.trim) return str.trim();
    return exports.right(exports.left(str));
  }

  exports.left = function(str){
    if (str.trimLeft) return str.trimLeft();

    return str.replace(/^\s\s*/, '');
  };

  exports.right = function(str){
    if (str.trimRight) return str.trimRight();

    var whitespace_pattern = /\s/,
        i = str.length;
    while (whitespace_pattern.test(str.charAt(--i)));

    return str.slice(0, i + 1);
  };

  },{}],1177:[function(require,module,exports){

  /**
   * toString ref.
   */

  var toString = Object.prototype.toString;

  /**
   * Return the type of `val`.
   *
   * @param {Mixed} val
   * @return {String}
   * @api public
   */

  module.exports = function(val){
    switch (toString.call(val)) {
      case '[object Function]': return 'function';
      case '[object Date]': return 'date';
      case '[object RegExp]': return 'regexp';
      case '[object Arguments]': return 'arguments';
      case '[object Array]': return 'array';
    }

    if (val === null) return 'null';
    if (val === undefined) return 'undefined';
    if (val === Object(val)) return 'object';

    return typeof val;
  };

  },{}],1178:[function(require,module,exports){
  var toString = Object.prototype.toString

  module.exports = function(val){
    switch (toString.call(val)) {
      case '[object Function]': return 'function'
      case '[object Date]': return 'date'
      case '[object RegExp]': return 'regexp'
      case '[object Arguments]': return 'arguments'
      case '[object Array]': return 'array'
      case '[object String]': return 'string'
    }

    if (typeof val == 'object' && val && typeof val.length == 'number') {
      try {
        if (typeof val.callee == 'function') return 'arguments';
      } catch (ex) {
        if (ex instanceof TypeError) {
          return 'arguments';
        }
      }
    }

    if (val === null) return 'null'
    if (val === undefined) return 'undefined'
    if (val && val.nodeType === 1) return 'element'
    if (val === Object(val)) return 'object'

    return typeof val
  }

  },{}],1179:[function(require,module,exports){


  /**
   * Converts a date to a unix time stamp
   */

  module.exports = function (date) {
    date = new Date(date);
    return Math.floor(date.getTime() / 1000);
  }
  },{}],1180:[function(require,module,exports){

  /**
   * Protocol.
   */

  module.exports = function (url) {
    switch (arguments.length) {
      case 0: return check();
      case 1: return transform(url);
    }
  };


  /**
   * Transform a protocol-relative `url` to the use the proper protocol.
   *
   * @param {String} url
   * @return {String}
   */

  function transform (url) {
    return check() ? 'https:' + url : 'http:' + url;
  }


  /**
   * Check whether `https:` be used for loading scripts.
   *
   * @return {Boolean}
   */

  function check () {
    return (
      location.protocol == 'https:' ||
      location.protocol == 'chrome-extension:'
    );
  }
  },{}],1181:[function(require,module,exports){
  module.exports = encode;

  function encode(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";

      for (var n = 0; n < string.length; n++) {

          var c = string.charCodeAt(n);

          if (c < 128) {
              utftext += String.fromCharCode(c);
          }
          else if ((c > 127) && (c < 2048)) {
              utftext += String.fromCharCode((c >> 6) | 192);
              utftext += String.fromCharCode((c & 63) | 128);
          }
          else {
              utftext += String.fromCharCode((c >> 12) | 224);
              utftext += String.fromCharCode(((c >> 6) & 63) | 128);
              utftext += String.fromCharCode((c & 63) | 128);
          }

      }

      return utftext;
  }
  },{}],1182:[function(require,module,exports){
  var v1 = require('./v1');
  var v4 = require('./v4');

  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;

  module.exports = uuid;

  },{"./v1":1185,"./v4":1186}],1183:[function(require,module,exports){
  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return ([
      bth[buf[i++]], bth[buf[i++]],
      bth[buf[i++]], bth[buf[i++]], '-',
      bth[buf[i++]], bth[buf[i++]], '-',
      bth[buf[i++]], bth[buf[i++]], '-',
      bth[buf[i++]], bth[buf[i++]], '-',
      bth[buf[i++]], bth[buf[i++]],
      bth[buf[i++]], bth[buf[i++]],
      bth[buf[i++]], bth[buf[i++]]
    ]).join('');
  }

  module.exports = bytesToUuid;

  },{}],1184:[function(require,module,exports){
  // Unique ID creation requires a high quality random # generator.  In the
  // browser this is a little complicated due to unknown quality of Math.random()
  // and inconsistent support for the `crypto` API.  We do the best we can via
  // feature-detection

  // getRandomValues needs to be invoked in a context where "this" is a Crypto
  // implementation. Also, find the complete implementation of crypto on IE11.
  var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                        (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

  if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }

  },{}],1185:[function(require,module,exports){
  var rng = require('./lib/rng');
  var bytesToUuid = require('./lib/bytesToUuid');

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq;

  // Previous uuid creation time
  var _lastMSecs = 0;
  var _lastNSecs = 0;

  // See https://github.com/uuidjs/uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
          seedBytes[0] | 0x01,
          seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
        ];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid(b);
  }

  module.exports = v1;

  },{"./lib/bytesToUuid":1183,"./lib/rng":1184}],1186:[function(require,module,exports){
  var rng = require('./lib/rng');
  var bytesToUuid = require('./lib/bytesToUuid');

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  module.exports = v4;

  },{"./lib/bytesToUuid":1183,"./lib/rng":1184}],1187:[function(require,module,exports){

  /**
   * dependencies.
   */

  var unserialize = require('unserialize');
  var each = require('each');
  var storage;

  /**
   * Safari throws when a user
   * blocks access to cookies / localstorage.
   */

  try {
    storage = window.localStorage;
  } catch (e) {
    storage = null;
  }

  /**
   * Expose `store`
   */

  module.exports = store;

  /**
   * Store the given `key`, `val`.
   *
   * @param {String|Object} key
   * @param {Mixed} value
   * @return {Mixed}
   * @api public
   */

  function store(key, value){
    var length = arguments.length;
    if (0 == length) return all();
    if (2 <= length) return set(key, value);
    if (1 != length) return;
    if (null == key) return storage.clear();
    if ('string' == typeof key) return get(key);
    if ('object' == typeof key) return each(key, set);
  }

  /**
   * supported flag.
   */

  store.supported = !! storage;

  /**
   * Set `key` to `val`.
   *
   * @param {String} key
   * @param {Mixed} val
   */

  function set(key, val){
    return null == val
      ? storage.removeItem(key)
      : storage.setItem(key, JSON.stringify(val));
  }

  /**
   * Get `key`.
   *
   * @param {String} key
   * @return {Mixed}
   */

  function get(key){
    return unserialize(storage.getItem(key));
  }

  /**
   * Get all.
   *
   * @return {Object}
   */

  function all(){
    var len = storage.length;
    var ret = {};
    var key;

    while (0 <= --len) {
      key = storage.key(len);
      ret[key] = get(key);
    }

    return ret;
  }

  },{"each":1112,"unserialize":1188}],1188:[function(require,module,exports){

  /**
   * Unserialize the given "stringified" javascript.
   *
   * @param {String} val
   * @return {Mixed}
   */

  module.exports = function(val){
    try {
      return JSON.parse(val);
    } catch (e) {
      return val || undefined;
    }
  };

  },{}]},{},[2]);
  }(window.define));
